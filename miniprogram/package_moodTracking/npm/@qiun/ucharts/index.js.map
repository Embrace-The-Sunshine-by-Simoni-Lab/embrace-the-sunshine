{"version":3,"sources":["u-charts.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*\n * uCharts (R)\n * 高性能跨平台图表库，支持H5、APP、小程序（微信/支付宝/百度/头条/QQ/360/快手）、Vue、Taro等支持canvas的框架平台\n * Copyright (C) 2018-2022 QIUN (R) 秋云 https://www.ucharts.cn All rights reserved.\n * Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n * 复制使用请保留本段注释，感谢支持开源！\n * \n * uCharts (R) 官方网站\n * https://www.uCharts.cn\n * \n * 开源地址:\n * https://gitee.com/uCharts/uCharts\n * \n * uni-app插件市场地址：\n * http://ext.dcloud.net.cn/plugin?id=271\n * \n */\r\n\r\n\r\n\r\nvar config = {\r\n  version: 'v2.4.3-20220505',\r\n  yAxisWidth: 15,\r\n  xAxisHeight: 22,\r\n  xAxisTextPadding: 3,\r\n  padding: [10, 10, 10, 10],\r\n  pixelRatio: 1,\r\n  rotate: false,\r\n  fontSize: 13,\r\n  fontColor: '#666666',\r\n  dataPointShape: ['circle', 'circle', 'circle', 'circle'],\r\n  color: ['#1890FF', '#91CB74', '#FAC858', '#EE6666', '#73C0DE', '#3CA272', '#FC8452', '#9A60B4', '#ea7ccc'],\r\n  linearColor: ['#0EE2F8', '#2BDCA8', '#FA7D8D', '#EB88E2', '#2AE3A0', '#0EE2F8', '#EB88E2', '#6773E3', '#F78A85'],\r\n  pieChartLinePadding: 15,\r\n  pieChartTextPadding: 5,\r\n  titleFontSize: 20,\r\n  subtitleFontSize: 15,\r\n  toolTipPadding: 3,\r\n  toolTipBackground: '#000000',\r\n  toolTipOpacity: 0.7,\r\n  toolTipLineHeight: 20,\r\n  radarLabelTextMargin: 13,\r\n};\r\n\r\nvar assign = function(target, ...varArgs) {\r\n  if (target == null) {\r\n    throw new TypeError('[uCharts] Cannot convert undefined or null to object');\r\n  }\r\n  if (!varArgs || varArgs.length <= 0) {\r\n    return target;\r\n  }\r\n  // 深度合并对象\r\n  function deepAssign(obj1, obj2) {\r\n    for (let key in obj2) {\r\n      obj1[key] = obj1[key] && obj1[key].toString() === \"[object Object]\" ?\r\n        deepAssign(obj1[key], obj2[key]) : obj1[key] = obj2[key];\r\n    }\r\n    return obj1;\r\n  }\r\n  varArgs.forEach(val => {\r\n    target = deepAssign(target, val);\r\n  });\r\n  return target;\r\n};\r\n\r\nvar util = {\r\n  toFixed: function toFixed(num, limit) {\r\n    limit = limit || 2;\r\n    if (this.isFloat(num)) {\r\n      num = num.toFixed(limit);\r\n    }\r\n    return num;\r\n  },\r\n  isFloat: function isFloat(num) {\r\n    return num % 1 !== 0;\r\n  },\r\n  approximatelyEqual: function approximatelyEqual(num1, num2) {\r\n    return Math.abs(num1 - num2) < 1e-10;\r\n  },\r\n  isSameSign: function isSameSign(num1, num2) {\r\n    return Math.abs(num1) === num1 && Math.abs(num2) === num2 || Math.abs(num1) !== num1 && Math.abs(num2) !== num2;\r\n  },\r\n  isSameXCoordinateArea: function isSameXCoordinateArea(p1, p2) {\r\n    return this.isSameSign(p1.x, p2.x);\r\n  },\r\n  isCollision: function isCollision(obj1, obj2) {\r\n    obj1.end = {};\r\n    obj1.end.x = obj1.start.x + obj1.width;\r\n    obj1.end.y = obj1.start.y - obj1.height;\r\n    obj2.end = {};\r\n    obj2.end.x = obj2.start.x + obj2.width;\r\n    obj2.end.y = obj2.start.y - obj2.height;\r\n    var flag = obj2.start.x > obj1.end.x || obj2.end.x < obj1.start.x || obj2.end.y > obj1.start.y || obj2.start.y < obj1.end.y;\r\n    return !flag;\r\n  }\r\n};\r\n\r\n//兼容H5点击事件\r\nfunction getH5Offset(e) {\r\n  e.mp = {\r\n    changedTouches: []\r\n  };\r\n  e.mp.changedTouches.push({\r\n    x: e.offsetX,\r\n    y: e.offsetY\r\n  });\r\n  return e;\r\n}\r\n\r\n// hex 转 rgba\r\nfunction hexToRgb(hexValue, opc) {\r\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  var hex = hexValue.replace(rgx, function(m, r, g, b) {\r\n    return r + r + g + g + b + b;\r\n  });\r\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  var r = parseInt(rgb[1], 16);\r\n  var g = parseInt(rgb[2], 16);\r\n  var b = parseInt(rgb[3], 16);\r\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + opc + ')';\r\n}\r\n\r\nfunction findRange(num, type, limit) {\r\n  if (isNaN(num)) {\r\n    throw new Error('[uCharts] series数据需为Number格式');\r\n  }\r\n  limit = limit || 10;\r\n  type = type ? type : 'upper';\r\n  var multiple = 1;\r\n  while (limit < 1) {\r\n    limit *= 10;\r\n    multiple *= 10;\r\n  }\r\n  if (type === 'upper') {\r\n    num = Math.ceil(num * multiple);\r\n  } else {\r\n    num = Math.floor(num * multiple);\r\n  }\r\n  while (num % limit !== 0) {\r\n    if (type === 'upper') {\r\n      if (num == num + 1) { //修复数据值过大num++无效的bug by 向日葵 @xrk_jy\r\n        break;\r\n      }\r\n      num++;\r\n    } else {\r\n      num--;\r\n    }\r\n  }\r\n  return num / multiple;\r\n}\r\n\r\nfunction calCandleMA(dayArr, nameArr, colorArr, kdata) {\r\n  let seriesTemp = [];\r\n  for (let k = 0; k < dayArr.length; k++) {\r\n    let seriesItem = {\r\n      data: [],\r\n      name: nameArr[k],\r\n      color: colorArr[k]\r\n    };\r\n    for (let i = 0, len = kdata.length; i < len; i++) {\r\n      if (i < dayArr[k]) {\r\n        seriesItem.data.push(null);\r\n        continue;\r\n      }\r\n      let sum = 0;\r\n      for (let j = 0; j < dayArr[k]; j++) {\r\n        sum += kdata[i - j][1];\r\n      }\r\n      seriesItem.data.push(+(sum / dayArr[k]).toFixed(3));\r\n    }\r\n    seriesTemp.push(seriesItem);\r\n  }\r\n  return seriesTemp;\r\n}\r\n\r\nfunction calValidDistance(self, distance, chartData, config, opts) {\r\n  var dataChartAreaWidth = opts.width - opts.area[1] - opts.area[3];\r\n  var dataChartWidth = chartData.eachSpacing * (opts.chartData.xAxisData.xAxisPoints.length - 1);\r\n  if(opts.type == 'mount' && opts.extra && opts.extra.mount && opts.extra.mount.widthRatio && opts.extra.mount.widthRatio > 1){\r\n    if(opts.extra.mount.widthRatio>2) opts.extra.mount.widthRatio = 2\r\n    dataChartWidth += (opts.extra.mount.widthRatio - 1)*chartData.eachSpacing;\r\n  }\r\n  var validDistance = distance;\r\n  if (distance >= 0) {\r\n    validDistance = 0;\r\n    self.uevent.trigger('scrollLeft');\r\n    self.scrollOption.position = 'left'\r\n    opts.xAxis.scrollPosition = 'left';\r\n  } else if (Math.abs(distance) >= dataChartWidth - dataChartAreaWidth) {\r\n    validDistance = dataChartAreaWidth - dataChartWidth;\r\n    self.uevent.trigger('scrollRight');\r\n    self.scrollOption.position = 'right'\r\n    opts.xAxis.scrollPosition = 'right';\r\n  } else {\r\n    self.scrollOption.position = distance\r\n    opts.xAxis.scrollPosition = distance;\r\n  }\r\n  return validDistance;\r\n}\r\n\r\nfunction isInAngleRange(angle, startAngle, endAngle) {\r\n  function adjust(angle) {\r\n    while (angle < 0) {\r\n      angle += 2 * Math.PI;\r\n    }\r\n    while (angle > 2 * Math.PI) {\r\n      angle -= 2 * Math.PI;\r\n    }\r\n    return angle;\r\n  }\r\n  angle = adjust(angle);\r\n  startAngle = adjust(startAngle);\r\n  endAngle = adjust(endAngle);\r\n  if (startAngle > endAngle) {\r\n    endAngle += 2 * Math.PI;\r\n    if (angle < startAngle) {\r\n      angle += 2 * Math.PI;\r\n    }\r\n  }\r\n  return angle >= startAngle && angle <= endAngle;\r\n}\r\n\r\nfunction createCurveControlPoints(points, i) {\r\n  function isNotMiddlePoint(points, i) {\r\n    if (points[i - 1] && points[i + 1]) {\r\n      return points[i].y >= Math.max(points[i - 1].y, points[i + 1].y) || points[i].y <= Math.min(points[i - 1].y,\r\n        points[i + 1].y);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  function isNotMiddlePointX(points, i) {\r\n    if (points[i - 1] && points[i + 1]) {\r\n      return points[i].x >= Math.max(points[i - 1].x, points[i + 1].x) || points[i].x <= Math.min(points[i - 1].x,\r\n        points[i + 1].x);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  var a = 0.2;\r\n  var b = 0.2;\r\n  var pAx = null;\r\n  var pAy = null;\r\n  var pBx = null;\r\n  var pBy = null;\r\n  if (i < 1) {\r\n    pAx = points[0].x + (points[1].x - points[0].x) * a;\r\n    pAy = points[0].y + (points[1].y - points[0].y) * a;\r\n  } else {\r\n    pAx = points[i].x + (points[i + 1].x - points[i - 1].x) * a;\r\n    pAy = points[i].y + (points[i + 1].y - points[i - 1].y) * a;\r\n  }\r\n\r\n  if (i > points.length - 3) {\r\n    var last = points.length - 1;\r\n    pBx = points[last].x - (points[last].x - points[last - 1].x) * b;\r\n    pBy = points[last].y - (points[last].y - points[last - 1].y) * b;\r\n  } else {\r\n    pBx = points[i + 1].x - (points[i + 2].x - points[i].x) * b;\r\n    pBy = points[i + 1].y - (points[i + 2].y - points[i].y) * b;\r\n  }\r\n  if (isNotMiddlePoint(points, i + 1)) {\r\n    pBy = points[i + 1].y;\r\n  }\r\n  if (isNotMiddlePoint(points, i)) {\r\n    pAy = points[i].y;\r\n  }\r\n  if (isNotMiddlePointX(points, i + 1)) {\r\n    pBx = points[i + 1].x;\r\n  }\r\n  if (isNotMiddlePointX(points, i)) {\r\n    pAx = points[i].x;\r\n  }\r\n  if (pAy >= Math.max(points[i].y, points[i + 1].y) || pAy <= Math.min(points[i].y, points[i + 1].y)) {\r\n    pAy = points[i].y;\r\n  }\r\n  if (pBy >= Math.max(points[i].y, points[i + 1].y) || pBy <= Math.min(points[i].y, points[i + 1].y)) {\r\n    pBy = points[i + 1].y;\r\n  }\r\n  if (pAx >= Math.max(points[i].x, points[i + 1].x) || pAx <= Math.min(points[i].x, points[i + 1].x)) {\r\n    pAx = points[i].x;\r\n  }\r\n  if (pBx >= Math.max(points[i].x, points[i + 1].x) || pBx <= Math.min(points[i].x, points[i + 1].x)) {\r\n    pBx = points[i + 1].x;\r\n  }\r\n  return {\r\n    ctrA: {\r\n      x: pAx,\r\n      y: pAy\r\n    },\r\n    ctrB: {\r\n      x: pBx,\r\n      y: pBy\r\n    }\r\n  };\r\n}\r\n\r\n\r\nfunction convertCoordinateOrigin(x, y, center) {\r\n  return {\r\n    x: center.x + x,\r\n    y: center.y - y\r\n  };\r\n}\r\n\r\nfunction avoidCollision(obj, target) {\r\n  if (target) {\r\n    // is collision test\r\n    while (util.isCollision(obj, target)) {\r\n      if (obj.start.x > 0) {\r\n        obj.start.y--;\r\n      } else if (obj.start.x < 0) {\r\n        obj.start.y++;\r\n      } else {\r\n        if (obj.start.y > 0) {\r\n          obj.start.y++;\r\n        } else {\r\n          obj.start.y--;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\nfunction fixPieSeries(series, opts, config){\r\n  let pieSeriesArr = [];\r\n  if(series.length>0 && series[0].data.constructor.toString().indexOf('Array') > -1){\r\n    opts._pieSeries_ = series;\r\n    let oldseries = series[0].data;\r\n    for (var i = 0; i < oldseries.length; i++) {\r\n      oldseries[i].formatter = series[0].formatter;\r\n      oldseries[i].data = oldseries[i].value;\r\n      pieSeriesArr.push(oldseries[i]);\r\n    }\r\n    opts.series = pieSeriesArr;\r\n  }else{\r\n    pieSeriesArr = series;\r\n  }\r\n  return pieSeriesArr;\r\n}\r\n\r\nfunction fillSeries(series, opts, config) {\r\n  var index = 0;\r\n  for (var i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    if (!item.color) {\r\n      item.color = config.color[index];\r\n      index = (index + 1) % config.color.length;\r\n    }\r\n    if (!item.linearIndex) {\r\n      item.linearIndex = i;\r\n    }\r\n    if (!item.index) {\r\n      item.index = 0;\r\n    }\r\n    if (!item.type) {\r\n      item.type = opts.type;\r\n    }\r\n    if (typeof item.show == \"undefined\") {\r\n      item.show = true;\r\n    }\r\n    if (!item.type) {\r\n      item.type = opts.type;\r\n    }\r\n    if (!item.pointShape) {\r\n      item.pointShape = \"circle\";\r\n    }\r\n    if (!item.legendShape) {\r\n      switch (item.type) {\r\n        case 'line':\r\n          item.legendShape = \"line\";\r\n          break;\r\n        case 'column':\r\n        case 'bar':\r\n          item.legendShape = \"rect\";\r\n          break;\r\n        case 'area':\r\n        case 'mount':\r\n          item.legendShape = \"triangle\";\r\n          break;\r\n        default:\r\n          item.legendShape = \"circle\";\r\n      }\r\n    }\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction fillCustomColor(linearType, customColor, series, config) {\r\n  var newcolor = customColor || [];\r\n  if (linearType == 'custom' && newcolor.length == 0 ) {\r\n    newcolor = config.linearColor;\r\n  }\r\n  if (linearType == 'custom' && newcolor.length < series.length) {\r\n    let chazhi = series.length - newcolor.length;\r\n    for (var i = 0; i < chazhi; i++) {\r\n      newcolor.push(config.linearColor[(i + 1) % config.linearColor.length]);\r\n    }\r\n  }\r\n  return newcolor;\r\n}\r\n\r\nfunction getDataRange(minData, maxData) {\r\n  var limit = 0;\r\n  var range = maxData - minData;\r\n  if (range >= 10000) {\r\n    limit = 1000;\r\n  } else if (range >= 1000) {\r\n    limit = 100;\r\n  } else if (range >= 100) {\r\n    limit = 10;\r\n  } else if (range >= 10) {\r\n    limit = 5;\r\n  } else if (range >= 1) {\r\n    limit = 1;\r\n  } else if (range >= 0.1) {\r\n    limit = 0.1;\r\n  } else if (range >= 0.01) {\r\n    limit = 0.01;\r\n  } else if (range >= 0.001) {\r\n    limit = 0.001;\r\n  } else if (range >= 0.0001) {\r\n    limit = 0.0001;\r\n  } else if (range >= 0.00001) {\r\n    limit = 0.00001;\r\n  } else {\r\n    limit = 0.000001;\r\n  }\r\n  return {\r\n    minRange: findRange(minData, 'lower', limit),\r\n    maxRange: findRange(maxData, 'upper', limit)\r\n  };\r\n}\r\n\r\nfunction measureText(text, fontSize, context) {\r\n  var width = 0;\r\n  text = String(text);\r\n  // #ifdef MP-ALIPAY || MP-BAIDU || APP-NVUE\r\n  context = false;\r\n  // #endif\r\n  if (context !== false && context !== undefined && context.setFontSize && context.measureText) {\r\n    context.setFontSize(fontSize);\r\n    return context.measureText(text).width;\r\n  } else {\r\n    var text = text.split('');\r\n    for (let i = 0; i < text.length; i++) {\r\n      let item = text[i];\r\n      if (/[a-zA-Z]/.test(item)) {\r\n        width += 7;\r\n      } else if (/[0-9]/.test(item)) {\r\n        width += 5.5;\r\n      } else if (/\\./.test(item)) {\r\n        width += 2.7;\r\n      } else if (/-/.test(item)) {\r\n        width += 3.25;\r\n      } else if (/:/.test(item)) {\r\n        width += 2.5;\r\n      } else if (/[\\u4e00-\\u9fa5]/.test(item)) {\r\n        width += 10;\r\n      } else if (/\\(|\\)/.test(item)) {\r\n        width += 3.73;\r\n      } else if (/\\s/.test(item)) {\r\n        width += 2.5;\r\n      } else if (/%/.test(item)) {\r\n        width += 8;\r\n      } else {\r\n        width += 10;\r\n      }\r\n    }\r\n    return width * fontSize / 10;\r\n  }\r\n}\r\n\r\nfunction dataCombine(series) {\r\n  return series.reduce(function(a, b) {\r\n    return (a.data ? a.data : a).concat(b.data);\r\n  }, []);\r\n}\r\n\r\nfunction dataCombineStack(series, len) {\r\n  var sum = new Array(len);\r\n  for (var j = 0; j < sum.length; j++) {\r\n    sum[j] = 0;\r\n  }\r\n  for (var i = 0; i < series.length; i++) {\r\n    for (var j = 0; j < sum.length; j++) {\r\n      sum[j] += series[i].data[j];\r\n    }\r\n  }\r\n  return series.reduce(function(a, b) {\r\n    return (a.data ? a.data : a).concat(b.data).concat(sum);\r\n  }, []);\r\n}\r\n\r\nfunction getTouches(touches, opts, e) {\r\n  let x, y;\r\n  if (touches.clientX) {\r\n    if (opts.rotate) {\r\n      y = opts.height - touches.clientX * opts.pix;\r\n      x = (touches.pageY - e.currentTarget.offsetTop - (opts.height / opts.pix / 2) * (opts.pix - 1)) * opts.pix;\r\n    } else {\r\n      x = touches.clientX * opts.pix;\r\n      y = (touches.pageY - e.currentTarget.offsetTop - (opts.height / opts.pix / 2) * (opts.pix - 1)) * opts.pix;\r\n    }\r\n  } else {\r\n    if (opts.rotate) {\r\n      y = opts.height - touches.x * opts.pix;\r\n      x = touches.y * opts.pix;\r\n    } else {\r\n      x = touches.x * opts.pix;\r\n      y = touches.y * opts.pix;\r\n    }\r\n  }\r\n  return {\r\n    x: x,\r\n    y: y\r\n  }\r\n}\r\n\r\nfunction getSeriesDataItem(series, index, group) {\r\n  var data = [];\r\n  var newSeries = [];\r\n  var indexIsArr = index.constructor.toString().indexOf('Array') > -1;\r\n  if(indexIsArr){\r\n    let tempSeries = filterSeries(series);\r\n    for (var i = 0; i < group.length; i++) {\r\n      newSeries.push(tempSeries[group[i]]);\r\n    }\r\n  }else{\r\n    newSeries = series;\r\n  };\r\n  for (let i = 0; i < newSeries.length; i++) {\r\n    let item = newSeries[i];\r\n    let tmpindex = -1;\r\n    if(indexIsArr){\r\n      tmpindex = index[i];\r\n    }else{\r\n      tmpindex = index;\r\n    }\r\n    if (item.data[tmpindex] !== null && typeof item.data[tmpindex] !== 'undefined' && item.show) {\r\n      let seriesItem = {};\r\n      seriesItem.color = item.color;\r\n      seriesItem.type = item.type;\r\n      seriesItem.style = item.style;\r\n      seriesItem.pointShape = item.pointShape;\r\n      seriesItem.disableLegend = item.disableLegend;\r\n      seriesItem.name = item.name;\r\n      seriesItem.show = item.show;\r\n      seriesItem.data = item.formatter ? item.formatter(item.data[tmpindex]) : item.data[tmpindex];\r\n      data.push(seriesItem);\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getMaxTextListLength(list, fontSize, context) {\r\n  var lengthList = list.map(function(item) {\r\n    return measureText(item, fontSize, context);\r\n  });\r\n  return Math.max.apply(null, lengthList);\r\n}\r\n\r\nfunction getRadarCoordinateSeries(length) {\r\n  var eachAngle = 2 * Math.PI / length;\r\n  var CoordinateSeries = [];\r\n  for (var i = 0; i < length; i++) {\r\n    CoordinateSeries.push(eachAngle * i);\r\n  }\r\n  return CoordinateSeries.map(function(item) {\r\n    return -1 * item + Math.PI / 2;\r\n  });\r\n}\r\n\r\nfunction getToolTipData(seriesData, opts, index, group, categories) {\r\n  var option = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\r\n  var calPoints = opts.chartData.calPoints?opts.chartData.calPoints:[];\r\n  let points = {};\r\n  if(group.length > 0){\r\n    let filterPoints = [];\r\n    for (let i = 0; i < group.length; i++) {\r\n      filterPoints.push(calPoints[group[i]])\r\n    }\r\n    points = filterPoints[0][index[0]];\r\n  }else{\r\n    for (let i = 0; i < calPoints.length; i++) {\r\n      if(calPoints[i][index]){\r\n        points = calPoints[i][index];\r\n        break;\r\n      }\r\n    }\r\n  };\r\n  var textList = seriesData.map(function(item) {\r\n    let titleText = null;\r\n    if (opts.categories && opts.categories.length>0) {\r\n      titleText = categories[index];\r\n    };\r\n    return {\r\n      text: option.formatter ? option.formatter(item, titleText, index, opts) : item.name + ': ' + item.data,\r\n      color: item.color\r\n    };\r\n  });\r\n  var offset = {\r\n    x: Math.round(points.x),\r\n    y: Math.round(points.y)\r\n  };\r\n  return {\r\n    textList: textList,\r\n    offset: offset\r\n  };\r\n}\r\n\r\nfunction getMixToolTipData(seriesData, opts, index, categories) {\r\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\r\n  var points = opts.chartData.xAxisPoints[index] + opts.chartData.eachSpacing / 2;\r\n  var textList = seriesData.map(function(item) {\r\n    return {\r\n      text: option.formatter ? option.formatter(item, categories[index], index, opts) : item.name + ': ' + item.data,\r\n      color: item.color,\r\n      disableLegend: item.disableLegend ? true : false\r\n    };\r\n  });\r\n  textList = textList.filter(function(item) {\r\n    if (item.disableLegend !== true) {\r\n      return item;\r\n    }\r\n  });\r\n  var offset = {\r\n    x: Math.round(points),\r\n    y: 0\r\n  };\r\n  return {\r\n    textList: textList,\r\n    offset: offset\r\n  };\r\n}\r\n\r\nfunction getCandleToolTipData(series, seriesData, opts, index, categories, extra) {\r\n  var option = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\r\n  var calPoints = opts.chartData.calPoints;\r\n  let upColor = extra.color.upFill;\r\n  let downColor = extra.color.downFill;\r\n  //颜色顺序为开盘，收盘，最低，最高\r\n  let color = [upColor, upColor, downColor, upColor];\r\n  var textList = [];\r\n  seriesData.map(function(item) {\r\n    if (index == 0) {\r\n      if (item.data[1] - item.data[0] < 0) {\r\n        color[1] = downColor;\r\n      } else {\r\n        color[1] = upColor;\r\n      }\r\n    } else {\r\n      if (item.data[0] < series[index - 1][1]) {\r\n        color[0] = downColor;\r\n      }\r\n      if (item.data[1] < item.data[0]) {\r\n        color[1] = downColor;\r\n      }\r\n      if (item.data[2] > series[index - 1][1]) {\r\n        color[2] = upColor;\r\n      }\r\n      if (item.data[3] < series[index - 1][1]) {\r\n        color[3] = downColor;\r\n      }\r\n    }\r\n    let text1 = {\r\n      text: '开盘：' + item.data[0],\r\n      color: color[0]\r\n    };\r\n    let text2 = {\r\n      text: '收盘：' + item.data[1],\r\n      color: color[1]\r\n    };\r\n    let text3 = {\r\n      text: '最低：' + item.data[2],\r\n      color: color[2]\r\n    };\r\n    let text4 = {\r\n      text: '最高：' + item.data[3],\r\n      color: color[3]\r\n    };\r\n    textList.push(text1, text2, text3, text4);\r\n  });\r\n  var validCalPoints = [];\r\n  var offset = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  for (let i = 0; i < calPoints.length; i++) {\r\n    let points = calPoints[i];\r\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\r\n      validCalPoints.push(points[index]);\r\n    }\r\n  }\r\n  offset.x = Math.round(validCalPoints[0][0].x);\r\n  return {\r\n    textList: textList,\r\n    offset: offset\r\n  };\r\n}\r\n\r\nfunction filterSeries(series) {\r\n  let tempSeries = [];\r\n  for (let i = 0; i < series.length; i++) {\r\n    if (series[i].show == true) {\r\n      tempSeries.push(series[i])\r\n    }\r\n  }\r\n  return tempSeries;\r\n}\r\n\r\nfunction findCurrentIndex(currentPoints, calPoints, opts, config) {\r\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\r\n  var current={ index:-1, group:[] };\r\n  var spacing = opts.chartData.eachSpacing / 2;\r\n  let xAxisPoints = [];\r\n  if (calPoints && calPoints.length > 0) {\r\n    if (!opts.categories) {\r\n      spacing = 0;\r\n    }else{\r\n      for (let i = 1; i < opts.chartData.xAxisPoints.length; i++) {\r\n        xAxisPoints.push(opts.chartData.xAxisPoints[i] - spacing);\r\n      }\r\n      if ((opts.type == 'line' || opts.type == 'area') && opts.xAxis.boundaryGap == 'justify') {\r\n        xAxisPoints = opts.chartData.xAxisPoints;\r\n      }\r\n    }\r\n    if (isInExactChartArea(currentPoints, opts, config)) {\r\n      if (!opts.categories) {\r\n        let timePoints = Array(calPoints.length);\r\n        for (let i = 0; i < calPoints.length; i++) {\r\n          timePoints[i] = Array(calPoints[i].length)\r\n          for (let j = 0; j < calPoints[i].length; j++) {\r\n            timePoints[i][j] = (Math.abs(calPoints[i][j].x - currentPoints.x));\r\n          }\r\n        };\r\n        let pointValue =  Array(timePoints.length);\r\n        let pointIndex =  Array(timePoints.length);\r\n        for (let i = 0; i < timePoints.length; i++) {\r\n          pointValue[i] = Math.min.apply(null, timePoints[i]);\r\n          pointIndex[i] = timePoints[i].indexOf(pointValue[i]);\r\n        }\r\n        let minValue = Math.min.apply(null, pointValue);\r\n        current.index = [];\r\n        for (let i = 0; i < pointValue.length; i++) {\r\n          if(pointValue[i] == minValue){\r\n            current.group.push(i);\r\n            current.index.push(pointIndex[i]);\r\n          }\r\n        };\r\n      }else{\r\n        xAxisPoints.forEach(function(item, index) {\r\n          if (currentPoints.x + offset + spacing > item) {\r\n            current.index = index;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return current;\r\n}\r\n\r\nfunction findBarChartCurrentIndex(currentPoints, calPoints, opts, config) {\r\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\r\n  var current={ index:-1, group:[] };\r\n  var spacing = opts.chartData.eachSpacing / 2;\r\n  let yAxisPoints = opts.chartData.yAxisPoints;\r\n  if (calPoints && calPoints.length > 0) {\r\n    if (isInExactChartArea(currentPoints, opts, config)) {\r\n      yAxisPoints.forEach(function(item, index) {\r\n        if (currentPoints.y + offset + spacing > item) {\r\n          current.index = index;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  return current;\r\n}\r\n\r\nfunction findLegendIndex(currentPoints, legendData, opts) {\r\n  let currentIndex = -1;\r\n  let gap = 0;\r\n  if (isInExactLegendArea(currentPoints, legendData.area)) {\r\n    let points = legendData.points;\r\n    let index = -1;\r\n    for (let i = 0, len = points.length; i < len; i++) {\r\n      let item = points[i];\r\n      for (let j = 0; j < item.length; j++) {\r\n        index += 1;\r\n        let area = item[j]['area'];\r\n        if (area && currentPoints.x > area[0] - gap && currentPoints.x < area[2] + gap && currentPoints.y > area[1] - gap && currentPoints.y < area[3] + gap) {\r\n          currentIndex = index;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return currentIndex;\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction isInExactLegendArea(currentPoints, area) {\r\n  return currentPoints.x > area.start.x && currentPoints.x < area.end.x && currentPoints.y > area.start.y && currentPoints.y < area.end.y;\r\n}\r\n\r\nfunction isInExactChartArea(currentPoints, opts, config) {\r\n  return currentPoints.x <= opts.width - opts.area[1] + 10 && currentPoints.x >= opts.area[3] - 10 && currentPoints.y >= opts.area[0] && currentPoints.y <= opts.height - opts.area[2];\r\n}\r\n\r\nfunction findRadarChartCurrentIndex(currentPoints, radarData, count) {\r\n  var eachAngleArea = 2 * Math.PI / count;\r\n  var currentIndex = -1;\r\n  if (isInExactPieChartArea(currentPoints, radarData.center, radarData.radius)) {\r\n    var fixAngle = function fixAngle(angle) {\r\n      if (angle < 0) {\r\n        angle += 2 * Math.PI;\r\n      }\r\n      if (angle > 2 * Math.PI) {\r\n        angle -= 2 * Math.PI;\r\n      }\r\n      return angle;\r\n    };\r\n    var angle = Math.atan2(radarData.center.y - currentPoints.y, currentPoints.x - radarData.center.x);\r\n    angle = -1 * angle;\r\n    if (angle < 0) {\r\n      angle += 2 * Math.PI;\r\n    }\r\n    var angleList = radarData.angleList.map(function(item) {\r\n      item = fixAngle(-1 * item);\r\n      return item;\r\n    });\r\n    angleList.forEach(function(item, index) {\r\n      var rangeStart = fixAngle(item - eachAngleArea / 2);\r\n      var rangeEnd = fixAngle(item + eachAngleArea / 2);\r\n      if (rangeEnd < rangeStart) {\r\n        rangeEnd += 2 * Math.PI;\r\n      }\r\n      if (angle >= rangeStart && angle <= rangeEnd || angle + 2 * Math.PI >= rangeStart && angle + 2 * Math.PI <= rangeEnd) {\r\n        currentIndex = index;\r\n      }\r\n    });\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findFunnelChartCurrentIndex(currentPoints, funnelData) {\r\n  var currentIndex = -1;\r\n  for (var i = 0, len = funnelData.series.length; i < len; i++) {\r\n    var item = funnelData.series[i];\r\n    if (currentPoints.x > item.funnelArea[0] && currentPoints.x < item.funnelArea[2] && currentPoints.y > item.funnelArea[1] && currentPoints.y < item.funnelArea[3]) {\r\n      currentIndex = i;\r\n      break;\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findWordChartCurrentIndex(currentPoints, wordData) {\r\n  var currentIndex = -1;\r\n  for (var i = 0, len = wordData.length; i < len; i++) {\r\n    var item = wordData[i];\r\n    if (currentPoints.x > item.area[0] && currentPoints.x < item.area[2] && currentPoints.y > item.area[1] && currentPoints.y < item.area[3]) {\r\n      currentIndex = i;\r\n      break;\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findMapChartCurrentIndex(currentPoints, opts) {\r\n  var currentIndex = -1;\r\n  var cData = opts.chartData.mapData;\r\n  var data = opts.series;\r\n  var tmp = pointToCoordinate(currentPoints.y, currentPoints.x, cData.bounds, cData.scale, cData.xoffset, cData.yoffset);\r\n  var poi = [tmp.x, tmp.y];\r\n  for (var i = 0, len = data.length; i < len; i++) {\r\n    var item = data[i].geometry.coordinates;\r\n    if (isPoiWithinPoly(poi, item, opts.chartData.mapData.mercator)) {\r\n      currentIndex = i;\r\n      break;\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findRoseChartCurrentIndex(currentPoints, pieData, opts) {\r\n  var currentIndex = -1;\r\n  var series = getRoseDataPoints(opts._series_, opts.extra.rose.type, pieData.radius, pieData.radius);\r\n  if (pieData && pieData.center && isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\r\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\r\n    angle = -angle;\r\n    if(opts.extra.rose && opts.extra.rose.offsetAngle){\r\n      angle = angle - opts.extra.rose.offsetAngle * Math.PI / 180;\r\n    }\r\n    for (var i = 0, len = series.length; i < len; i++) {\r\n      if (isInAngleRange(angle, series[i]._start_, series[i]._start_ + series[i]._rose_proportion_ * 2 * Math.PI)) {\r\n        currentIndex = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction findPieChartCurrentIndex(currentPoints, pieData, opts) {\r\n  var currentIndex = -1;\r\n  var series = getPieDataPoints(pieData.series);\r\n  if (pieData && pieData.center && isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\r\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\r\n    angle = -angle;\r\n    if(opts.extra.pie && opts.extra.pie.offsetAngle){\r\n      angle = angle - opts.extra.pie.offsetAngle * Math.PI / 180;\r\n    }\r\n    if(opts.extra.ring && opts.extra.ring.offsetAngle){\r\n      angle = angle - opts.extra.ring.offsetAngle * Math.PI / 180;\r\n    }\r\n    for (var i = 0, len = series.length; i < len; i++) {\r\n      if (isInAngleRange(angle, series[i]._start_, series[i]._start_ + series[i]._proportion_ * 2 * Math.PI)) {\r\n        currentIndex = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return currentIndex;\r\n}\r\n\r\nfunction isInExactPieChartArea(currentPoints, center, radius) {\r\n  return Math.pow(currentPoints.x - center.x, 2) + Math.pow(currentPoints.y - center.y, 2) <= Math.pow(radius, 2);\r\n}\r\n\r\n\r\nfunction splitPoints(points,eachSeries) {\r\n  var newPoints = [];\r\n  var items = [];\r\n  points.forEach(function(item, index) {\r\n    if(eachSeries.connectNulls){\r\n      if (item !== null) {\r\n        items.push(item);\r\n      }\r\n    }else{\r\n      if (item !== null) {\r\n        items.push(item);\r\n      } else {\r\n        if (items.length) {\r\n          newPoints.push(items);\r\n        }\r\n        items = [];\r\n      }\r\n    }\r\n    \r\n  });\r\n  if (items.length) {\r\n    newPoints.push(items);\r\n  }\r\n  return newPoints;\r\n}\r\n\r\n\r\nfunction calLegendData(series, opts, config, chartData, context) {\r\n  let legendData = {\r\n    area: {\r\n      start: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      end: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      width: 0,\r\n      height: 0,\r\n      wholeWidth: 0,\r\n      wholeHeight: 0\r\n    },\r\n    points: [],\r\n    widthArr: [],\r\n    heightArr: []\r\n  };\r\n  if (opts.legend.show === false) {\r\n    chartData.legendData = legendData;\r\n    return legendData;\r\n  }\r\n  let padding = opts.legend.padding * opts.pix;\r\n  let margin = opts.legend.margin * opts.pix;\r\n  let fontSize = opts.legend.fontSize ? opts.legend.fontSize * opts.pix : config.fontSize;\r\n  let shapeWidth = 15 * opts.pix;\r\n  let shapeRight = 5 * opts.pix;\r\n  let lineHeight = Math.max(opts.legend.lineHeight * opts.pix, fontSize);\r\n  if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\r\n    let legendList = [];\r\n    let widthCount = 0;\r\n    let widthCountArr = [];\r\n    let currentRow = [];\r\n    for (let i = 0; i < series.length; i++) {\r\n      let item = series[i];\r\n      const legendText = item.legendText ? item.legendText : item.name;\r\n      let itemWidth = shapeWidth + shapeRight + measureText(legendText || 'undefined', fontSize, context) + opts.legend.itemGap * opts.pix;\r\n      if (widthCount + itemWidth > opts.width - opts.area[1] - opts.area[3]) {\r\n        legendList.push(currentRow);\r\n        widthCountArr.push(widthCount - opts.legend.itemGap * opts.pix);\r\n        widthCount = itemWidth;\r\n        currentRow = [item];\r\n      } else {\r\n        widthCount += itemWidth;\r\n        currentRow.push(item);\r\n      }\r\n    }\r\n    if (currentRow.length) {\r\n      legendList.push(currentRow);\r\n      widthCountArr.push(widthCount - opts.legend.itemGap * opts.pix);\r\n      legendData.widthArr = widthCountArr;\r\n      let legendWidth = Math.max.apply(null, widthCountArr);\r\n      switch (opts.legend.float) {\r\n        case 'left':\r\n          legendData.area.start.x = opts.area[3];\r\n          legendData.area.end.x = opts.area[3] + legendWidth + 2 * padding;\r\n          break;\r\n        case 'right':\r\n          legendData.area.start.x = opts.width - opts.area[1] - legendWidth - 2 * padding;\r\n          legendData.area.end.x = opts.width - opts.area[1];\r\n          break;\r\n        default:\r\n          legendData.area.start.x = (opts.width - legendWidth) / 2 - padding;\r\n          legendData.area.end.x = (opts.width + legendWidth) / 2 + padding;\r\n      }\r\n      legendData.area.width = legendWidth + 2 * padding;\r\n      legendData.area.wholeWidth = legendWidth + 2 * padding;\r\n      legendData.area.height = legendList.length * lineHeight + 2 * padding;\r\n      legendData.area.wholeHeight = legendList.length * lineHeight + 2 * padding + 2 * margin;\r\n      legendData.points = legendList;\r\n    }\r\n  } else {\r\n    let len = series.length;\r\n    let maxHeight = opts.height - opts.area[0] - opts.area[2] - 2 * margin - 2 * padding;\r\n    let maxLength = Math.min(Math.floor(maxHeight / lineHeight), len);\r\n    legendData.area.height = maxLength * lineHeight + padding * 2;\r\n    legendData.area.wholeHeight = maxLength * lineHeight + padding * 2;\r\n    switch (opts.legend.float) {\r\n      case 'top':\r\n        legendData.area.start.y = opts.area[0] + margin;\r\n        legendData.area.end.y = opts.area[0] + margin + legendData.area.height;\r\n        break;\r\n      case 'bottom':\r\n        legendData.area.start.y = opts.height - opts.area[2] - margin - legendData.area.height;\r\n        legendData.area.end.y = opts.height - opts.area[2] - margin;\r\n        break;\r\n      default:\r\n        legendData.area.start.y = (opts.height - legendData.area.height) / 2;\r\n        legendData.area.end.y = (opts.height + legendData.area.height) / 2;\r\n    }\r\n    let lineNum = len % maxLength === 0 ? len / maxLength : Math.floor((len / maxLength) + 1);\r\n    let currentRow = [];\r\n    for (let i = 0; i < lineNum; i++) {\r\n      let temp = series.slice(i * maxLength, i * maxLength + maxLength);\r\n      currentRow.push(temp);\r\n    }\r\n    legendData.points = currentRow;\r\n    if (currentRow.length) {\r\n      for (let i = 0; i < currentRow.length; i++) {\r\n        let item = currentRow[i];\r\n        let maxWidth = 0;\r\n        for (let j = 0; j < item.length; j++) {\r\n          let itemWidth = shapeWidth + shapeRight + measureText(item[j].name || 'undefined', fontSize, context) + opts.legend.itemGap * opts.pix;\r\n          if (itemWidth > maxWidth) {\r\n            maxWidth = itemWidth;\r\n          }\r\n        }\r\n        legendData.widthArr.push(maxWidth);\r\n        legendData.heightArr.push(item.length * lineHeight + padding * 2);\r\n      }\r\n      let legendWidth = 0\r\n      for (let i = 0; i < legendData.widthArr.length; i++) {\r\n        legendWidth += legendData.widthArr[i];\r\n      }\r\n      legendData.area.width = legendWidth - opts.legend.itemGap * opts.pix + 2 * padding;\r\n      legendData.area.wholeWidth = legendData.area.width + padding;\r\n    }\r\n  }\r\n  switch (opts.legend.position) {\r\n    case 'top':\r\n      legendData.area.start.y = opts.area[0] + margin;\r\n      legendData.area.end.y = opts.area[0] + margin + legendData.area.height;\r\n      break;\r\n    case 'bottom':\r\n      legendData.area.start.y = opts.height - opts.area[2] - legendData.area.height - margin;\r\n      legendData.area.end.y = opts.height - opts.area[2] - margin;\r\n      break;\r\n    case 'left':\r\n      legendData.area.start.x = opts.area[3];\r\n      legendData.area.end.x = opts.area[3] + legendData.area.width;\r\n      break;\r\n    case 'right':\r\n      legendData.area.start.x = opts.width - opts.area[1] - legendData.area.width;\r\n      legendData.area.end.x = opts.width - opts.area[1];\r\n      break;\r\n  }\r\n  chartData.legendData = legendData;\r\n  return legendData;\r\n}\r\n\r\nfunction calCategoriesData(categories, opts, config, eachSpacing, context) {\r\n  var result = {\r\n    angle: 0,\r\n    xAxisHeight: config.xAxisHeight\r\n  };\r\n  var fontSize = opts.xAxis.fontSize * opts.pix || config.fontSize;\r\n  var categoriesTextLenth = categories.map(function(item,index) {\r\n    var xitem = opts.xAxis.formatter ? opts.xAxis.formatter(item,index,opts) : item;\r\n    return measureText(String(xitem), fontSize, context);\r\n  });\r\n  \r\n  var maxTextLength = Math.max.apply(this, categoriesTextLenth);\r\n  if (opts.xAxis.rotateLabel == true) {\r\n    result.angle = opts.xAxis.rotateAngle * Math.PI / 180;\r\n    let tempHeight = 2 * config.xAxisTextPadding +  Math.abs(maxTextLength * Math.sin(result.angle))\r\n    tempHeight = tempHeight < fontSize + 2 * config.xAxisTextPadding ? tempHeight + 2 * config.xAxisTextPadding : tempHeight;\r\n    if(opts.enableScroll == true && opts.xAxis.scrollShow == true){\r\n      tempHeight += 12 * opts.pix;\r\n    }\r\n    result.xAxisHeight = tempHeight;\r\n  }\r\n  if (opts.xAxis.disabled){\r\n    result.xAxisHeight = 0;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getXAxisTextList(series, opts, config, stack) {\r\n  var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\r\n  var data;\r\n  if (stack == 'stack') {\r\n    data = dataCombineStack(series, opts.categories.length);\r\n  } else {\r\n    data = dataCombine(series);\r\n  }\r\n  var sorted = [];\r\n  // remove null from data\r\n  data = data.filter(function(item) {\r\n    //return item !== null;\r\n    if (typeof item === 'object' && item !== null) {\r\n      if (item.constructor.toString().indexOf('Array') > -1) {\r\n        return item !== null;\r\n      } else {\r\n        return item.value !== null;\r\n      }\r\n    } else {\r\n      return item !== null;\r\n    }\r\n  });\r\n  data.map(function(item) {\r\n    if (typeof item === 'object') {\r\n      if (item.constructor.toString().indexOf('Array') > -1) {\r\n        if (opts.type == 'candle') {\r\n          item.map(function(subitem) {\r\n            sorted.push(subitem);\r\n          })\r\n        } else {\r\n          sorted.push(item[0]);\r\n        }\r\n      } else {\r\n        sorted.push(item.value);\r\n      }\r\n    } else {\r\n      sorted.push(item);\r\n    }\r\n  })\r\n\r\n  var minData = 0;\r\n  var maxData = 0;\r\n  if (sorted.length > 0) {\r\n    minData = Math.min.apply(this, sorted);\r\n    maxData = Math.max.apply(this, sorted);\r\n  }\r\n  //为了兼容v1.9.0之前的项目\r\n  if (index > -1) {\r\n    if (typeof opts.xAxis.data[index].min === 'number') {\r\n      minData = Math.min(opts.xAxis.data[index].min, minData);\r\n    }\r\n    if (typeof opts.xAxis.data[index].max === 'number') {\r\n      maxData = Math.max(opts.xAxis.data[index].max, maxData);\r\n    }\r\n  } else {\r\n    if (typeof opts.xAxis.min === 'number') {\r\n      minData = Math.min(opts.xAxis.min, minData);\r\n    }\r\n    if (typeof opts.xAxis.max === 'number') {\r\n      maxData = Math.max(opts.xAxis.max, maxData);\r\n    }\r\n  }\r\n  if (minData === maxData) {\r\n    var rangeSpan = maxData || 10;\r\n    maxData += rangeSpan;\r\n  }\r\n  //var dataRange = getDataRange(minData, maxData);\r\n  var minRange = minData;\r\n  var maxRange = maxData;\r\n  var range = [];\r\n  var eachRange = (maxRange - minRange) / opts.xAxis.splitNumber;\r\n  for (var i = 0; i <= opts.xAxis.splitNumber; i++) {\r\n    range.push(minRange + eachRange * i);\r\n  }\r\n  return range;\r\n}\r\n\r\nfunction calXAxisData(series, opts, config, context) {\r\n  //堆叠图重算Y轴\r\n  var columnstyle = assign({}, {\r\n    type: \"\"\r\n  }, opts.extra.bar);\r\n  var result = {\r\n    angle: 0,\r\n    xAxisHeight: config.xAxisHeight\r\n  };\r\n  result.ranges = getXAxisTextList(series, opts, config, columnstyle.type);\r\n  result.rangesFormat = result.ranges.map(function(item) {\r\n    //item = opts.xAxis.formatter ? opts.xAxis.formatter(item) : util.toFixed(item, 2);\r\n    item = util.toFixed(item, 2);\r\n    return item;\r\n  });\r\n  var xAxisScaleValues = result.ranges.map(function(item) {\r\n    // 如果刻度值是浮点数,则保留两位小数\r\n    item = util.toFixed(item, 2);\r\n    // 若有自定义格式则调用自定义的格式化函数\r\n    //item = opts.xAxis.formatter ? opts.xAxis.formatter(Number(item)) : item;\r\n    return item;\r\n  });\r\n  result = Object.assign(result, getXAxisPoints(xAxisScaleValues, opts, config));\r\n  // 计算X轴刻度的属性譬如每个刻度的间隔,刻度的起始点\\结束点以及总长\r\n  var eachSpacing = result.eachSpacing;\r\n  var textLength = xAxisScaleValues.map(function(item) {\r\n    return measureText(item, opts.xAxis.fontSize * opts.pix || config.fontSize, context);\r\n  });\r\n  // get max length of categories text\r\n  var maxTextLength = Math.max.apply(this, textLength);\r\n  // 如果刻度值文本内容过长,则将其逆时针旋转45°\r\n  if (maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\r\n    result.angle = 45 * Math.PI / 180;\r\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\r\n  }\r\n  if (opts.xAxis.disabled === true) {\r\n    result.xAxisHeight = 0;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getRadarDataPoints(angleList, center, radius, series, opts) {\r\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\r\n  var radarOption = opts.extra.radar || {};\r\n  radarOption.max = radarOption.max || 0;\r\n  var maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\r\n  var data = [];\r\n  for (let i = 0; i < series.length; i++) {\r\n    let each = series[i];\r\n    let listItem = {};\r\n    listItem.color = each.color;\r\n    listItem.legendShape = each.legendShape;\r\n    listItem.pointShape = each.pointShape;\r\n    listItem.data = [];\r\n    each.data.forEach(function(item, index) {\r\n      let tmp = {};\r\n      tmp.angle = angleList[index];\r\n      tmp.proportion = item / maxData;\r\n      tmp.value = item;\r\n      tmp.position = convertCoordinateOrigin(radius * tmp.proportion * process * Math.cos(tmp.angle), radius * tmp.proportion * process * Math.sin(tmp.angle), center);\r\n      listItem.data.push(tmp);\r\n    });\r\n    data.push(listItem);\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction getPieDataPoints(series, radius) {\r\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n  var count = 0;\r\n  var _start_ = 0;\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    count += item.data;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    if (count === 0) {\r\n      item._proportion_ = 1 / series.length * process;\r\n    } else {\r\n      item._proportion_ = item.data / count * process;\r\n    }\r\n    item._radius_ = radius;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item._start_ = _start_;\r\n    _start_ += 2 * item._proportion_ * Math.PI;\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getFunnelDataPoints(series, radius, type, eachSpacing) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  series = series.sort(function(a, b) {\r\n    return parseInt(b.data) - parseInt(a.data);\r\n  });\r\n  for (let i = 0; i < series.length; i++) {\r\n    if(type == 'funnel'){\r\n      series[i].radius = series[i].data / series[0].data * radius * process;\r\n    }else{\r\n      series[i].radius =  (eachSpacing * (series.length - i)) / (eachSpacing * series.length) * radius * process;\r\n    }\r\n    series[i]._proportion_ = series[i].data / series[0].data;\r\n  }\r\n  if(type !== 'pyramid'){\r\n    series.reverse();\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getRoseDataPoints(series, type, minRadius, radius) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var count = 0;\r\n  var _start_ = 0;\r\n  var dataArr = [];\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    count += item.data;\r\n    dataArr.push(item.data);\r\n  }\r\n  var minData = Math.min.apply(null, dataArr);\r\n  var maxData = Math.max.apply(null, dataArr);\r\n  var radiusLength = radius - minRadius;\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    if (count === 0) {\r\n      item._proportion_ = 1 / series.length * process;\r\n      item._rose_proportion_ = 1 / series.length * process;\r\n    } else {\r\n      item._proportion_ = item.data / count * process;\r\n      if(type == 'area'){\r\n        item._rose_proportion_ = 1 / series.length * process;\r\n      }else{\r\n        item._rose_proportion_ = item.data / count * process;\r\n      }\r\n    }\r\n    item._radius_ = minRadius + radiusLength * ((item.data - minData) / (maxData - minData)) || radius;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item._start_ = _start_;\r\n    _start_ += 2 * item._rose_proportion_ * Math.PI;\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getArcbarDataPoints(series, arcbarOption) {\r\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n  if (process == 1) {\r\n    process = 0.999999;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    let totalAngle;\r\n    if (arcbarOption.type == 'circle') {\r\n      totalAngle = 2;\r\n    } else {\r\n      if (arcbarOption.endAngle < arcbarOption.startAngle) {\r\n        totalAngle = 2 + arcbarOption.endAngle - arcbarOption.startAngle;\r\n      } else {\r\n        totalAngle = arcbarOption.startAngle - arcbarOption.endAngle;\r\n      }\r\n    }\r\n    item._proportion_ = totalAngle * item.data * process + arcbarOption.startAngle;\r\n    if (item._proportion_ >= 2) {\r\n      item._proportion_ = item._proportion_ % 2;\r\n    }\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getGaugeArcbarDataPoints(series, arcbarOption) {\r\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n  if (process == 1) {\r\n    process = 0.999999;\r\n  }\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    let totalAngle;\r\n    if (arcbarOption.type == 'circle') {\r\n      totalAngle = 2;\r\n    } else {\r\n      if (arcbarOption.endAngle < arcbarOption.startAngle) {\r\n        totalAngle = 2 + arcbarOption.endAngle - arcbarOption.startAngle;\r\n      } else {\r\n        totalAngle = arcbarOption.startAngle - arcbarOption.endAngle;\r\n      }\r\n    }\r\n    item._proportion_ = totalAngle * item.data * process + arcbarOption.startAngle;\r\n    if (item._proportion_ >= 2) {\r\n      item._proportion_ = item._proportion_ % 2;\r\n    }\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getGaugeAxisPoints(categories, startAngle, endAngle) {\r\n  let totalAngle = startAngle - endAngle + 1;\r\n  let tempStartAngle = startAngle;\r\n  for (let i = 0; i < categories.length; i++) {\r\n    categories[i].value = categories[i].value === null ? 0 : categories[i].value;\r\n    categories[i]._startAngle_ = tempStartAngle;\r\n    categories[i]._endAngle_ = totalAngle * categories[i].value + startAngle;\r\n    if (categories[i]._endAngle_ >= 2) {\r\n      categories[i]._endAngle_ = categories[i]._endAngle_ % 2;\r\n    }\r\n    tempStartAngle = categories[i]._endAngle_;\r\n  }\r\n  return categories;\r\n}\r\n\r\nfunction getGaugeDataPoints(series, categories, gaugeOption) {\r\n  let process = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    item.data = item.data === null ? 0 : item.data;\r\n    if (gaugeOption.pointer.color == 'auto') {\r\n      for (let i = 0; i < categories.length; i++) {\r\n        if (item.data <= categories[i].value) {\r\n          item.color = categories[i].color;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      item.color = gaugeOption.pointer.color;\r\n    }\r\n    let totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\r\n    item._endAngle_ = totalAngle * item.data + gaugeOption.startAngle;\r\n    item._oldAngle_ = gaugeOption.oldAngle;\r\n    if (gaugeOption.oldAngle < gaugeOption.endAngle) {\r\n      item._oldAngle_ += 2;\r\n    }\r\n    if (item.data >= gaugeOption.oldData) {\r\n      item._proportion_ = (item._endAngle_ - item._oldAngle_) * process + gaugeOption.oldAngle;\r\n    } else {\r\n      item._proportion_ = item._oldAngle_ - (item._oldAngle_ - item._endAngle_) * process;\r\n    }\r\n    if (item._proportion_ >= 2) {\r\n      item._proportion_ = item._proportion_ % 2;\r\n    }\r\n  }\r\n  return series;\r\n}\r\n\r\nfunction getPieTextMaxLength(series, config, context, opts) {\r\n  series = getPieDataPoints(series);\r\n  let maxLength = 0;\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    let text = item.formatter ? item.formatter(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\r\n    maxLength = Math.max(maxLength, measureText(text, item.textSize * opts.pix || config.fontSize, context));\r\n  }\r\n  return maxLength;\r\n}\r\n\r\nfunction fixColumeData(points, eachSpacing, columnLen, index, config, opts) {\r\n  return points.map(function(item) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    var seriesGap = 0;\r\n    var categoryGap = 0;\r\n    if (opts.type == 'mix') {\r\n      seriesGap = opts.extra.mix.column.seriesGap * opts.pix || 0;\r\n      categoryGap = opts.extra.mix.column.categoryGap * opts.pix || 0;\r\n    } else {\r\n      seriesGap = opts.extra.column.seriesGap * opts.pix || 0;\r\n      categoryGap = opts.extra.column.categoryGap * opts.pix || 0;\r\n    }\r\n    seriesGap =  Math.min(seriesGap, eachSpacing / columnLen)\r\n    categoryGap =  Math.min(categoryGap, eachSpacing / columnLen)\r\n    item.width = Math.ceil((eachSpacing - 2 * categoryGap - seriesGap * (columnLen - 1)) / columnLen);\r\n    if (opts.extra.mix && opts.extra.mix.column.width && +opts.extra.mix.column.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.mix.column.width * opts.pix);\r\n    }\r\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.column.width * opts.pix);\r\n    }\r\n    if (item.width <= 0) {\r\n      item.width = 1;\r\n    }\r\n    item.x += (index + 0.5 - columnLen / 2) * (item.width + seriesGap);\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction fixBarData(points, eachSpacing, columnLen, index, config, opts) {\r\n  return points.map(function(item) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    var seriesGap = 0;\r\n    var categoryGap = 0;\r\n    seriesGap = opts.extra.bar.seriesGap * opts.pix || 0;\r\n    categoryGap = opts.extra.bar.categoryGap * opts.pix || 0;\r\n    seriesGap =  Math.min(seriesGap, eachSpacing / columnLen)\r\n    categoryGap =  Math.min(categoryGap, eachSpacing / columnLen)\r\n    item.width = Math.ceil((eachSpacing - 2 * categoryGap - seriesGap * (columnLen - 1)) / columnLen);\r\n    if (opts.extra.bar && opts.extra.bar.width && +opts.extra.bar.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.bar.width * opts.pix);\r\n    }\r\n    if (item.width <= 0) {\r\n      item.width = 1;\r\n    }\r\n    item.y += (index + 0.5 - columnLen / 2) * (item.width + seriesGap);\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction fixColumeMeterData(points, eachSpacing, columnLen, index, config, opts, border) {\r\n  var categoryGap = opts.extra.column.categoryGap * opts.pix || 0;\r\n  return points.map(function(item) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    item.width = eachSpacing - 2 * categoryGap;\r\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.column.width * opts.pix);\r\n    }\r\n    if (index > 0) {\r\n      item.width -= border;\r\n    }\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction fixColumeStackData(points, eachSpacing, columnLen, index, config, opts, series) {\r\n  var categoryGap = opts.extra.column.categoryGap * opts.pix || 0;\r\n  return points.map(function(item, indexn) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    item.width = Math.ceil(eachSpacing - 2 * categoryGap);\r\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.column.width * opts.pix);\r\n    }\r\n    if (item.width <= 0) {\r\n      item.width = 1;\r\n    }\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction fixBarStackData(points, eachSpacing, columnLen, index, config, opts, series) {\r\n  var categoryGap = opts.extra.bar.categoryGap * opts.pix || 0;\r\n  return points.map(function(item, indexn) {\r\n    if (item === null) {\r\n      return null;\r\n    }\r\n    item.width = Math.ceil(eachSpacing - 2 * categoryGap);\r\n    if (opts.extra.bar && opts.extra.bar.width && +opts.extra.bar.width > 0) {\r\n      item.width = Math.min(item.width, +opts.extra.bar.width * opts.pix);\r\n    }\r\n    if (item.width <= 0) {\r\n      item.width = 1;\r\n    }\r\n    return item;\r\n  });\r\n}\r\n\r\nfunction getXAxisPoints(categories, opts, config) {\r\n  var spacingValid = opts.width - opts.area[1] - opts.area[3];\r\n  var dataCount = opts.enableScroll ? Math.min(opts.xAxis.itemCount, categories.length) : categories.length;\r\n  if ((opts.type == 'line' || opts.type == 'area' || opts.type == 'scatter' || opts.type == 'bubble' || opts.type == 'bar') && dataCount > 1 && opts.xAxis.boundaryGap == 'justify') {\r\n    dataCount -= 1;\r\n  }\r\n  var widthRatio = 0;\r\n  if(opts.type == 'mount' && opts.extra && opts.extra.mount && opts.extra.mount.widthRatio && opts.extra.mount.widthRatio > 1){\r\n    if(opts.extra.mount.widthRatio>2) opts.extra.mount.widthRatio = 2\r\n    widthRatio = opts.extra.mount.widthRatio - 1;\r\n    dataCount += widthRatio;\r\n  }\r\n  var eachSpacing = spacingValid / dataCount;\r\n  var xAxisPoints = [];\r\n  var startX = opts.area[3];\r\n  var endX = opts.width - opts.area[1];\r\n  categories.forEach(function(item, index) {\r\n    xAxisPoints.push(startX + widthRatio / 2 * eachSpacing + index * eachSpacing);\r\n  });\r\n  if (opts.xAxis.boundaryGap !== 'justify') {\r\n    if (opts.enableScroll === true) {\r\n      xAxisPoints.push(startX + widthRatio * eachSpacing + categories.length * eachSpacing);\r\n    } else {\r\n      xAxisPoints.push(endX);\r\n    }\r\n  }\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    startX: startX,\r\n    endX: endX,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\r\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var cPoints = [];\r\n      item.forEach(function(items, indexs) {\r\n        var point = {};\r\n        point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\r\n        var value = items.value || items;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        height *= process;\r\n        point.y = opts.height - Math.round(height) - opts.area[2];\r\n        cPoints.push(point);\r\n      });\r\n      points.push(cPoints);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\r\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\r\n  var boundaryGap = 'center';\r\n  if (opts.type == 'line' || opts.type == 'area' || opts.type == 'scatter' || opts.type == 'bubble' ) {\r\n    boundaryGap = opts.xAxis.boundaryGap;\r\n  }\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  var validWidth = opts.width - opts.area[1] - opts.area[3];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.x = xAxisPoints[index];\r\n      var value = item;\r\n      if (typeof item === 'object' && item !== null) {\r\n        if (item.constructor.toString().indexOf('Array') > -1) {\r\n          let xranges, xminRange, xmaxRange;\r\n          xranges = [].concat(opts.chartData.xAxisData.ranges);\r\n          xminRange = xranges.shift();\r\n          xmaxRange = xranges.pop();\r\n          value = item[1];\r\n          point.x = opts.area[3] + validWidth * (item[0] - xminRange) / (xmaxRange - xminRange);\r\n          if(opts.type == 'bubble'){\r\n            point.r = item[2];\r\n            point.t = item[3];\r\n          }\r\n        } else {\r\n          value = item.value;\r\n        }\r\n      }\r\n      if (boundaryGap == 'center') {\r\n        point.x += eachSpacing / 2;\r\n      }\r\n      var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n      height *= process;\r\n      point.y = opts.height - height - opts.area[2];\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getMountDataPoints(series, minRange, maxRange, xAxisPoints, eachSpacing, opts, mountOption) {\r\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  var validWidth = opts.width - opts.area[1] - opts.area[3];\r\n  var mountWidth = eachSpacing * mountOption.widthRatio;\r\n  series.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.x = xAxisPoints[index];\r\n      point.x += eachSpacing / 2;\r\n      var value = item.data;\r\n      var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n      height *= process;\r\n      point.y = opts.height - height - opts.area[2];\r\n      point.value = value;\r\n      point.width = mountWidth;\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getBarDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config) {\r\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  var validWidth = opts.width - opts.area[1] - opts.area[3];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.y = yAxisPoints[index];\r\n      var value = item;\r\n      if (typeof item === 'object' && item !== null) {\r\n        value = item.value;\r\n      }\r\n      var height = validWidth * (value - minRange) / (maxRange - minRange);\r\n      height *= process;\r\n      point.height = height;\r\n      point.value = value;\r\n      point.x = height + opts.area[3];\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, stackSeries) {\r\n  var process = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\r\n  var points = [];\r\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\r\n\r\n      if (seriesIndex > 0) {\r\n        var value = 0;\r\n        for (let i = 0; i <= seriesIndex; i++) {\r\n          value += stackSeries[i].data[index];\r\n        }\r\n        var value0 = value - item;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        var height0 = validHeight * (value0 - minRange) / (maxRange - minRange);\r\n      } else {\r\n        var value = item;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        var height0 = 0;\r\n      }\r\n      var heightc = height0;\r\n      height *= process;\r\n      heightc *= process;\r\n      point.y = opts.height - Math.round(height) - opts.area[2];\r\n      point.y0 = opts.height - Math.round(heightc) - opts.area[2];\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getBarStackDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, seriesIndex, stackSeries) {\r\n  var process = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\r\n  var points = [];\r\n  var validHeight = opts.width - opts.area[1] - opts.area[3];\r\n  data.forEach(function(item, index) {\r\n    if (item === null) {\r\n      points.push(null);\r\n    } else {\r\n      var point = {};\r\n      point.color = item.color;\r\n      point.y = yAxisPoints[index];\r\n      if (seriesIndex > 0) {\r\n        var value = 0;\r\n        for (let i = 0; i <= seriesIndex; i++) {\r\n          value += stackSeries[i].data[index];\r\n        }\r\n        var value0 = value - item;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        var height0 = validHeight * (value0 - minRange) / (maxRange - minRange);\r\n      } else {\r\n        var value = item;\r\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\r\n        var height0 = 0;\r\n      }\r\n      var heightc = height0;\r\n      height *= process;\r\n      heightc *= process;\r\n      point.height = height - heightc;\r\n      point.x = opts.area[3] + height;\r\n      point.x0 = opts.area[3] + heightc;\r\n      points.push(point);\r\n    }\r\n  });\r\n  return points;\r\n}\r\n\r\nfunction getYAxisTextList(series, opts, config, stack, yData) {\r\n  var index = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;\r\n  var data;\r\n  if (stack == 'stack') {\r\n    data = dataCombineStack(series, opts.categories.length);\r\n  } else {\r\n    data = dataCombine(series);\r\n  }\r\n  var sorted = [];\r\n  // remove null from data\r\n  data = data.filter(function(item) {\r\n    //return item !== null;\r\n    if (typeof item === 'object' && item !== null) {\r\n      if (item.constructor.toString().indexOf('Array') > -1) {\r\n        return item !== null;\r\n      } else {\r\n        return item.value !== null;\r\n      }\r\n    } else {\r\n      return item !== null;\r\n    }\r\n  });\r\n  data.map(function(item) {\r\n    if (typeof item === 'object') {\r\n      if (item.constructor.toString().indexOf('Array') > -1) {\r\n        if (opts.type == 'candle') {\r\n          item.map(function(subitem) {\r\n            sorted.push(subitem);\r\n          })\r\n        } else {\r\n          sorted.push(item[1]);\r\n        }\r\n      } else {\r\n        sorted.push(item.value);\r\n      }\r\n    } else {\r\n      sorted.push(item);\r\n    }\r\n  })\r\n  var minData = yData.min || 0;\r\n  var maxData = yData.max || 0;\r\n  if (sorted.length > 0) {\r\n    minData = Math.min.apply(this, sorted);\r\n    maxData = Math.max.apply(this, sorted);\r\n  }\r\n  if (minData === maxData) {\r\n    // var rangeSpan = maxData || 10;\r\n    // maxData += rangeSpan;\r\n    if(maxData == 0){\r\n      maxData = 10;\r\n    }else{\r\n      minData = 0;\r\n    }\r\n  }\r\n  var dataRange = getDataRange(minData, maxData);\r\n  var minRange = (yData.min === undefined || yData.min === null) ? dataRange.minRange : yData.min;\r\n  var maxRange = (yData.max === undefined || yData.max === null) ? dataRange.maxRange : yData.max;\r\n  var range = [];\r\n  var eachRange = (maxRange - minRange) / opts.yAxis.splitNumber;\r\n  for (var i = 0; i <= opts.yAxis.splitNumber; i++) {\r\n    range.push(minRange + eachRange * i);\r\n  }\r\n  return range.reverse();\r\n}\r\n\r\nfunction calYAxisData(series, opts, config, context) {\r\n  //堆叠图重算Y轴\r\n  var columnstyle = assign({}, {\r\n    type: \"\"\r\n  }, opts.extra.column);\r\n  //如果是多Y轴，重新计算\r\n  var YLength = opts.yAxis.data.length;\r\n  var newSeries = new Array(YLength);\r\n  if (YLength > 0) {\r\n    for (let i = 0; i < YLength; i++) {\r\n      newSeries[i] = [];\r\n      for (let j = 0; j < series.length; j++) {\r\n        if (series[j].index == i) {\r\n          newSeries[i].push(series[j]);\r\n        }\r\n      }\r\n    }\r\n    var rangesArr = new Array(YLength);\r\n    var rangesFormatArr = new Array(YLength);\r\n    var yAxisWidthArr = new Array(YLength);\r\n\r\n    for (let i = 0; i < YLength; i++) {\r\n      let yData = opts.yAxis.data[i];\r\n      //如果总开关不显示，强制每个Y轴为不显示\r\n      if (opts.yAxis.disabled == true) {\r\n        yData.disabled = true;\r\n      }\r\n      if(yData.type === 'categories'){\r\n        if(!yData.formatter){\r\n          yData.formatter = (val,index,opts) => {return val + (yData.unit || '')};\r\n        }\r\n        yData.categories = yData.categories || opts.categories;\r\n        rangesArr[i] = yData.categories;\r\n      }else{\r\n        if(!yData.formatter){\r\n          yData.formatter = (val,index,opts) => {return val.toFixed(yData.tofix) + (yData.unit || '')};\r\n        }\r\n        rangesArr[i] = getYAxisTextList(newSeries[i], opts, config, columnstyle.type, yData, i);\r\n      }\r\n      let yAxisFontSizes = yData.fontSize * opts.pix || config.fontSize;\r\n      yAxisWidthArr[i] = {\r\n        position: yData.position ? yData.position : 'left',\r\n        width: 0\r\n      };\r\n      rangesFormatArr[i] = rangesArr[i].map(function(items,index) {\r\n        items = yData.formatter(items,index,opts);\r\n        yAxisWidthArr[i].width = Math.max(yAxisWidthArr[i].width, measureText(items, yAxisFontSizes, context) + 5);\r\n        return items;\r\n      });\r\n      let calibration = yData.calibration ? 4 * opts.pix : 0;\r\n      yAxisWidthArr[i].width += calibration + 3 * opts.pix;\r\n      if (yData.disabled === true) {\r\n        yAxisWidthArr[i].width = 0;\r\n      }\r\n    }\r\n  } else {\r\n    var rangesArr = new Array(1);\r\n    var rangesFormatArr = new Array(1);\r\n    var yAxisWidthArr = new Array(1);\r\n    if(opts.type === 'bar'){\r\n      rangesArr[0] = opts.categories;\r\n      if(!opts.yAxis.formatter){\r\n        opts.yAxis.formatter = (val,index,opts) => {return val + (opts.yAxis.unit || '')}\r\n      }\r\n    }else{\r\n      if(!opts.yAxis.formatter){\r\n        opts.yAxis.formatter = (val,index,opts) => {return val.toFixed(opts.yAxis.tofix ) + (opts.yAxis.unit || '')}\r\n      }\r\n      rangesArr[0] = getYAxisTextList(series, opts, config, columnstyle.type, {});\r\n    }\r\n    yAxisWidthArr[0] = {\r\n      position: 'left',\r\n      width: 0\r\n    };\r\n    var yAxisFontSize = opts.yAxis.fontSize * opts.pix || config.fontSize;\r\n    rangesFormatArr[0] = rangesArr[0].map(function(item,index) {\r\n      item = opts.yAxis.formatter(item,index,opts);\r\n      yAxisWidthArr[0].width = Math.max(yAxisWidthArr[0].width, measureText(item, yAxisFontSize, context) + 5);\r\n      return item;\r\n    });\r\n    yAxisWidthArr[0].width += 3 * opts.pix;\r\n    if (opts.yAxis.disabled === true) {\r\n      yAxisWidthArr[0] = {\r\n        position: 'left',\r\n        width: 0\r\n      };\r\n      opts.yAxis.data[0] = {\r\n        disabled: true\r\n      };\r\n    } else {\r\n      opts.yAxis.data[0] = {\r\n        disabled: false,\r\n        position: 'left',\r\n        max: opts.yAxis.max,\r\n        min: opts.yAxis.min,\r\n        formatter: opts.yAxis.formatter\r\n      };\r\n      if(opts.type === 'bar'){\r\n        opts.yAxis.data[0].categories = opts.categories;\r\n        opts.yAxis.data[0].type = 'categories';\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    rangesFormat: rangesFormatArr,\r\n    ranges: rangesArr,\r\n    yAxisWidth: yAxisWidthArr\r\n  };\r\n}\r\n\r\nfunction calTooltipYAxisData(point, series, opts, config, eachSpacing) {\r\n  let ranges = [].concat(opts.chartData.yAxisData.ranges);\r\n  let spacingValid = opts.height - opts.area[0] - opts.area[2];\r\n  let minAxis = opts.area[0];\r\n  let items = [];\r\n  for (let i = 0; i < ranges.length; i++) {\r\n    let maxVal = ranges[i].shift();\r\n    let minVal = ranges[i].pop();\r\n    let item = maxVal - (maxVal - minVal) * (point - minAxis) / spacingValid;\r\n    item = opts.yAxis.data[i].formatter ? opts.yAxis.data[i].formatter(item) : item.toFixed(0);\r\n    items.push(String(item))\r\n  }\r\n  return items;\r\n}\r\n\r\nfunction calMarkLineData(points, opts) {\r\n  let minRange, maxRange;\r\n  let spacingValid = opts.height - opts.area[0] - opts.area[2];\r\n  for (let i = 0; i < points.length; i++) {\r\n    points[i].yAxisIndex = points[i].yAxisIndex ? points[i].yAxisIndex : 0;\r\n    let range = [].concat(opts.chartData.yAxisData.ranges[points[i].yAxisIndex]);\r\n    minRange = range.pop();\r\n    maxRange = range.shift();\r\n    let height = spacingValid * (points[i].value - minRange) / (maxRange - minRange);\r\n    points[i].y = opts.height - Math.round(height) - opts.area[2];\r\n  }\r\n  return points;\r\n}\r\n\r\nfunction contextRotate(context, opts) {\r\n  if (opts.rotateLock !== true) {\r\n    context.translate(opts.height, 0);\r\n    context.rotate(90 * Math.PI / 180);\r\n  } else if (opts._rotate_ !== true) {\r\n    context.translate(opts.height, 0);\r\n    context.rotate(90 * Math.PI / 180);\r\n    opts._rotate_ = true;\r\n  }\r\n}\r\n\r\nfunction drawPointShape(points, color, shape, context, opts) {\r\n  context.beginPath();\r\n  if (opts.dataPointShapeType == 'hollow') {\r\n    context.setStrokeStyle(color);\r\n    context.setFillStyle(opts.background);\r\n    context.setLineWidth(2 * opts.pix);\r\n  } else {\r\n    context.setStrokeStyle(\"#ffffff\");\r\n    context.setFillStyle(color);\r\n    context.setLineWidth(1 * opts.pix);\r\n  }\r\n  if (shape === 'diamond') {\r\n    points.forEach(function(item, index) {\r\n      if (item !== null) {\r\n        context.moveTo(item.x, item.y - 4.5);\r\n        context.lineTo(item.x - 4.5, item.y);\r\n        context.lineTo(item.x, item.y + 4.5);\r\n        context.lineTo(item.x + 4.5, item.y);\r\n        context.lineTo(item.x, item.y - 4.5);\r\n      }\r\n    });\r\n  } else if (shape === 'circle') {\r\n    points.forEach(function(item, index) {\r\n      if (item !== null) {\r\n        context.moveTo(item.x + 2.5 * opts.pix, item.y);\r\n        context.arc(item.x, item.y, 3 * opts.pix, 0, 2 * Math.PI, false);\r\n      }\r\n    });\r\n  } else if (shape === 'square') {\r\n    points.forEach(function(item, index) {\r\n      if (item !== null) {\r\n        context.moveTo(item.x - 3.5, item.y - 3.5);\r\n        context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\r\n      }\r\n    });\r\n  } else if (shape === 'triangle') {\r\n    points.forEach(function(item, index) {\r\n      if (item !== null) {\r\n        context.moveTo(item.x, item.y - 4.5);\r\n        context.lineTo(item.x - 4.5, item.y + 4.5);\r\n        context.lineTo(item.x + 4.5, item.y + 4.5);\r\n        context.lineTo(item.x, item.y - 4.5);\r\n      }\r\n    });\r\n  } else if (shape === 'triangle') {\r\n    return;\r\n  }\r\n  context.closePath();\r\n  context.fill();\r\n  context.stroke();\r\n}\r\n\r\nfunction drawRingTitle(opts, config, context, center) {\r\n  var titlefontSize = opts.title.fontSize || config.titleFontSize;\r\n  var subtitlefontSize = opts.subtitle.fontSize || config.subtitleFontSize;\r\n  var title = opts.title.name || '';\r\n  var subtitle = opts.subtitle.name || '';\r\n  var titleFontColor = opts.title.color || opts.fontColor;\r\n  var subtitleFontColor = opts.subtitle.color || opts.fontColor;\r\n  var titleHeight = title ? titlefontSize : 0;\r\n  var subtitleHeight = subtitle ? subtitlefontSize : 0;\r\n  var margin = 5;\r\n  if (subtitle) {\r\n    var textWidth = measureText(subtitle, subtitlefontSize * opts.pix, context);\r\n    var startX = center.x - textWidth / 2 + (opts.subtitle.offsetX|| 0) * opts.pix ;\r\n    var startY = center.y + subtitlefontSize * opts.pix / 2 + (opts.subtitle.offsetY || 0) * opts.pix;\r\n    if (title) {\r\n      startY += (titleHeight * opts.pix + margin) / 2;\r\n    }\r\n    context.beginPath();\r\n    context.setFontSize(subtitlefontSize * opts.pix);\r\n    context.setFillStyle(subtitleFontColor);\r\n    context.fillText(subtitle, startX, startY);\r\n    context.closePath();\r\n    context.stroke();\r\n  }\r\n  if (title) {\r\n    var _textWidth = measureText(title, titlefontSize * opts.pix, context);\r\n    var _startX = center.x - _textWidth / 2 + (opts.title.offsetX || 0);\r\n    var _startY = center.y + titlefontSize * opts.pix / 2 + (opts.title.offsetY || 0) * opts.pix;\r\n    if (subtitle) {\r\n      _startY -= (subtitleHeight * opts.pix + margin) / 2;\r\n    }\r\n    context.beginPath();\r\n    context.setFontSize(titlefontSize * opts.pix);\r\n    context.setFillStyle(titleFontColor);\r\n    context.fillText(title, _startX, _startY);\r\n    context.closePath();\r\n    context.stroke();\r\n  }\r\n}\r\n\r\nfunction drawPointText(points, series, config, context, opts) {\r\n  // 绘制数据文案\r\n  var data = series.data;\r\n  var textOffset = series.textOffset ? series.textOffset : 0;\r\n  points.forEach(function(item, index) {\r\n    if (item !== null) {\r\n      context.beginPath();\r\n      var fontSize = series.textSize ? series.textSize * opts.pix : config.fontSize;\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(series.textColor || opts.fontColor);\r\n      var value = data[index]\r\n      if (typeof data[index] === 'object' && data[index] !== null) {\r\n        if (data[index].constructor.toString().indexOf('Array')>-1) {\r\n          value = data[index][1];\r\n        } else {\r\n          value = data[index].value\r\n        }\r\n      }\r\n      var formatVal = series.formatter ? series.formatter(value,index,series,opts) : value;\r\n      context.setTextAlign('center');\r\n      context.fillText(String(formatVal), item.x, item.y - 4 + textOffset * opts.pix);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.setTextAlign('left');\r\n    }\r\n  });\r\n}\r\n\r\nfunction drawMountPointText(points, series, config, context, opts) {\r\n  // 绘制数据文案\r\n  var data = series.data;\r\n  var textOffset = series.textOffset ? series.textOffset : 0;\r\n  points.forEach(function(item, index) {\r\n    if (item !== null) {\r\n      context.beginPath();\r\n      var fontSize = series[index].textSize ? series[index].textSize * opts.pix : config.fontSize;\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(series[index].textColor || opts.fontColor);\r\n      var value = item.value\r\n      var formatVal = series[index].formatter ? series[index].formatter(value,index,series,opts) : value;\r\n      context.setTextAlign('center');\r\n      context.fillText(String(formatVal), item.x, item.y - 4 + textOffset * opts.pix);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.setTextAlign('left');\r\n    }\r\n  });\r\n}\r\n\r\nfunction drawBarPointText(points, series, config, context, opts) {\r\n  // 绘制数据文案\r\n  var data = series.data;\r\n  var textOffset = series.textOffset ? series.textOffset : 0;\r\n  points.forEach(function(item, index) {\r\n    if (item !== null) {\r\n      context.beginPath();\r\n      var fontSize = series.textSize ? series.textSize * opts.pix : config.fontSize;\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(series.textColor || opts.fontColor);\r\n      var value = data[index]\r\n      if (typeof data[index] === 'object' && data[index] !== null) {\r\n        value = data[index].value ;\r\n      }\r\n      var formatVal = series.formatter ? series.formatter(value,index,series,opts) : value;\r\n      context.setTextAlign('left');\r\n      context.fillText(String(formatVal), item.x + 4 * opts.pix , item.y + fontSize / 2 - 3 );\r\n      context.closePath();\r\n      context.stroke();\r\n    }\r\n  });\r\n}\r\n\r\nfunction drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context) {\r\n  radius -= gaugeOption.width / 2 + gaugeOption.labelOffset * opts.pix;\r\n  radius = radius < 10 ? 10 : radius;\r\n  let totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\r\n  let splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\r\n  let totalNumber = gaugeOption.endNumber - gaugeOption.startNumber;\r\n  let splitNumber = totalNumber / gaugeOption.splitLine.splitNumber;\r\n  let nowAngle = gaugeOption.startAngle;\r\n  let nowNumber = gaugeOption.startNumber;\r\n  for (let i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\r\n    var pos = {\r\n      x: radius * Math.cos(nowAngle * Math.PI),\r\n      y: radius * Math.sin(nowAngle * Math.PI)\r\n    };\r\n    var labelText = gaugeOption.formatter ? gaugeOption.formatter(nowNumber,i,opts) : nowNumber;\r\n    pos.x += centerPosition.x - measureText(labelText, config.fontSize, context) / 2;\r\n    pos.y += centerPosition.y;\r\n    var startX = pos.x;\r\n    var startY = pos.y;\r\n    context.beginPath();\r\n    context.setFontSize(config.fontSize);\r\n    context.setFillStyle(gaugeOption.labelColor || opts.fontColor);\r\n    context.fillText(labelText, startX, startY + config.fontSize / 2);\r\n    context.closePath();\r\n    context.stroke();\r\n    nowAngle += splitAngle;\r\n    if (nowAngle >= 2) {\r\n      nowAngle = nowAngle % 2;\r\n    }\r\n    nowNumber += splitNumber;\r\n  }\r\n}\r\n\r\nfunction drawRadarLabel(angleList, radius, centerPosition, opts, config, context) {\r\n  var radarOption = opts.extra.radar || {};\r\n  angleList.forEach(function(angle, index) {\r\n    if(radarOption.labelPointShow === true && opts.categories[index] !== ''){\r\n      var posPoint = {\r\n        x: radius * Math.cos(angle),\r\n        y: radius * Math.sin(angle)\r\n      };\r\n      var posPointAxis = convertCoordinateOrigin(posPoint.x, posPoint.y, centerPosition);\r\n      context.setFillStyle(radarOption.labelPointColor);\r\n      context.beginPath();\r\n      context.arc(posPointAxis.x, posPointAxis.y, radarOption.labelPointRadius * opts.pix, 0, 2 * Math.PI, false);\r\n      context.closePath();\r\n      context.fill();\r\n    }\r\n    var pos = {\r\n      x: (radius + config.radarLabelTextMargin * opts.pix) * Math.cos(angle),\r\n      y: (radius + config.radarLabelTextMargin * opts.pix) * Math.sin(angle)\r\n    };\r\n    var posRelativeCanvas = convertCoordinateOrigin(pos.x, pos.y, centerPosition);\r\n    var startX = posRelativeCanvas.x;\r\n    var startY = posRelativeCanvas.y;\r\n    if (util.approximatelyEqual(pos.x, 0)) {\r\n      startX -= measureText(opts.categories[index] || '', config.fontSize, context) / 2;\r\n    } else if (pos.x < 0) {\r\n      startX -= measureText(opts.categories[index] || '', config.fontSize, context);\r\n    }\r\n    context.beginPath();\r\n    context.setFontSize(config.fontSize);\r\n    context.setFillStyle(radarOption.labelColor || opts.fontColor);\r\n    context.fillText(opts.categories[index] || '', startX, startY + config.fontSize / 2);\r\n    context.closePath();\r\n    context.stroke();\r\n  });\r\n\r\n}\r\n\r\nfunction drawPieText(series, opts, config, context, radius, center) {\r\n  var lineRadius = config.pieChartLinePadding;\r\n  var textObjectCollection = [];\r\n  var lastTextObject = null;\r\n  var seriesConvert = series.map(function(item,index) {\r\n    var text = item.formatter ? item.formatter(item,index,series,opts) : util.toFixed(item._proportion_.toFixed(4) * 100) + '%';\r\n    text = item.labelText ? item.labelText : text;\r\n    var arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._proportion_ / 2);\r\n    if (item._rose_proportion_) {\r\n      arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._rose_proportion_ / 2);\r\n    }\r\n    var color = item.color;\r\n    var radius = item._radius_;\r\n    return {\r\n      arc: arc,\r\n      text: text,\r\n      color: color,\r\n      radius: radius,\r\n      textColor: item.textColor,\r\n      textSize: item.textSize,\r\n      labelShow: item.labelShow\r\n    };\r\n  });\r\n  for (let i = 0; i < seriesConvert.length; i++) {\r\n    let item = seriesConvert[i];\r\n    // line end\r\n    let orginX1 = Math.cos(item.arc) * (item.radius + lineRadius);\r\n    let orginY1 = Math.sin(item.arc) * (item.radius + lineRadius);\r\n    // line start\r\n    let orginX2 = Math.cos(item.arc) * item.radius;\r\n    let orginY2 = Math.sin(item.arc) * item.radius;\r\n    // text start\r\n    let orginX3 = orginX1 >= 0 ? orginX1 + config.pieChartTextPadding : orginX1 - config.pieChartTextPadding;\r\n    let orginY3 = orginY1;\r\n    let textWidth = measureText(item.text, item.textSize * opts.pix || config.fontSize, context);\r\n    let startY = orginY3;\r\n    if (lastTextObject && util.isSameXCoordinateArea(lastTextObject.start, {\r\n        x: orginX3\r\n      })) {\r\n      if (orginX3 > 0) {\r\n        startY = Math.min(orginY3, lastTextObject.start.y);\r\n      } else if (orginX1 < 0) {\r\n        startY = Math.max(orginY3, lastTextObject.start.y);\r\n      } else {\r\n        if (orginY3 > 0) {\r\n          startY = Math.max(orginY3, lastTextObject.start.y);\r\n        } else {\r\n          startY = Math.min(orginY3, lastTextObject.start.y);\r\n        }\r\n      }\r\n    }\r\n    if (orginX3 < 0) {\r\n      orginX3 -= textWidth;\r\n    }\r\n    let textObject = {\r\n      lineStart: {\r\n        x: orginX2,\r\n        y: orginY2\r\n      },\r\n      lineEnd: {\r\n        x: orginX1,\r\n        y: orginY1\r\n      },\r\n      start: {\r\n        x: orginX3,\r\n        y: startY\r\n      },\r\n      width: textWidth,\r\n      height: config.fontSize,\r\n      text: item.text,\r\n      color: item.color,\r\n      textColor: item.textColor,\r\n      textSize: item.textSize\r\n    };\r\n    lastTextObject = avoidCollision(textObject, lastTextObject);\r\n    textObjectCollection.push(lastTextObject);\r\n  }\r\n  for (let i = 0; i < textObjectCollection.length; i++) {\r\n    if(seriesConvert[i].labelShow === false){\r\n      continue;\r\n    }\r\n    let item = textObjectCollection[i];\r\n    let lineStartPoistion = convertCoordinateOrigin(item.lineStart.x, item.lineStart.y, center);\r\n    let lineEndPoistion = convertCoordinateOrigin(item.lineEnd.x, item.lineEnd.y, center);\r\n    let textPosition = convertCoordinateOrigin(item.start.x, item.start.y, center);\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.setFontSize(item.textSize * opts.pix || config.fontSize);\r\n    context.beginPath();\r\n    context.setStrokeStyle(item.color);\r\n    context.setFillStyle(item.color);\r\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\r\n    let curveStartX = item.start.x < 0 ? textPosition.x + item.width : textPosition.x;\r\n    let textStartX = item.start.x < 0 ? textPosition.x - 5 : textPosition.x + 5;\r\n    context.quadraticCurveTo(lineEndPoistion.x, lineEndPoistion.y, curveStartX, textPosition.y);\r\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\r\n    context.stroke();\r\n    context.closePath();\r\n    context.beginPath();\r\n    context.moveTo(textPosition.x + item.width, textPosition.y);\r\n    context.arc(curveStartX, textPosition.y, 2 * opts.pix, 0, 2 * Math.PI);\r\n    context.closePath();\r\n    context.fill();\r\n    context.beginPath();\r\n    context.setFontSize(item.textSize * opts.pix || config.fontSize);\r\n    context.setFillStyle(item.textColor || opts.fontColor);\r\n    context.fillText(item.text, textStartX, textPosition.y + 3);\r\n    context.closePath();\r\n    context.stroke();\r\n    context.closePath();\r\n  }\r\n}\r\n\r\nfunction drawToolTipSplitLine(offsetX, opts, config, context) {\r\n  var toolTipOption = opts.extra.tooltip || {};\r\n  toolTipOption.gridType = toolTipOption.gridType == undefined ? 'solid' : toolTipOption.gridType;\r\n  toolTipOption.dashLength = toolTipOption.dashLength == undefined ? 4 : toolTipOption.dashLength;\r\n  var startY = opts.area[0];\r\n  var endY = opts.height - opts.area[2];\r\n  if (toolTipOption.gridType == 'dash') {\r\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\r\n  }\r\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\r\n  context.setLineWidth(1 * opts.pix);\r\n  context.beginPath();\r\n  context.moveTo(offsetX, startY);\r\n  context.lineTo(offsetX, endY);\r\n  context.stroke();\r\n  context.setLineDash([]);\r\n  if (toolTipOption.xAxisLabel) {\r\n    let labelText = opts.categories[opts.tooltip.index];\r\n    context.setFontSize(config.fontSize);\r\n    let textWidth = measureText(labelText, config.fontSize, context);\r\n    let textX = offsetX - 0.5 * textWidth;\r\n    let textY = endY;\r\n    context.beginPath();\r\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\r\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.rect(textX - config.toolTipPadding, textY, textWidth + 2 * config.toolTipPadding, config.fontSize + 2 * config.toolTipPadding);\r\n    context.closePath();\r\n    context.stroke();\r\n    context.fill();\r\n    context.beginPath();\r\n    context.setFontSize(config.fontSize);\r\n    context.setFillStyle(toolTipOption.labelFontColor || opts.fontColor);\r\n    context.fillText(String(labelText), textX, textY + config.toolTipPadding + config.fontSize);\r\n    context.closePath();\r\n    context.stroke();\r\n  }\r\n}\r\n\r\nfunction drawMarkLine(opts, config, context) {\r\n  let markLineOption = assign({}, {\r\n    type: 'solid',\r\n    dashLength: 4,\r\n    data: []\r\n  }, opts.extra.markLine);\r\n  let startX = opts.area[3];\r\n  let endX = opts.width - opts.area[1];\r\n  let points = calMarkLineData(markLineOption.data, opts);\r\n  for (let i = 0; i < points.length; i++) {\r\n    let item = assign({}, {\r\n      lineColor: '#DE4A42',\r\n      showLabel: false,\r\n      labelFontColor: '#666666',\r\n      labelBgColor: '#DFE8FF',\r\n      labelBgOpacity: 0.8,\r\n      labelAlign: 'left',\r\n      labelOffsetX: 0,\r\n      labelOffsetY: 0,\r\n    }, points[i]);\r\n    if (markLineOption.type == 'dash') {\r\n      context.setLineDash([markLineOption.dashLength, markLineOption.dashLength]);\r\n    }\r\n    context.setStrokeStyle(item.lineColor);\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.beginPath();\r\n    context.moveTo(startX, item.y);\r\n    context.lineTo(endX, item.y);\r\n    context.stroke();\r\n    context.setLineDash([]);\r\n    if (item.showLabel) {\r\n      let labelText = item.labelText ? item.labelText : item.value;\r\n      context.setFontSize(config.fontSize);\r\n      let textWidth = measureText(labelText, config.fontSize, context);\r\n      let bgWidth = textWidth + config.toolTipPadding * 2;\r\n      let bgStartX = item.labelAlign == 'left' ? opts.area[3] - bgWidth : opts.width - opts.area[1];\r\n      bgStartX += item.labelOffsetX;\r\n      let bgStartY = item.y - 0.5 * config.fontSize - config.toolTipPadding;\r\n      bgStartY += item.labelOffsetY;\r\n      let textX = bgStartX + config.toolTipPadding;\r\n      let textY = item.y;\r\n      context.setFillStyle(hexToRgb(item.labelBgColor, item.labelBgOpacity));\r\n      context.setStrokeStyle(item.labelBgColor);\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.beginPath();\r\n      context.rect(bgStartX, bgStartY, bgWidth, config.fontSize + 2 * config.toolTipPadding);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.fill();\r\n      context.setFontSize(config.fontSize);\r\n      context.setTextAlign('left');\r\n      context.setFillStyle(item.labelFontColor);\r\n      context.fillText(String(labelText), textX, bgStartY + config.fontSize + config.toolTipPadding/2);\r\n      context.stroke();\r\n      context.setTextAlign('left');\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints) {\r\n  var toolTipOption = assign({}, {\r\n    gridType: 'solid',\r\n    dashLength: 4\r\n  }, opts.extra.tooltip);\r\n  var startX = opts.area[3];\r\n  var endX = opts.width - opts.area[1];\r\n  if (toolTipOption.gridType == 'dash') {\r\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\r\n  }\r\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\r\n  context.setLineWidth(1 * opts.pix);\r\n  context.beginPath();\r\n  context.moveTo(startX, opts.tooltip.offset.y);\r\n  context.lineTo(endX, opts.tooltip.offset.y);\r\n  context.stroke();\r\n  context.setLineDash([]);\r\n  if (toolTipOption.yAxisLabel) {\r\n    let labelText = calTooltipYAxisData(opts.tooltip.offset.y, opts.series, opts, config, eachSpacing);\r\n    let widthArr = opts.chartData.yAxisData.yAxisWidth;\r\n    let tStartLeft = opts.area[3];\r\n    let tStartRight = opts.width - opts.area[1];\r\n    for (let i = 0; i < labelText.length; i++) {\r\n      context.setFontSize(config.fontSize);\r\n      let textWidth = measureText(labelText[i], config.fontSize, context);\r\n      let bgStartX, bgEndX, bgWidth;\r\n      if (widthArr[i].position == 'left') {\r\n        bgStartX = tStartLeft - widthArr[i].width;\r\n        bgEndX = Math.max(bgStartX, bgStartX + textWidth + config.toolTipPadding * 2);\r\n      } else {\r\n        bgStartX = tStartRight;\r\n        bgEndX = Math.max(bgStartX + widthArr[i].width, bgStartX + textWidth + config.toolTipPadding * 2);\r\n      }\r\n      bgWidth = bgEndX - bgStartX;\r\n      let textX = bgStartX + (bgWidth - textWidth) / 2;\r\n      let textY = opts.tooltip.offset.y;\r\n      context.beginPath();\r\n      context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\r\n      context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 *\r\n        config.toolTipPadding);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.fill();\r\n      context.beginPath();\r\n      context.setFontSize(config.fontSize);\r\n      context.setFillStyle(toolTipOption.labelFontColor || opts.fontColor);\r\n      context.fillText(labelText[i], textX, textY + 0.5 * config.fontSize);\r\n      context.closePath();\r\n      context.stroke();\r\n      if (widthArr[i].position == 'left') {\r\n        tStartLeft -= (widthArr[i].width + opts.yAxis.padding * opts.pix);\r\n      } else {\r\n        tStartRight += widthArr[i].width + opts.yAxis.padding * opts.pix;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawToolTipSplitArea(offsetX, opts, config, context, eachSpacing) {\r\n  var toolTipOption = assign({}, {\r\n    activeBgColor: '#000000',\r\n    activeBgOpacity: 0.08,\r\n    activeWidth: eachSpacing\r\n  }, opts.extra.column);\r\n  toolTipOption.activeWidth = toolTipOption.activeWidth > eachSpacing ? eachSpacing : toolTipOption.activeWidth;\r\n  var startY = opts.area[0];\r\n  var endY = opts.height - opts.area[2];\r\n  context.beginPath();\r\n  context.setFillStyle(hexToRgb(toolTipOption.activeBgColor, toolTipOption.activeBgOpacity));\r\n  context.rect(offsetX - toolTipOption.activeWidth / 2, startY, toolTipOption.activeWidth, endY - startY);\r\n  context.closePath();\r\n  context.fill();\r\n  context.setFillStyle(\"#FFFFFF\");\r\n}\r\n\r\nfunction drawBarToolTipSplitArea(offsetX, opts, config, context, eachSpacing) {\r\n  var toolTipOption = assign({}, {\r\n    activeBgColor: '#000000',\r\n    activeBgOpacity: 0.08\r\n  }, opts.extra.bar);\r\n  var startX = opts.area[3];\r\n  var endX = opts.width - opts.area[1];\r\n  context.beginPath();\r\n  context.setFillStyle(hexToRgb(toolTipOption.activeBgColor, toolTipOption.activeBgOpacity));\r\n  context.rect( startX ,offsetX - eachSpacing / 2 ,  endX - startX,eachSpacing);\r\n  context.closePath();\r\n  context.fill();\r\n  context.setFillStyle(\"#FFFFFF\");\r\n}\r\n\r\n\r\nfunction drawToolTip(textList, offset, opts, config, context, eachSpacing, xAxisPoints) {\r\n  var toolTipOption = assign({}, {\r\n    showBox: true,\r\n    showArrow: true,\r\n    showCategory: false,\r\n    bgColor: '#000000',\r\n    bgOpacity: 0.7,\r\n    borderColor: '#000000',\r\n    borderWidth: 0,\r\n    borderRadius: 0,\r\n    borderOpacity: 0.7,\r\n    fontColor: '#FFFFFF',\r\n    splitLine: true,\r\n  }, opts.extra.tooltip);\r\n  if(toolTipOption.showCategory==true && opts.categories){\r\n    textList.unshift({text:opts.categories[opts.tooltip.index],color:null})\r\n  }\r\n  var legendWidth = 4 * opts.pix;\r\n  var legendMarginRight = 5 * opts.pix;\r\n  var arrowWidth = toolTipOption.showArrow ? 8 * opts.pix : 0;\r\n  var isOverRightBorder = false;\r\n  if (opts.type == 'line' || opts.type == 'mount' || opts.type == 'area' || opts.type == 'candle' || opts.type == 'mix') {\r\n    if (toolTipOption.splitLine == true) {\r\n      drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\r\n    }\r\n  }\r\n  offset = assign({\r\n    x: 0,\r\n    y: 0\r\n  }, offset);\r\n  offset.y -= 8 * opts.pix;\r\n  var textWidth = textList.map(function(item) {\r\n    return measureText(item.text, config.fontSize, context);\r\n  });\r\n  var toolTipWidth = legendWidth + legendMarginRight + 4 * config.toolTipPadding + Math.max.apply(null, textWidth);\r\n  var toolTipHeight = 2 * config.toolTipPadding + textList.length * config.toolTipLineHeight;\r\n  if (toolTipOption.showBox == false) {\r\n    return\r\n  }\r\n  // if beyond the right border\r\n  if (offset.x - Math.abs(opts._scrollDistance_ || 0) + arrowWidth + toolTipWidth > opts.width) {\r\n    isOverRightBorder = true;\r\n  }\r\n  if (toolTipHeight + offset.y > opts.height) {\r\n    offset.y = opts.height - toolTipHeight;\r\n  }\r\n  // draw background rect\r\n  context.beginPath();\r\n  context.setFillStyle(hexToRgb(toolTipOption.bgColor || config.toolTipBackground, toolTipOption.bgOpacity || config.toolTipOpacity));\r\n  context.setLineWidth(toolTipOption.borderWidth * opts.pix);\r\n  context.setStrokeStyle(hexToRgb(toolTipOption.borderColor, toolTipOption.borderOpacity));\r\n  var radius = toolTipOption.borderRadius;\r\n  if (isOverRightBorder) {\r\n    if (toolTipOption.showArrow) {\r\n      context.moveTo(offset.x, offset.y + 10 * opts.pix);\r\n      context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pix + 5 * opts.pix);\r\n    }\r\n    context.arc(offset.x - arrowWidth - radius, offset.y + toolTipHeight - radius, radius, 0, Math.PI / 2, false);\r\n    context.arc(offset.x - arrowWidth - Math.round(toolTipWidth) + radius, offset.y + toolTipHeight - radius, radius,\r\n      Math.PI / 2, Math.PI, false);\r\n    context.arc(offset.x - arrowWidth - Math.round(toolTipWidth) + radius, offset.y + radius, radius, -Math.PI, -Math.PI / 2, false);\r\n    context.arc(offset.x - arrowWidth - radius, offset.y + radius, radius, -Math.PI / 2, 0, false);\r\n    if (toolTipOption.showArrow) {\r\n      context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pix - 5 * opts.pix);\r\n      context.lineTo(offset.x, offset.y + 10 * opts.pix);\r\n    }\r\n  } else {\r\n    if (toolTipOption.showArrow) {\r\n      context.moveTo(offset.x, offset.y + 10 * opts.pix);\r\n      context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pix - 5 * opts.pix);\r\n    }\r\n    context.arc(offset.x + arrowWidth + radius, offset.y + radius, radius, -Math.PI, -Math.PI / 2, false);\r\n    context.arc(offset.x + arrowWidth + Math.round(toolTipWidth) - radius, offset.y + radius, radius, -Math.PI / 2, 0,\r\n      false);\r\n    context.arc(offset.x + arrowWidth + Math.round(toolTipWidth) - radius, offset.y + toolTipHeight - radius, radius, 0,\r\n      Math.PI / 2, false);\r\n    context.arc(offset.x + arrowWidth + radius, offset.y + toolTipHeight - radius, radius, Math.PI / 2, Math.PI, false);\r\n    if (toolTipOption.showArrow) {\r\n      context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pix + 5 * opts.pix);\r\n      context.lineTo(offset.x, offset.y + 10 * opts.pix);\r\n    }\r\n  }\r\n  context.closePath();\r\n  context.fill();\r\n  if (toolTipOption.borderWidth > 0) {\r\n    context.stroke();\r\n  }\r\n  // draw legend\r\n  textList.forEach(function(item, index) {\r\n    if (item.color !== null) {\r\n      context.beginPath();\r\n      context.setFillStyle(item.color);\r\n      var startX = offset.x + arrowWidth + 2 * config.toolTipPadding;\r\n      var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index + config.toolTipPadding + 1;\r\n      if (isOverRightBorder) {\r\n        startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding;\r\n      }\r\n      context.fillRect(startX, startY, legendWidth, config.fontSize);\r\n      context.closePath();\r\n    }\r\n  });\r\n  // draw text list\r\n  textList.forEach(function(item, index) {\r\n    var startX = offset.x + arrowWidth + 2 * config.toolTipPadding + legendWidth + legendMarginRight;\r\n    if (isOverRightBorder) {\r\n      startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding + +legendWidth + legendMarginRight;\r\n    }\r\n    var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index + config.toolTipPadding;\r\n    context.beginPath();\r\n    context.setFontSize(config.fontSize);\r\n    context.setFillStyle(toolTipOption.fontColor);\r\n    context.fillText(item.text, startX, startY + config.fontSize);\r\n    context.closePath();\r\n    context.stroke();\r\n  });\r\n}\r\n\r\nfunction drawColumnDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let columnOption = assign({}, {\r\n    type: 'group',\r\n    width: eachSpacing / 2,\r\n    meterBorder: 4,\r\n    meterFillColor: '#FFFFFF',\r\n    barBorderCircle: false,\r\n    barBorderRadius: [],\r\n    seriesGap: 2,\r\n    linearType: 'none',\r\n    linearOpacity: 1,\r\n    customColor: [],\r\n    colorStop: 0,\r\n  }, opts.extra.column);\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = xAxisPoints.length + 2;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\r\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\r\n  }\r\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\r\n    drawToolTipSplitArea(opts.tooltip.offset.x, opts, config, context, eachSpacing);\r\n  }\r\n  columnOption.customColor = fillCustomColor(columnOption.linearType, columnOption.customColor, series, config);\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    switch (columnOption.type) {\r\n      case 'group':\r\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n        var tooltipPoints = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n        calPoints.push(tooltipPoints);\r\n        points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          //fix issues/I27B1N yyoinge & Joeshu\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - item.width / 2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || eachSeries.color\r\n            var strokeColor = item.color || eachSeries.color\r\n            if (columnOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (columnOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, columnOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(columnOption.customColor[eachSeries.linearIndex], columnOption.linearOpacity));\r\n                grd.addColorStop(columnOption.colorStop, hexToRgb(columnOption.customColor[eachSeries.linearIndex],columnOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            // 圆角边框\r\n            if ((columnOption.barBorderRadius && columnOption.barBorderRadius.length === 4) || columnOption.barBorderCircle === true) {\r\n              const left = startX;\r\n              const top = item.y;\r\n              const width = item.width;\r\n              const height = opts.height - opts.area[2] - item.y;\r\n              if (columnOption.barBorderCircle) {\r\n                columnOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n              }\r\n              let [r0, r1, r2, r3] = columnOption.barBorderRadius;\r\n              let minRadius = Math.min(width/2,height/2);\r\n              r0 = r0 > minRadius ? minRadius : r0;\r\n              r1 = r1 > minRadius ? minRadius : r1;\r\n              r2 = r2 > minRadius ? minRadius : r2;\r\n              r3 = r3 > minRadius ? minRadius : r3;\r\n              r0 = r0 < 0 ? 0 : r0;\r\n              r1 = r1 < 0 ? 0 : r1;\r\n              r2 = r2 < 0 ? 0 : r2;\r\n              r3 = r3 < 0 ? 0 : r3;\r\n              context.arc(left + r0, top + r0, r0, -Math.PI, -Math.PI / 2);\r\n              context.arc(left + width - r1, top + r1, r1, -Math.PI / 2, 0);\r\n              context.arc(left + width - r2, top + height - r2, r2, 0, Math.PI / 2);\r\n              context.arc(left + r3, top + height - r3, r3, Math.PI / 2, Math.PI);\r\n            } else {\r\n              context.moveTo(startX, item.y);\r\n              context.lineTo(startX + item.width, item.y);\r\n              context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n              context.lineTo(startX, opts.height - opts.area[2]);\r\n              context.lineTo(startX, item.y);\r\n              context.setLineWidth(1)\r\n              context.setStrokeStyle(strokeColor);\r\n            }\r\n            context.setFillStyle(fillColor);\r\n            context.closePath();\r\n            //context.stroke();\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'stack':\r\n        // 绘制堆叠数据图\r\n        var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n        calPoints.push(points);\r\n        points = fixColumeStackData(points, eachSpacing, series.length, seriesIndex, config, opts, series);\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            context.beginPath();\r\n            var fillColor = item.color || eachSeries.color;\r\n            var startX = item.x - item.width / 2 + 1;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            var height0 = opts.height - item.y0 - opts.area[2];\r\n            if (seriesIndex > 0) {\r\n              height -= height0;\r\n            }\r\n            context.setFillStyle(fillColor);\r\n            context.moveTo(startX, item.y);\r\n            context.fillRect(startX, item.y, item.width, height);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'meter':\r\n        // 绘制温度计数据图\r\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n        calPoints.push(points);\r\n        points = fixColumeMeterData(points, eachSpacing, series.length, seriesIndex, config, opts, columnOption.meterBorder);\r\n          for (let i = 0; i < points.length; i++) {\r\n            let item = points[i];\r\n            if (item !== null && i > leftNum && i < rightNum) {\r\n              //画背景颜色\r\n              context.beginPath();\r\n              if (seriesIndex == 0 && columnOption.meterBorder > 0) {\r\n                context.setStrokeStyle(eachSeries.color);\r\n                context.setLineWidth(columnOption.meterBorder * opts.pix);\r\n              }\r\n              if(seriesIndex == 0){\r\n                context.setFillStyle(columnOption.meterFillColor);\r\n              }else{\r\n                context.setFillStyle(item.color || eachSeries.color);\r\n              }\r\n              var startX = item.x - item.width / 2;\r\n              var height = opts.height - item.y - opts.area[2];\r\n              if ((columnOption.barBorderRadius && columnOption.barBorderRadius.length === 4) || columnOption.barBorderCircle === true) {\r\n                const left = startX;\r\n                const top = item.y;\r\n                const width = item.width;\r\n                const height = opts.height - opts.area[2] - item.y;\r\n                if (columnOption.barBorderCircle) {\r\n                  columnOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n                }\r\n                let [r0, r1, r2, r3] = columnOption.barBorderRadius;\r\n                let minRadius = Math.min(width/2,height/2);\r\n                r0 = r0 > minRadius ? minRadius : r0;\r\n                r1 = r1 > minRadius ? minRadius : r1;\r\n                r2 = r2 > minRadius ? minRadius : r2;\r\n                r3 = r3 > minRadius ? minRadius : r3;\r\n                r0 = r0 < 0 ? 0 : r0;\r\n                r1 = r1 < 0 ? 0 : r1;\r\n                r2 = r2 < 0 ? 0 : r2;\r\n                r3 = r3 < 0 ? 0 : r3;\r\n                context.arc(left + r0, top + r0, r0, -Math.PI, -Math.PI / 2);\r\n                context.arc(left + width - r1, top + r1, r1, -Math.PI / 2, 0);\r\n                context.arc(left + width - r2, top + height - r2, r2, 0, Math.PI / 2);\r\n                context.arc(left + r3, top + height - r3, r3, Math.PI / 2, Math.PI);\r\n                context.fill();\r\n              }else{\r\n                context.moveTo(startX, item.y);\r\n                context.lineTo(startX + item.width, item.y);\r\n                context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n                context.lineTo(startX, opts.height - opts.area[2]);\r\n                context.lineTo(startX, item.y);\r\n                context.fill();\r\n              }\r\n              if (seriesIndex == 0 && columnOption.meterBorder > 0) {\r\n                context.closePath();\r\n                context.stroke();\r\n              }\r\n            }\r\n          }\r\n        break;\r\n    }\r\n  });\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      switch (columnOption.type) {\r\n        case 'group':\r\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n          points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\r\n          drawPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n        case 'stack':\r\n          var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n          drawPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n        case 'meter':\r\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n          drawPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawMountDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let mountOption = assign({}, {\r\n    type: 'mount',\r\n    widthRatio: 1,\r\n    borderWidth: 1,\r\n    barBorderCircle: false,\r\n    barBorderRadius: [],\r\n    linearType: 'none',\r\n    linearOpacity: 1,\r\n    customColor: [],\r\n    colorStop: 0,\r\n  }, opts.extra.mount);\r\n  mountOption.widthRatio = mountOption.widthRatio <= 0 ? 0 : mountOption.widthRatio;\r\n  mountOption.widthRatio = mountOption.widthRatio >= 2 ? 2 : mountOption.widthRatio;\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = xAxisPoints.length + 2;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\r\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\r\n  }\r\n  mountOption.customColor = fillCustomColor(mountOption.linearType, mountOption.customColor, series, config);\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[0]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var points = getMountDataPoints(series, minRange, maxRange, xAxisPoints, eachSpacing, opts, mountOption, process);\r\n    switch (mountOption.type) {\r\n      case 'bar':\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - eachSpacing*mountOption.widthRatio/2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || series[i].color\r\n            var strokeColor = item.color || series[i].color\r\n            if (mountOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (mountOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(mountOption.customColor[series[i].linearIndex], mountOption.linearOpacity));\r\n                grd.addColorStop(mountOption.colorStop, hexToRgb(mountOption.customColor[series[i].linearIndex],mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            // 圆角边框\r\n            if ((mountOption.barBorderRadius && mountOption.barBorderRadius.length === 4) || mountOption.barBorderCircle === true) {\r\n              const left = startX;\r\n              const top = item.y;\r\n              const width = item.width;\r\n              const height = opts.height - opts.area[2] - item.y - mountOption.borderWidth * opts.pix / 2; \r\n              if (mountOption.barBorderCircle) {\r\n                mountOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n              }\r\n              let [r0, r1, r2, r3] = mountOption.barBorderRadius;\r\n              let minRadius = Math.min(width/2,height/2);\r\n              r0 = r0 > minRadius ? minRadius : r0;\r\n              r1 = r1 > minRadius ? minRadius : r1;\r\n              r2 = r2 > minRadius ? minRadius : r2;\r\n              r3 = r3 > minRadius ? minRadius : r3;\r\n              r0 = r0 < 0 ? 0 : r0;\r\n              r1 = r1 < 0 ? 0 : r1;\r\n              r2 = r2 < 0 ? 0 : r2;\r\n              r3 = r3 < 0 ? 0 : r3;\r\n              context.arc(left + r0, top + r0, r0, -Math.PI, -Math.PI / 2);\r\n              context.arc(left + width - r1, top + r1, r1, -Math.PI / 2, 0);\r\n              context.arc(left + width - r2, top + height - r2, r2, 0, Math.PI / 2);\r\n              context.arc(left + r3, top + height - r3, r3, Math.PI / 2, Math.PI);\r\n            } else {\r\n              context.moveTo(startX, item.y);\r\n              context.lineTo(startX + item.width, item.y);\r\n              context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n              context.lineTo(startX, opts.height - opts.area[2]);\r\n              context.lineTo(startX, item.y);\r\n            }\r\n            context.setStrokeStyle(strokeColor);\r\n            context.setFillStyle(fillColor);\r\n            if(mountOption.borderWidth > 0){\r\n              context.setLineWidth(mountOption.borderWidth * opts.pix);\r\n              context.closePath();\r\n              context.stroke();\r\n            }\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'triangle':\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - eachSpacing*mountOption.widthRatio/2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || series[i].color\r\n            var strokeColor = item.color || series[i].color\r\n            if (mountOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (mountOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(mountOption.customColor[series[i].linearIndex], mountOption.linearOpacity));\r\n                grd.addColorStop(mountOption.colorStop, hexToRgb(mountOption.customColor[series[i].linearIndex],mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            context.moveTo(startX, opts.height - opts.area[2]);\r\n            context.lineTo(item.x, item.y);\r\n            context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n            context.setStrokeStyle(strokeColor);\r\n            context.setFillStyle(fillColor);\r\n            if(mountOption.borderWidth > 0){\r\n              context.setLineWidth(mountOption.borderWidth * opts.pix);\r\n              context.stroke();\r\n            }\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'mount':\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - eachSpacing*mountOption.widthRatio/2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || series[i].color\r\n            var strokeColor = item.color || series[i].color\r\n            if (mountOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (mountOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(mountOption.customColor[series[i].linearIndex], mountOption.linearOpacity));\r\n                grd.addColorStop(mountOption.colorStop, hexToRgb(mountOption.customColor[series[i].linearIndex],mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            context.moveTo(startX, opts.height - opts.area[2]);\r\n            context.bezierCurveTo(item.x - item.width/4, opts.height - opts.area[2], item.x - item.width/4, item.y, item.x, item.y);\r\n            context.bezierCurveTo(item.x + item.width/4, item.y, item.x + item.width/4, opts.height - opts.area[2], startX + item.width, opts.height - opts.area[2]);\r\n            context.setStrokeStyle(strokeColor);\r\n            context.setFillStyle(fillColor);\r\n            if(mountOption.borderWidth > 0){\r\n              context.setLineWidth(mountOption.borderWidth * opts.pix);\r\n              context.stroke();\r\n            }\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'sharp':\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            var startX = item.x - eachSpacing*mountOption.widthRatio/2;\r\n            var height = opts.height - item.y - opts.area[2];\r\n            context.beginPath();\r\n            var fillColor = item.color || series[i].color\r\n            var strokeColor = item.color || series[i].color\r\n            if (mountOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n              //透明渐变\r\n              if (mountOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(mountOption.customColor[series[i].linearIndex], mountOption.linearOpacity));\r\n                grd.addColorStop(mountOption.colorStop, hexToRgb(mountOption.customColor[series[i].linearIndex],mountOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            context.moveTo(startX, opts.height - opts.area[2]);\r\n            context.quadraticCurveTo(item.x - 0, opts.height - opts.area[2] - height/4, item.x, item.y);\r\n            context.quadraticCurveTo(item.x + 0, opts.height - opts.area[2] - height/4, startX + item.width, opts.height - opts.area[2])\r\n            context.setStrokeStyle(strokeColor);\r\n            context.setFillStyle(fillColor);\r\n            if(mountOption.borderWidth > 0){\r\n              context.setLineWidth(mountOption.borderWidth * opts.pix);\r\n              context.stroke();\r\n            }\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n    }\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[0]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var points = getMountDataPoints(series, minRange, maxRange, xAxisPoints, eachSpacing, opts, mountOption, process);\r\n    drawMountPointText(points, series, config, context, opts);\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: points,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawBarDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let yAxisPoints = [];\r\n  let eachSpacing = (opts.height - opts.area[0] - opts.area[2])/opts.categories.length;\r\n  for (let i = 0; i < opts.categories.length; i++) {\r\n    yAxisPoints.push(opts.area[0] + eachSpacing / 2 + eachSpacing * i);\r\n  }\r\n  let columnOption = assign({}, {\r\n    type: 'group',\r\n    width: eachSpacing / 2,\r\n    meterBorder: 4,\r\n    meterFillColor: '#FFFFFF',\r\n    barBorderCircle: false,\r\n    barBorderRadius: [],\r\n    seriesGap: 2,\r\n    linearType: 'none',\r\n    linearOpacity: 1,\r\n    customColor: [],\r\n    colorStop: 0,\r\n  }, opts.extra.bar);\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = yAxisPoints.length + 2;\r\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\r\n    drawBarToolTipSplitArea(opts.tooltip.offset.y, opts, config, context, eachSpacing);\r\n  }\r\n  columnOption.customColor = fillCustomColor(columnOption.linearType, columnOption.customColor, series, config);\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.xAxisData.ranges);\r\n    maxRange = ranges.pop();\r\n    minRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    switch (columnOption.type) {\r\n      case 'group':\r\n        var points = getBarDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, process);\r\n        var tooltipPoints = getBarStackDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n        calPoints.push(tooltipPoints);\r\n        points = fixBarData(points, eachSpacing, series.length, seriesIndex, config, opts);\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          //fix issues/I27B1N yyoinge & Joeshu\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            //var startX = item.x - item.width / 2;\r\n            var startX = opts.area[3];\r\n            var startY = item.y - item.width / 2;\r\n            var height = item.height;\r\n            context.beginPath();\r\n            var fillColor = item.color || eachSeries.color\r\n            var strokeColor = item.color || eachSeries.color\r\n            if (columnOption.linearType !== 'none') {\r\n              var grd = context.createLinearGradient(startX, item.y, item.x, item.y);\r\n              //透明渐变\r\n              if (columnOption.linearType == 'opacity') {\r\n                grd.addColorStop(0, hexToRgb(fillColor, columnOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              } else {\r\n                grd.addColorStop(0, hexToRgb(columnOption.customColor[eachSeries.linearIndex], columnOption.linearOpacity));\r\n                grd.addColorStop(columnOption.colorStop, hexToRgb(columnOption.customColor[eachSeries.linearIndex],columnOption.linearOpacity));\r\n                grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n              }\r\n              fillColor = grd\r\n            }\r\n            // 圆角边框\r\n            if ((columnOption.barBorderRadius && columnOption.barBorderRadius.length === 4) || columnOption.barBorderCircle === true) {\r\n              const left = startX;\r\n              const width = item.width;\r\n              const top = item.y - item.width / 2;\r\n              const height = item.height;\r\n              if (columnOption.barBorderCircle) {\r\n                columnOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n              }\r\n              let [r0, r1, r2, r3] = columnOption.barBorderRadius;\r\n              let minRadius = Math.min(width/2,height/2);\r\n              r0 = r0 > minRadius ? minRadius : r0;\r\n              r1 = r1 > minRadius ? minRadius : r1;\r\n              r2 = r2 > minRadius ? minRadius : r2;\r\n              r3 = r3 > minRadius ? minRadius : r3;\r\n              r0 = r0 < 0 ? 0 : r0;\r\n              r1 = r1 < 0 ? 0 : r1;\r\n              r2 = r2 < 0 ? 0 : r2;\r\n              r3 = r3 < 0 ? 0 : r3;\r\n              \r\n              context.arc(left + r3, top + r3, r3, -Math.PI, -Math.PI / 2);\r\n              context.arc(item.x - r0, top + r0, r0, -Math.PI / 2, 0);\r\n              context.arc(item.x - r1, top + width - r1, r1, 0, Math.PI / 2);\r\n              context.arc(left + r2, top + width - r2, r2, Math.PI / 2, Math.PI);\r\n            } else {\r\n              context.moveTo(startX, startY);\r\n              context.lineTo(item.x, startY);\r\n              context.lineTo(item.x, startY + item.width);\r\n              context.lineTo(startX, startY + item.width);\r\n              context.lineTo(startX, startY);\r\n              context.setLineWidth(1)\r\n              context.setStrokeStyle(strokeColor);\r\n            }\r\n            context.setFillStyle(fillColor);\r\n            context.closePath();\r\n            //context.stroke();\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n      case 'stack':\r\n        // 绘制堆叠数据图\r\n        var points = getBarStackDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n        calPoints.push(points);\r\n        points = fixBarStackData(points, eachSpacing, series.length, seriesIndex, config, opts, series);\r\n        for (let i = 0; i < points.length; i++) {\r\n          let item = points[i];\r\n          if (item !== null && i > leftNum && i < rightNum) {\r\n            context.beginPath();\r\n            var fillColor = item.color || eachSeries.color;\r\n            var startX = item.x0;\r\n            context.setFillStyle(fillColor);\r\n            context.moveTo(startX, item.y - item.width/2);\r\n            context.fillRect(startX, item.y - item.width/2, item.height , item.width);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        };\r\n        break;\r\n    }\r\n  });\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.xAxisData.ranges);\r\n      maxRange = ranges.pop();\r\n      minRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      switch (columnOption.type) {\r\n        case 'group':\r\n          var points = getBarDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, process);\r\n          points = fixBarData(points, eachSpacing, series.length, seriesIndex, config, opts);\r\n          drawBarPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n        case 'stack':\r\n          var points = getBarStackDataPoints(data, minRange, maxRange, yAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\r\n          drawBarPointText(points, eachSeries, config, context, opts);\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  return {\r\n    yAxisPoints: yAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawCandleDataPoints(series, seriesMA, opts, config, context) {\r\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\r\n  var candleOption = assign({}, {\r\n    color: {},\r\n    average: {}\r\n  }, opts.extra.candle);\r\n  candleOption.color = assign({}, {\r\n    upLine: '#f04864',\r\n    upFill: '#f04864',\r\n    downLine: '#2fc25b',\r\n    downFill: '#2fc25b'\r\n  }, candleOption.color);\r\n  candleOption.average = assign({}, {\r\n    show: false,\r\n    name: [],\r\n    day: [],\r\n    color: config.color\r\n  }, candleOption.average);\r\n  opts.extra.candle = candleOption;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = xAxisPoints.length + 2;\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\r\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  //画均线\r\n  if (candleOption.average.show || seriesMA) { //Merge pull request !12 from 邱贵翔\r\n    seriesMA.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      var splitPointList = splitPoints(points,eachSeries);\r\n      for (let i = 0; i < splitPointList.length; i++) {\r\n        let points = splitPointList[i];\r\n        context.beginPath();\r\n        context.setStrokeStyle(eachSeries.color);\r\n        context.setLineWidth(1);\r\n        if (points.length === 1) {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\r\n        } else {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          let startPoint = 0;\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              var ctrlPoint = createCurveControlPoints(points, j - 1);\r\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x,\r\n                item.y);\r\n            }\r\n          }\r\n          context.moveTo(points[0].x, points[0].y);\r\n        }\r\n        context.closePath();\r\n        context.stroke();\r\n      }\r\n    });\r\n  }\r\n  //画K线\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    calPoints.push(points);\r\n    var splitPointList = splitPoints(points,eachSeries);\r\n    for (let i = 0; i < splitPointList[0].length; i++) {\r\n      if (i > leftNum && i < rightNum) {\r\n        let item = splitPointList[0][i];\r\n        context.beginPath();\r\n        //如果上涨\r\n        if (data[i][1] - data[i][0] > 0) {\r\n          context.setStrokeStyle(candleOption.color.upLine);\r\n          context.setFillStyle(candleOption.color.upFill);\r\n          context.setLineWidth(1 * opts.pix);\r\n          context.moveTo(item[3].x, item[3].y); //顶点\r\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\r\n          context.lineTo(item[1].x - eachSpacing / 4, item[1].y); //收盘左侧点\r\n          context.lineTo(item[0].x - eachSpacing / 4, item[0].y); //开盘左侧点\r\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\r\n          context.lineTo(item[2].x, item[2].y); //底点\r\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\r\n          context.lineTo(item[0].x + eachSpacing / 4, item[0].y); //开盘右侧点\r\n          context.lineTo(item[1].x + eachSpacing / 4, item[1].y); //收盘右侧点\r\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\r\n          context.moveTo(item[3].x, item[3].y); //顶点\r\n        } else {\r\n          context.setStrokeStyle(candleOption.color.downLine);\r\n          context.setFillStyle(candleOption.color.downFill);\r\n          context.setLineWidth(1 * opts.pix);\r\n          context.moveTo(item[3].x, item[3].y); //顶点\r\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\r\n          context.lineTo(item[0].x - eachSpacing / 4, item[0].y); //开盘左侧点\r\n          context.lineTo(item[1].x - eachSpacing / 4, item[1].y); //收盘左侧点\r\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\r\n          context.lineTo(item[2].x, item[2].y); //底点\r\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\r\n          context.lineTo(item[1].x + eachSpacing / 4, item[1].y); //收盘右侧点\r\n          context.lineTo(item[0].x + eachSpacing / 4, item[0].y); //开盘右侧点\r\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\r\n          context.moveTo(item[3].x, item[3].y); //顶点\r\n        }\r\n        context.closePath();\r\n        context.fill();\r\n        context.stroke();\r\n      }\r\n    }\r\n  });\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawAreaDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var areaOption = assign({}, {\r\n    type: 'straight',\r\n    opacity: 0.2,\r\n    addLine: false,\r\n    width: 2,\r\n    gradient: false\r\n  }, opts.extra.area);\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let endY = opts.height - opts.area[2];\r\n  let calPoints = [];\r\n  context.save();\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    let data = eachSeries.data;\r\n    let points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    calPoints.push(points);\r\n    let splitPointList = splitPoints(points,eachSeries);\r\n    for (let i = 0; i < splitPointList.length; i++) {\r\n      let points = splitPointList[i];\r\n      // 绘制区域数\r\n      context.beginPath();\r\n      context.setStrokeStyle(hexToRgb(eachSeries.color, areaOption.opacity));\r\n      if (areaOption.gradient) {\r\n        let gradient = context.createLinearGradient(0, opts.area[0], 0, opts.height - opts.area[2]);\r\n        gradient.addColorStop('0', hexToRgb(eachSeries.color, areaOption.opacity));\r\n        gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\r\n        context.setFillStyle(gradient);\r\n      } else {\r\n        context.setFillStyle(hexToRgb(eachSeries.color, areaOption.opacity));\r\n      }\r\n      context.setLineWidth(areaOption.width * opts.pix);\r\n      if (points.length > 1) {\r\n        let firstPoint = points[0];\r\n        let lastPoint = points[points.length - 1];\r\n        context.moveTo(firstPoint.x, firstPoint.y);\r\n        let startPoint = 0;\r\n        if (areaOption.type === 'curve') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              let ctrlPoint = createCurveControlPoints(points, j - 1);\r\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\r\n            }\r\n          };\r\n        } \r\n        if (areaOption.type === 'straight') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              context.lineTo(item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        if (areaOption.type === 'step') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              context.lineTo(item.x, points[j - 1].y);\r\n              context.lineTo(item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        context.lineTo(lastPoint.x, endY);\r\n        context.lineTo(firstPoint.x, endY);\r\n        context.lineTo(firstPoint.x, firstPoint.y);\r\n      } else {\r\n        let item = points[0];\r\n        context.moveTo(item.x - eachSpacing / 2, item.y);\r\n        context.lineTo(item.x + eachSpacing / 2, item.y);\r\n        context.lineTo(item.x + eachSpacing / 2, endY);\r\n        context.lineTo(item.x - eachSpacing / 2, endY);\r\n        context.moveTo(item.x - eachSpacing / 2, item.y);\r\n      }\r\n      context.closePath();\r\n      context.fill();\r\n      //画连线\r\n      if (areaOption.addLine) {\r\n        if (eachSeries.lineType == 'dash') {\r\n          let dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\r\n          dashLength *= opts.pix;\r\n          context.setLineDash([dashLength, dashLength]);\r\n        }\r\n        context.beginPath();\r\n        context.setStrokeStyle(eachSeries.color);\r\n        context.setLineWidth(areaOption.width * opts.pix);\r\n        if (points.length === 1) {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\r\n        } else {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          let startPoint = 0;\r\n          if (areaOption.type === 'curve') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                let ctrlPoint = createCurveControlPoints(points, j - 1);\r\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\r\n              }\r\n            };\r\n          }\r\n          if (areaOption.type === 'straight') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                context.lineTo(item.x, item.y);\r\n              }\r\n            };\r\n          }\r\n          if (areaOption.type === 'step') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                context.lineTo(item.x, points[j - 1].y);\r\n                context.lineTo(item.x, item.y);\r\n              }\r\n            };\r\n          }\r\n          context.moveTo(points[0].x, points[0].y);\r\n        }\r\n        context.stroke();\r\n        context.setLineDash([]);\r\n      }\r\n    }\r\n    //画点\r\n    if (opts.dataPointShape !== false) {\r\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\r\n    }\r\n  });\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      drawPointText(points, eachSeries, config, context, opts);\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawScatterDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var scatterOption = assign({}, {\r\n    type: 'circle'\r\n  }, opts.extra.scatter);\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  var calPoints = [];\r\n  context.save();\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    context.beginPath();\r\n    context.setStrokeStyle(eachSeries.color);\r\n    context.setFillStyle(eachSeries.color);\r\n    context.setLineWidth(1 * opts.pix);\r\n    var shape = eachSeries.pointShape;\r\n    if (shape === 'diamond') {\r\n      points.forEach(function(item, index) {\r\n        if (item !== null) {\r\n          context.moveTo(item.x, item.y - 4.5);\r\n          context.lineTo(item.x - 4.5, item.y);\r\n          context.lineTo(item.x, item.y + 4.5);\r\n          context.lineTo(item.x + 4.5, item.y);\r\n          context.lineTo(item.x, item.y - 4.5);\r\n        }\r\n      });\r\n    } else if (shape === 'circle') {\r\n      points.forEach(function(item, index) {\r\n        if (item !== null) {\r\n          context.moveTo(item.x + 2.5 * opts.pix, item.y);\r\n          context.arc(item.x, item.y, 3 * opts.pix, 0, 2 * Math.PI, false);\r\n        }\r\n      });\r\n    } else if (shape === 'square') {\r\n      points.forEach(function(item, index) {\r\n        if (item !== null) {\r\n          context.moveTo(item.x - 3.5, item.y - 3.5);\r\n          context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\r\n        }\r\n      });\r\n    } else if (shape === 'triangle') {\r\n      points.forEach(function(item, index) {\r\n        if (item !== null) {\r\n          context.moveTo(item.x, item.y - 4.5);\r\n          context.lineTo(item.x - 4.5, item.y + 4.5);\r\n          context.lineTo(item.x + 4.5, item.y + 4.5);\r\n          context.lineTo(item.x, item.y - 4.5);\r\n        }\r\n      });\r\n    } else if (shape === 'triangle') {\r\n      return;\r\n    }\r\n    context.closePath();\r\n    context.fill();\r\n    context.stroke();\r\n  });\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      drawPointText(points, eachSeries, config, context, opts);\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawBubbleDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var bubbleOption = assign({}, {\r\n    opacity: 1,\r\n    border:2\r\n  }, opts.extra.bubble);\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  var calPoints = [];\r\n  context.save();\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    context.beginPath();\r\n    context.setStrokeStyle(eachSeries.color);\r\n    context.setLineWidth(bubbleOption.border * opts.pix);\r\n    context.setFillStyle(hexToRgb(eachSeries.color, bubbleOption.opacity));\r\n    points.forEach(function(item, index) {\r\n      context.moveTo(item.x + item.r, item.y);\r\n      context.arc(item.x, item.y, item.r * opts.pix, 0, 2 * Math.PI, false);\r\n    });\r\n    context.closePath();\r\n    context.fill();\r\n    context.stroke();\r\n    \r\n    if (opts.dataLabel !== false && process === 1) {\r\n      points.forEach(function(item, index) {\r\n        context.beginPath();\r\n        var fontSize = series.textSize * opts.pix || config.fontSize;\r\n        context.setFontSize(fontSize);\r\n        context.setFillStyle(series.textColor || \"#FFFFFF\");\r\n        context.setTextAlign('center');\r\n        context.fillText(String(item.t), item.x, item.y + fontSize/2);\r\n        context.closePath();\r\n        context.stroke();\r\n        context.setTextAlign('left');\r\n      });\r\n    }\r\n  });\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawLineDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var lineOption = assign({}, {\r\n    type: 'straight',\r\n    width: 2\r\n  }, opts.extra.line);\r\n  lineOption.width *= opts.pix;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  var calPoints = [];\r\n  context.save();\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    calPoints.push(points);\r\n    var splitPointList = splitPoints(points,eachSeries);\r\n    if (eachSeries.lineType == 'dash') {\r\n      let dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\r\n      dashLength *= opts.pix;\r\n      context.setLineDash([dashLength, dashLength]);\r\n    }\r\n    context.beginPath();\r\n    context.setStrokeStyle(eachSeries.color);\r\n    context.setLineWidth(lineOption.width);\r\n    splitPointList.forEach(function(points, index) {\r\n      if (points.length === 1) {\r\n        context.moveTo(points[0].x, points[0].y);\r\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\r\n      } else {\r\n        context.moveTo(points[0].x, points[0].y);\r\n        let startPoint = 0;\r\n        if (lineOption.type === 'curve') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              var ctrlPoint = createCurveControlPoints(points, j - 1);\r\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        if (lineOption.type === 'straight') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              context.lineTo(item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        if (lineOption.type === 'step') {\r\n          for (let j = 0; j < points.length; j++) {\r\n            let item = points[j];\r\n            if (startPoint == 0 && item.x > leftSpace) {\r\n              context.moveTo(item.x, item.y);\r\n              startPoint = 1;\r\n            }\r\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n              context.lineTo(item.x, points[j - 1].y);\r\n              context.lineTo(item.x, item.y);\r\n            }\r\n          };\r\n        }\r\n        context.moveTo(points[0].x, points[0].y);\r\n      }\r\n    });\r\n    context.stroke();\r\n    context.setLineDash([]);\r\n    if (opts.dataPointShape !== false) {\r\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\r\n    }\r\n  });\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      drawPointText(points, eachSeries, config, context, opts);\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing\r\n  };\r\n}\r\n\r\nfunction drawMixDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  let columnOption = assign({}, {\r\n    width: eachSpacing / 2,\r\n    barBorderCircle: false,\r\n    barBorderRadius: [],\r\n    seriesGap: 2,\r\n    linearType: 'none',\r\n    linearOpacity: 1,\r\n    customColor: [],\r\n    colorStop: 0,\r\n  }, opts.extra.mix.column);\r\n  let areaOption = assign({}, {\r\n    opacity: 0.2,\r\n    gradient: false\r\n  }, opts.extra.mix.area);\r\n  let endY = opts.height - opts.area[2];\r\n  let calPoints = [];\r\n  var columnIndex = 0;\r\n  var columnLength = 0;\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    if (eachSeries.type == 'column') {\r\n      columnLength += 1;\r\n    }\r\n  });\r\n  context.save();\r\n  let leftNum = -2;\r\n  let rightNum = xAxisPoints.length + 2;\r\n  let leftSpace = 0;\r\n  let rightSpace = opts.width + eachSpacing;\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\r\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\r\n    leftSpace = -opts._scrollDistance_ - eachSpacing * 2 + opts.area[3];\r\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\r\n  }\r\n  columnOption.customColor = fillCustomColor(columnOption.linearType, columnOption.customColor, series, config);\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    let ranges, minRange, maxRange;\r\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n    minRange = ranges.pop();\r\n    maxRange = ranges.shift();\r\n    var data = eachSeries.data;\r\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n    calPoints.push(points);\r\n    // 绘制柱状数据图\r\n    if (eachSeries.type == 'column') {\r\n      points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\r\n      for (let i = 0; i < points.length; i++) {\r\n        let item = points[i];\r\n        if (item !== null && i > leftNum && i < rightNum) {\r\n          var startX = item.x - item.width / 2;\r\n          var height = opts.height - item.y - opts.area[2];\r\n          context.beginPath();\r\n          var fillColor = item.color || eachSeries.color\r\n          var strokeColor = item.color || eachSeries.color\r\n          if (columnOption.linearType !== 'none') {\r\n            var grd = context.createLinearGradient(startX, item.y, startX, opts.height - opts.area[2]);\r\n            //透明渐变\r\n            if (columnOption.linearType == 'opacity') {\r\n              grd.addColorStop(0, hexToRgb(fillColor, columnOption.linearOpacity));\r\n              grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n            } else {\r\n              grd.addColorStop(0, hexToRgb(columnOption.customColor[eachSeries.linearIndex], columnOption.linearOpacity));\r\n              grd.addColorStop(columnOption.colorStop, hexToRgb(columnOption.customColor[eachSeries.linearIndex], columnOption.linearOpacity));\r\n              grd.addColorStop(1, hexToRgb(fillColor, 1));\r\n            }\r\n            fillColor = grd\r\n          }\r\n          // 圆角边框\r\n          if ((columnOption.barBorderRadius && columnOption.barBorderRadius.length === 4) || columnOption.barBorderCircle) {\r\n            const left = startX;\r\n            const top = item.y;\r\n            const width = item.width;\r\n            const height = opts.height - opts.area[2] - item.y;\r\n            if (columnOption.barBorderCircle) {\r\n              columnOption.barBorderRadius = [width / 2, width / 2, 0, 0];\r\n            }\r\n            let [r0, r1, r2, r3] = columnOption.barBorderRadius;\r\n            let minRadius = Math.min(width/2,height/2);\r\n            r0 = r0 > minRadius ? minRadius : r0;\r\n            r1 = r1 > minRadius ? minRadius : r1;\r\n            r2 = r2 > minRadius ? minRadius : r2;\r\n            r3 = r3 > minRadius ? minRadius : r3;\r\n            r0 = r0 < 0 ? 0 : r0;\r\n            r1 = r1 < 0 ? 0 : r1;\r\n            r2 = r2 < 0 ? 0 : r2;\r\n            r3 = r3 < 0 ? 0 : r3;\r\n            context.arc(left + r0, top + r0, r0, -Math.PI, -Math.PI / 2);\r\n            context.arc(left + width - r1, top + r1, r1, -Math.PI / 2, 0);\r\n            context.arc(left + width - r2, top + height - r2, r2, 0, Math.PI / 2);\r\n            context.arc(left + r3, top + height - r3, r3, Math.PI / 2, Math.PI);\r\n          } else {\r\n            context.moveTo(startX, item.y);\r\n            context.lineTo(startX + item.width, item.y);\r\n            context.lineTo(startX + item.width, opts.height - opts.area[2]);\r\n            context.lineTo(startX, opts.height - opts.area[2]);\r\n            context.lineTo(startX, item.y);\r\n            context.setLineWidth(1)\r\n            context.setStrokeStyle(strokeColor);\r\n          }\r\n          context.setFillStyle(fillColor);\r\n          context.closePath();\r\n          context.fill();\r\n        }\r\n      }\r\n      columnIndex += 1;\r\n    }\r\n    //绘制区域图数据\r\n    if (eachSeries.type == 'area') {\r\n      let splitPointList = splitPoints(points,eachSeries);\r\n      for (let i = 0; i < splitPointList.length; i++) {\r\n        let points = splitPointList[i];\r\n        // 绘制区域数据\r\n        context.beginPath();\r\n        context.setStrokeStyle(eachSeries.color);\r\n        context.setStrokeStyle(hexToRgb(eachSeries.color, areaOption.opacity));\r\n        if (areaOption.gradient) {\r\n          let gradient = context.createLinearGradient(0, opts.area[0], 0, opts.height - opts.area[2]);\r\n          gradient.addColorStop('0', hexToRgb(eachSeries.color, areaOption.opacity));\r\n          gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\r\n          context.setFillStyle(gradient);\r\n        } else {\r\n          context.setFillStyle(hexToRgb(eachSeries.color, areaOption.opacity));\r\n        }\r\n        context.setLineWidth(2 * opts.pix);\r\n        if (points.length > 1) {\r\n          var firstPoint = points[0];\r\n          let lastPoint = points[points.length - 1];\r\n          context.moveTo(firstPoint.x, firstPoint.y);\r\n          let startPoint = 0;\r\n          if (eachSeries.style === 'curve') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                var ctrlPoint = createCurveControlPoints(points, j - 1);\r\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\r\n              }\r\n            };\r\n          } else {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                context.lineTo(item.x, item.y);\r\n              }\r\n            };\r\n          }\r\n          context.lineTo(lastPoint.x, endY);\r\n          context.lineTo(firstPoint.x, endY);\r\n          context.lineTo(firstPoint.x, firstPoint.y);\r\n        } else {\r\n          let item = points[0];\r\n          context.moveTo(item.x - eachSpacing / 2, item.y);\r\n          context.lineTo(item.x + eachSpacing / 2, item.y);\r\n          context.lineTo(item.x + eachSpacing / 2, endY);\r\n          context.lineTo(item.x - eachSpacing / 2, endY);\r\n          context.moveTo(item.x - eachSpacing / 2, item.y);\r\n        }\r\n        context.closePath();\r\n        context.fill();\r\n      }\r\n    }\r\n    // 绘制折线数据图\r\n    if (eachSeries.type == 'line') {\r\n      var splitPointList = splitPoints(points,eachSeries);\r\n      splitPointList.forEach(function(points, index) {\r\n        if (eachSeries.lineType == 'dash') {\r\n          let dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\r\n          dashLength *= opts.pix;\r\n          context.setLineDash([dashLength, dashLength]);\r\n        }\r\n        context.beginPath();\r\n        context.setStrokeStyle(eachSeries.color);\r\n        context.setLineWidth(2 * opts.pix);\r\n        if (points.length === 1) {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\r\n        } else {\r\n          context.moveTo(points[0].x, points[0].y);\r\n          let startPoint = 0;\r\n          if (eachSeries.style == 'curve') {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                var ctrlPoint = createCurveControlPoints(points, j - 1);\r\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y,\r\n                  item.x, item.y);\r\n              }\r\n            }\r\n          } else {\r\n            for (let j = 0; j < points.length; j++) {\r\n              let item = points[j];\r\n              if (startPoint == 0 && item.x > leftSpace) {\r\n                context.moveTo(item.x, item.y);\r\n                startPoint = 1;\r\n              }\r\n              if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\r\n                context.lineTo(item.x, item.y);\r\n              }\r\n            }\r\n          }\r\n          context.moveTo(points[0].x, points[0].y);\r\n        }\r\n        context.stroke();\r\n        context.setLineDash([]);\r\n      });\r\n    }\r\n    // 绘制点数据图\r\n    if (eachSeries.type == 'point') {\r\n      eachSeries.addPoint = true;\r\n    }\r\n    if (eachSeries.addPoint == true && eachSeries.type !== 'column') {\r\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\r\n    }\r\n  });\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    var columnIndex = 0;\r\n    series.forEach(function(eachSeries, seriesIndex) {\r\n      let ranges, minRange, maxRange;\r\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\r\n      minRange = ranges.pop();\r\n      maxRange = ranges.shift();\r\n      var data = eachSeries.data;\r\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\r\n      if (eachSeries.type !== 'column') {\r\n        drawPointText(points, eachSeries, config, context, opts);\r\n      } else {\r\n        points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\r\n        drawPointText(points, eachSeries, config, context, opts);\r\n        columnIndex += 1;\r\n      }\r\n    });\r\n  }\r\n  context.restore();\r\n  return {\r\n    xAxisPoints: xAxisPoints,\r\n    calPoints: calPoints,\r\n    eachSpacing: eachSpacing,\r\n  }\r\n}\r\n\r\n\r\nfunction drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints) {\r\n  var toolTipOption = opts.extra.tooltip || {};\r\n  if (toolTipOption.horizentalLine && opts.tooltip && process === 1 && (opts.type == 'line' || opts.type == 'area' || opts.type == 'column' || opts.type == 'mount' || opts.type == 'candle' || opts.type == 'mix')) {\r\n    drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints)\r\n  }\r\n  context.save();\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n  }\r\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\r\n    drawToolTip(opts.tooltip.textList, opts.tooltip.offset, opts, config, context, eachSpacing, xAxisPoints);\r\n  }\r\n  context.restore();\r\n\r\n}\r\n\r\nfunction drawXAxis(categories, opts, config, context) {\r\n\r\n  let xAxisData = opts.chartData.xAxisData,\r\n    xAxisPoints = xAxisData.xAxisPoints,\r\n    startX = xAxisData.startX,\r\n    endX = xAxisData.endX,\r\n    eachSpacing = xAxisData.eachSpacing;\r\n  var boundaryGap = 'center';\r\n  if (opts.type == 'bar' || opts.type == 'line' || opts.type == 'area'|| opts.type == 'scatter' || opts.type == 'bubble') {\r\n    boundaryGap = opts.xAxis.boundaryGap;\r\n  }\r\n  var startY = opts.height - opts.area[2];\r\n  var endY = opts.area[0];\r\n\r\n  //绘制滚动条\r\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\r\n    var scrollY = opts.height - opts.area[2] + config.xAxisHeight;\r\n    var scrollScreenWidth = endX - startX;\r\n    var scrollTotalWidth = eachSpacing * (xAxisPoints.length - 1);\r\n    if(opts.type == 'mount' && opts.extra && opts.extra.mount && opts.extra.mount.widthRatio && opts.extra.mount.widthRatio > 1){\r\n      if(opts.extra.mount.widthRatio>2) opts.extra.mount.widthRatio = 2\r\n      scrollTotalWidth += (opts.extra.mount.widthRatio - 1)*eachSpacing;\r\n    }\r\n    var scrollWidth = scrollScreenWidth * scrollScreenWidth / scrollTotalWidth;\r\n    var scrollLeft = 0;\r\n    if (opts._scrollDistance_) {\r\n      scrollLeft = -opts._scrollDistance_ * (scrollScreenWidth) / scrollTotalWidth;\r\n    }\r\n    context.beginPath();\r\n    context.setLineCap('round');\r\n    context.setLineWidth(6 * opts.pix);\r\n    context.setStrokeStyle(opts.xAxis.scrollBackgroundColor || \"#EFEBEF\");\r\n    context.moveTo(startX, scrollY);\r\n    context.lineTo(endX, scrollY);\r\n    context.stroke();\r\n    context.closePath();\r\n    context.beginPath();\r\n    context.setLineCap('round');\r\n    context.setLineWidth(6 * opts.pix);\r\n    context.setStrokeStyle(opts.xAxis.scrollColor || \"#A6A6A6\");\r\n    context.moveTo(startX + scrollLeft, scrollY);\r\n    context.lineTo(startX + scrollLeft + scrollWidth, scrollY);\r\n    context.stroke();\r\n    context.closePath();\r\n    context.setLineCap('butt');\r\n  }\r\n  context.save();\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n  }\r\n  //绘制X轴刻度线\r\n  if (opts.xAxis.calibration === true) {\r\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\r\n    context.setLineCap('butt');\r\n    context.setLineWidth(1 * opts.pix);\r\n    xAxisPoints.forEach(function(item, index) {\r\n      if (index > 0) {\r\n        context.beginPath();\r\n        context.moveTo(item - eachSpacing / 2, startY);\r\n        context.lineTo(item - eachSpacing / 2, startY + 3 * opts.pix);\r\n        context.closePath();\r\n        context.stroke();\r\n      }\r\n    });\r\n  }\r\n  //绘制X轴网格\r\n  if (opts.xAxis.disableGrid !== true) {\r\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\r\n    context.setLineCap('butt');\r\n    context.setLineWidth(1 * opts.pix);\r\n    if (opts.xAxis.gridType == 'dash') {\r\n      context.setLineDash([opts.xAxis.dashLength * opts.pix, opts.xAxis.dashLength * opts.pix]);\r\n    }\r\n    opts.xAxis.gridEval = opts.xAxis.gridEval || 1;\r\n    xAxisPoints.forEach(function(item, index) {\r\n      if (index % opts.xAxis.gridEval == 0) {\r\n        context.beginPath();\r\n        context.moveTo(item, startY);\r\n        context.lineTo(item, endY);\r\n        context.stroke();\r\n      }\r\n    });\r\n    context.setLineDash([]);\r\n  }\r\n  //绘制X轴文案\r\n  if (opts.xAxis.disabled !== true) {\r\n    // 对X轴列表做抽稀处理\r\n    //默认全部显示X轴标签\r\n    let maxXAxisListLength = categories.length;\r\n    //如果设置了X轴单屏数量\r\n    if (opts.xAxis.labelCount) {\r\n      //如果设置X轴密度\r\n      if (opts.xAxis.itemCount) {\r\n        maxXAxisListLength = Math.ceil(categories.length / opts.xAxis.itemCount * opts.xAxis.labelCount);\r\n      } else {\r\n        maxXAxisListLength = opts.xAxis.labelCount;\r\n      }\r\n      maxXAxisListLength -= 1;\r\n    }\r\n\r\n    let ratio = Math.ceil(categories.length / maxXAxisListLength);\r\n\r\n    let newCategories = [];\r\n    let cgLength = categories.length;\r\n    for (let i = 0; i < cgLength; i++) {\r\n      if (i % ratio !== 0) {\r\n        newCategories.push(\"\");\r\n      } else {\r\n        newCategories.push(categories[i]);\r\n      }\r\n    }\r\n    newCategories[cgLength - 1] = categories[cgLength - 1];\r\n    var xAxisFontSize = opts.xAxis.fontSize * opts.pix || config.fontSize;\r\n    if (config._xAxisTextAngle_ === 0) {\r\n      newCategories.forEach(function(item, index) {\r\n        var xitem = opts.xAxis.formatter ? opts.xAxis.formatter(item,index,opts) : item;\r\n        var offset = -measureText(String(xitem), xAxisFontSize, context) / 2;\r\n        if (boundaryGap == 'center') {\r\n          offset += eachSpacing / 2;\r\n        }\r\n        var scrollHeight = 0;\r\n        if (opts.xAxis.scrollShow) {\r\n          scrollHeight = 6 * opts.pix;\r\n        }\r\n        context.beginPath();\r\n        context.setFontSize(xAxisFontSize);\r\n        context.setFillStyle(opts.xAxis.fontColor || opts.fontColor);\r\n        context.fillText(String(xitem), xAxisPoints[index] + offset, startY + xAxisFontSize + (config.xAxisHeight - scrollHeight - xAxisFontSize) / 2);\r\n        context.closePath();\r\n        context.stroke();\r\n      });\r\n    } else {\r\n      newCategories.forEach(function(item, index) {\r\n        var xitem = opts.xAxis.formatter ? opts.xAxis.formatter(item) : item;\r\n        context.save();\r\n        context.beginPath();\r\n        context.setFontSize(xAxisFontSize);\r\n        context.setFillStyle(opts.xAxis.fontColor || opts.fontColor);\r\n        var textWidth = measureText(String(xitem), xAxisFontSize, context);\r\n        var offsetX = xAxisPoints[index];\r\n        if (boundaryGap == 'center') {\r\n          offsetX = xAxisPoints[index] + eachSpacing / 2;\r\n        }\r\n        var scrollHeight = 0;\r\n        if (opts.xAxis.scrollShow) {\r\n          scrollHeight = 6 * opts.pix;\r\n        }\r\n        var offsetY = startY + 6 * opts.pix + xAxisFontSize - xAxisFontSize * Math.abs(Math.sin(config._xAxisTextAngle_));\r\n        if(opts.xAxis.rotateAngle < 0){\r\n          offsetX -= xAxisFontSize / 2;\r\n          textWidth = 0;\r\n        }else{\r\n          offsetX += xAxisFontSize / 2;\r\n          textWidth = -textWidth;\r\n        }\r\n        context.translate(offsetX, offsetY);\r\n        context.rotate(-1 * config._xAxisTextAngle_);\r\n        context.fillText(String(xitem), textWidth , 0 );\r\n        context.closePath();\r\n        context.stroke();\r\n        context.restore();\r\n      });\r\n    }\r\n  }\r\n  context.restore();\r\n  //绘制X轴轴线\r\n  if (opts.xAxis.axisLine) {\r\n    context.beginPath();\r\n    context.setStrokeStyle(opts.xAxis.axisLineColor);\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.moveTo(startX, opts.height - opts.area[2]);\r\n    context.lineTo(endX, opts.height - opts.area[2]);\r\n    context.stroke();\r\n  }\r\n}\r\n\r\nfunction drawYAxisGrid(categories, opts, config, context) {\r\n  if (opts.yAxis.disableGrid === true) {\r\n    return;\r\n  }\r\n  let spacingValid = opts.height - opts.area[0] - opts.area[2];\r\n  let eachSpacing = spacingValid / opts.yAxis.splitNumber;\r\n  let startX = opts.area[3];\r\n  let xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\r\n    xAxiseachSpacing = opts.chartData.xAxisData.eachSpacing;\r\n  let TotalWidth = xAxiseachSpacing * (xAxisPoints.length - 1);\r\n  if(opts.type == 'mount' && opts.extra && opts.extra.mount && opts.extra.mount.widthRatio && opts.extra.mount.widthRatio > 1 ){\r\n    if(opts.extra.mount.widthRatio>2) opts.extra.mount.widthRatio = 2\r\n    TotalWidth += (opts.extra.mount.widthRatio - 1)*xAxiseachSpacing;\r\n  }\r\n  let endX = startX + TotalWidth;\r\n  let points = [];\r\n  let startY = 1\r\n  if (opts.xAxis.axisLine === false) {\r\n    startY = 0\r\n  }\r\n  for (let i = startY; i < opts.yAxis.splitNumber + 1; i++) {\r\n    points.push(opts.height - opts.area[2] - eachSpacing * i);\r\n  }\r\n  context.save();\r\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\r\n    context.translate(opts._scrollDistance_, 0);\r\n  }\r\n  if (opts.yAxis.gridType == 'dash') {\r\n    context.setLineDash([opts.yAxis.dashLength * opts.pix, opts.yAxis.dashLength * opts.pix]);\r\n  }\r\n  context.setStrokeStyle(opts.yAxis.gridColor);\r\n  context.setLineWidth(1 * opts.pix);\r\n  points.forEach(function(item, index) {\r\n    context.beginPath();\r\n    context.moveTo(startX, item);\r\n    context.lineTo(endX, item);\r\n    context.stroke();\r\n  });\r\n  context.setLineDash([]);\r\n  context.restore();\r\n}\r\n\r\nfunction drawYAxis(series, opts, config, context) {\r\n  if (opts.yAxis.disabled === true) {\r\n    return;\r\n  }\r\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\r\n  var eachSpacing = spacingValid / opts.yAxis.splitNumber;\r\n  var startX = opts.area[3];\r\n  var endX = opts.width - opts.area[1];\r\n  var endY = opts.height - opts.area[2];\r\n  var fillEndY = endY + config.xAxisHeight;\r\n  if (opts.xAxis.scrollShow) {\r\n    fillEndY -= 3 * opts.pix;\r\n  }\r\n  if (opts.xAxis.rotateLabel) {\r\n    fillEndY = opts.height - opts.area[2] + opts.fontSize * opts.pix / 2;\r\n  }\r\n  // set YAxis background\r\n  context.beginPath();\r\n  context.setFillStyle(opts.background);\r\n  if (opts.enableScroll == true && opts.xAxis.scrollPosition && opts.xAxis.scrollPosition !== 'left') {\r\n    context.fillRect(0, 0, startX, fillEndY);\r\n  }\r\n  if (opts.enableScroll == true && opts.xAxis.scrollPosition && opts.xAxis.scrollPosition !== 'right') {\r\n    context.fillRect(endX, 0, opts.width, fillEndY);\r\n  }\r\n  context.closePath();\r\n  context.stroke();\r\n  \r\n  let tStartLeft = opts.area[3];\r\n  let tStartRight = opts.width - opts.area[1];\r\n  let tStartCenter = opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2;\r\n  if (opts.yAxis.data) {\r\n    for (let i = 0; i < opts.yAxis.data.length; i++) {\r\n      let yData = opts.yAxis.data[i];\r\n      var points = [];\r\n      if(yData.type === 'categories'){\r\n        for (let i = 0; i <= yData.categories.length; i++) {\r\n          points.push(opts.area[0] + spacingValid / yData.categories.length / 2 + spacingValid / yData.categories.length * i);\r\n        }\r\n      }else{\r\n        for (let i = 0; i <= opts.yAxis.splitNumber; i++) {\r\n          points.push(opts.area[0] + eachSpacing * i);\r\n        }\r\n      }\r\n      if (yData.disabled !== true) {\r\n        let rangesFormat = opts.chartData.yAxisData.rangesFormat[i];\r\n        let yAxisFontSize = yData.fontSize ? yData.fontSize * opts.pix : config.fontSize;\r\n        let yAxisWidth = opts.chartData.yAxisData.yAxisWidth[i];\r\n        let textAlign = yData.textAlign || \"right\";\r\n        //画Y轴刻度及文案\r\n        rangesFormat.forEach(function(item, index) {\r\n          var pos = points[index];\r\n          context.beginPath();\r\n          context.setFontSize(yAxisFontSize);\r\n          context.setLineWidth(1 * opts.pix);\r\n          context.setStrokeStyle(yData.axisLineColor || '#cccccc');\r\n          context.setFillStyle(yData.fontColor || opts.fontColor);\r\n          let tmpstrat = 0;\r\n          let gapwidth = 4 * opts.pix;\r\n          if (yAxisWidth.position == 'left') {\r\n            //画刻度线\r\n            if (yData.calibration == true) {\r\n              context.moveTo(tStartLeft, pos);\r\n              context.lineTo(tStartLeft - 3 * opts.pix, pos);\r\n              gapwidth += 3 * opts.pix;\r\n            }\r\n            //画文字\r\n            switch (textAlign) {\r\n              case \"left\":\r\n                context.setTextAlign('left');\r\n                tmpstrat = tStartLeft - yAxisWidth.width\r\n                break;\r\n              case \"right\":\r\n                context.setTextAlign('right');\r\n                tmpstrat = tStartLeft - gapwidth\r\n                break;\r\n              default:\r\n                context.setTextAlign('center');\r\n                tmpstrat = tStartLeft - yAxisWidth.width / 2\r\n            }\r\n            context.fillText(String(item), tmpstrat, pos + yAxisFontSize / 2 - 3 * opts.pix);\r\n\r\n          } else if (yAxisWidth.position == 'right') {\r\n            //画刻度线\r\n            if (yData.calibration == true) {\r\n              context.moveTo(tStartRight, pos);\r\n              context.lineTo(tStartRight + 3 * opts.pix, pos);\r\n              gapwidth += 3 * opts.pix;\r\n            }\r\n            switch (textAlign) {\r\n              case \"left\":\r\n                context.setTextAlign('left');\r\n                tmpstrat = tStartRight + gapwidth\r\n                break;\r\n              case \"right\":\r\n                context.setTextAlign('right');\r\n                tmpstrat = tStartRight + yAxisWidth.width\r\n                break;\r\n              default:\r\n                context.setTextAlign('center');\r\n                tmpstrat = tStartRight + yAxisWidth.width / 2\r\n            }\r\n            context.fillText(String(item), tmpstrat, pos + yAxisFontSize / 2 - 3 * opts.pix);\r\n          } else if (yAxisWidth.position == 'center') {\r\n            //画刻度线\r\n            if (yData.calibration == true) {\r\n              context.moveTo(tStartCenter, pos);\r\n              context.lineTo(tStartCenter - 3 * opts.pix, pos);\r\n              gapwidth += 3 * opts.pix;\r\n            }\r\n            //画文字\r\n            switch (textAlign) {\r\n              case \"left\":\r\n                context.setTextAlign('left');\r\n                tmpstrat = tStartCenter - yAxisWidth.width\r\n                break;\r\n              case \"right\":\r\n                context.setTextAlign('right');\r\n                tmpstrat = tStartCenter - gapwidth\r\n                break;\r\n              default:\r\n                context.setTextAlign('center');\r\n                tmpstrat = tStartCenter - yAxisWidth.width / 2\r\n            }\r\n            context.fillText(String(item), tmpstrat, pos + yAxisFontSize / 2 - 3 * opts.pix);\r\n          }\r\n          context.closePath();\r\n          context.stroke();\r\n          context.setTextAlign('left');\r\n        });\r\n        //画Y轴轴线\r\n        if (yData.axisLine !== false) {\r\n          context.beginPath();\r\n          context.setStrokeStyle(yData.axisLineColor || '#cccccc');\r\n          context.setLineWidth(1 * opts.pix);\r\n          if (yAxisWidth.position == 'left') {\r\n            context.moveTo(tStartLeft, opts.height - opts.area[2]);\r\n            context.lineTo(tStartLeft, opts.area[0]);\r\n          } else if (yAxisWidth.position == 'right') {\r\n            context.moveTo(tStartRight, opts.height - opts.area[2]);\r\n            context.lineTo(tStartRight, opts.area[0]);\r\n          } else if (yAxisWidth.position == 'center') {\r\n            context.moveTo(tStartCenter, opts.height - opts.area[2]);\r\n            context.lineTo(tStartCenter, opts.area[0]);\r\n          }\r\n          context.stroke();\r\n        }\r\n        //画Y轴标题\r\n        if (opts.yAxis.showTitle) {\r\n          let titleFontSize = yData.titleFontSize * opts.pix || config.fontSize;\r\n          let title = yData.title;\r\n          context.beginPath();\r\n          context.setFontSize(titleFontSize);\r\n          context.setFillStyle(yData.titleFontColor || opts.fontColor);\r\n          if (yAxisWidth.position == 'left') {\r\n            context.fillText(title, tStartLeft - measureText(title, titleFontSize, context) / 2 + (yData.titleOffsetX || 0), opts.area[0] - (10 - (yData.titleOffsetY || 0)) * opts.pix);\r\n          } else if (yAxisWidth.position == 'right') {\r\n            context.fillText(title, tStartRight - measureText(title, titleFontSize, context) / 2 + (yData.titleOffsetX || 0), opts.area[0] - (10 - (yData.titleOffsetY || 0)) * opts.pix);\r\n          } else if (yAxisWidth.position == 'center') {\r\n            context.fillText(title, tStartCenter - measureText(title, titleFontSize, context) / 2 + (yData.titleOffsetX || 0), opts.area[0] - (10 - (yData.titleOffsetY || 0)) * opts.pix);\r\n          }\r\n          context.closePath();\r\n          context.stroke();\r\n        }\r\n        if (yAxisWidth.position == 'left') {\r\n          tStartLeft -= (yAxisWidth.width + opts.yAxis.padding * opts.pix);\r\n        } else {\r\n          tStartRight += yAxisWidth.width + opts.yAxis.padding * opts.pix;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nfunction drawLegend(series, opts, config, context, chartData) {\r\n  if (opts.legend.show === false) {\r\n    return;\r\n  }\r\n  let legendData = chartData.legendData;\r\n  let legendList = legendData.points;\r\n  let legendArea = legendData.area;\r\n  let padding = opts.legend.padding * opts.pix;\r\n  let fontSize = opts.legend.fontSize * opts.pix;\r\n  let shapeWidth = 15 * opts.pix;\r\n  let shapeRight = 5 * opts.pix;\r\n  let itemGap = opts.legend.itemGap * opts.pix;\r\n  let lineHeight = Math.max(opts.legend.lineHeight * opts.pix, fontSize);\r\n  //画背景及边框\r\n  context.beginPath();\r\n  context.setLineWidth(opts.legend.borderWidth * opts.pix);\r\n  context.setStrokeStyle(opts.legend.borderColor);\r\n  context.setFillStyle(opts.legend.backgroundColor);\r\n  context.moveTo(legendArea.start.x, legendArea.start.y);\r\n  context.rect(legendArea.start.x, legendArea.start.y, legendArea.width, legendArea.height);\r\n  context.closePath();\r\n  context.fill();\r\n  context.stroke();\r\n  legendList.forEach(function(itemList, listIndex) {\r\n    let width = 0;\r\n    let height = 0;\r\n    width = legendData.widthArr[listIndex];\r\n    height = legendData.heightArr[listIndex];\r\n    let startX = 0;\r\n    let startY = 0;\r\n    if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\r\n      switch (opts.legend.float) {\r\n        case 'left':\r\n          startX = legendArea.start.x + padding;\r\n        break;\r\n        case 'right':\r\n          startX = legendArea.start.x + legendArea.width - width;\r\n        break;\r\n        default:\r\n        startX = legendArea.start.x + (legendArea.width - width) / 2;\r\n      }\r\n      startY = legendArea.start.y + padding + listIndex * lineHeight;\r\n    } else {\r\n      if (listIndex == 0) {\r\n        width = 0;\r\n      } else {\r\n        width = legendData.widthArr[listIndex - 1];\r\n      }\r\n      startX = legendArea.start.x + padding + width;\r\n      startY = legendArea.start.y + padding + (legendArea.height - height) / 2;\r\n    }\r\n    context.setFontSize(config.fontSize);\r\n    for (let i = 0; i < itemList.length; i++) {\r\n      let item = itemList[i];\r\n      item.area = [0, 0, 0, 0];\r\n      item.area[0] = startX;\r\n      item.area[1] = startY;\r\n      item.area[3] = startY + lineHeight;\r\n      context.beginPath();\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.setStrokeStyle(item.show ? item.color : opts.legend.hiddenColor);\r\n      context.setFillStyle(item.show ? item.color : opts.legend.hiddenColor);\r\n      switch (item.legendShape) {\r\n        case 'line':\r\n          context.moveTo(startX, startY + 0.5 * lineHeight - 2 * opts.pix);\r\n          context.fillRect(startX, startY + 0.5 * lineHeight - 2 * opts.pix, 15 * opts.pix, 4 * opts.pix);\r\n          break;\r\n        case 'triangle':\r\n          context.moveTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.lineTo(startX + 2.5 * opts.pix, startY + 0.5 * lineHeight + 5 * opts.pix);\r\n          context.lineTo(startX + 12.5 * opts.pix, startY + 0.5 * lineHeight + 5 * opts.pix);\r\n          context.lineTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          break;\r\n        case 'diamond':\r\n          context.moveTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.lineTo(startX + 2.5 * opts.pix, startY + 0.5 * lineHeight);\r\n          context.lineTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight + 5 * opts.pix);\r\n          context.lineTo(startX + 12.5 * opts.pix, startY + 0.5 * lineHeight);\r\n          context.lineTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          break;\r\n        case 'circle':\r\n          context.moveTo(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight);\r\n          context.arc(startX + 7.5 * opts.pix, startY + 0.5 * lineHeight, 5 * opts.pix, 0, 2 * Math.PI);\r\n          break;\r\n        case 'rect':\r\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pix, 15 * opts.pix, 10 * opts.pix);\r\n          break;\r\n        case 'square':\r\n          context.moveTo(startX + 5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.fillRect(startX + 5 * opts.pix, startY + 0.5 * lineHeight - 5 * opts.pix, 10 * opts.pix, 10 * opts.pix);\r\n          break;\r\n        case 'none':\r\n          break;\r\n        default:\r\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pix);\r\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pix, 15 * opts.pix, 10 * opts.pix);\r\n      }\r\n      context.closePath();\r\n      context.fill();\r\n      context.stroke();\r\n      startX += shapeWidth + shapeRight;\r\n      let fontTrans = 0.5 * lineHeight + 0.5 * fontSize - 2;\r\n      const legendText = item.legendText ? item.legendText : item.name;\r\n      context.beginPath();\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(item.show ? opts.legend.fontColor : opts.legend.hiddenColor);\r\n      context.fillText(legendText, startX, startY + fontTrans);\r\n      context.closePath();\r\n      context.stroke();\r\n      if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\r\n        startX += measureText(legendText, fontSize, context) + itemGap;\r\n        item.area[2] = startX;\r\n      } else {\r\n        item.area[2] = startX + measureText(legendText, fontSize, context) + itemGap;;\r\n        startX -= shapeWidth + shapeRight;\r\n        startY += lineHeight;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction drawPieDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var pieOption = assign({}, {\r\n    activeOpacity: 0.5,\r\n    activeRadius: 10,\r\n    offsetAngle: 0,\r\n    labelWidth: 15,\r\n    ringWidth: 30,\r\n    customRadius: 0,\r\n    border: false,\r\n    borderWidth: 2,\r\n    borderColor: '#FFFFFF',\r\n    centerColor: '#FFFFFF',\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.type == \"pie\" ? opts.extra.pie : opts.extra.ring);\r\n  var centerPosition = {\r\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\r\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2\r\n  };\r\n  if (config.pieChartLinePadding == 0) {\r\n    config.pieChartLinePadding = pieOption.activeRadius * opts.pix;\r\n  }\r\n\r\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\r\n  radius = radius < 10 ? 10 : radius;\r\n  if (pieOption.customRadius > 0) {\r\n    radius = pieOption.customRadius * opts.pix;\r\n  }\r\n  series = getPieDataPoints(series, radius, process);\r\n  var activeRadius = pieOption.activeRadius * opts.pix;\r\n  pieOption.customColor = fillCustomColor(pieOption.linearType, pieOption.customColor, series, config);\r\n  series = series.map(function(eachSeries) {\r\n    eachSeries._start_ += (pieOption.offsetAngle) * Math.PI / 180;\r\n    return eachSeries;\r\n  });\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    if (opts.tooltip) {\r\n      if (opts.tooltip.index == seriesIndex) {\r\n        context.beginPath();\r\n        context.setFillStyle(hexToRgb(eachSeries.color, pieOption.activeOpacity || 0.5));\r\n        context.moveTo(centerPosition.x, centerPosition.y);\r\n        context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_ + activeRadius, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\r\n        context.closePath();\r\n        context.fill();\r\n      }\r\n    }\r\n    context.beginPath();\r\n    context.setLineWidth(pieOption.borderWidth * opts.pix);\r\n    context.lineJoin = \"round\";\r\n    context.setStrokeStyle(pieOption.borderColor);\r\n    var fillcolor = eachSeries.color;\r\n    if (pieOption.linearType == 'custom') {\r\n      var grd;\r\n      if(context.createCircularGradient){\r\n        grd = context.createCircularGradient(centerPosition.x, centerPosition.y, eachSeries._radius_)\r\n      }else{\r\n        grd = context.createRadialGradient(centerPosition.x, centerPosition.y, 0,centerPosition.x, centerPosition.y, eachSeries._radius_)\r\n      }\r\n      grd.addColorStop(0, hexToRgb(pieOption.customColor[eachSeries.linearIndex], 1))\r\n      grd.addColorStop(1, hexToRgb(eachSeries.color, 1))\r\n      fillcolor = grd\r\n    }\r\n    context.setFillStyle(fillcolor);\r\n    context.moveTo(centerPosition.x, centerPosition.y);\r\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\r\n    context.closePath();\r\n    context.fill();\r\n    if (pieOption.border == true) {\r\n      context.stroke();\r\n    }\r\n  });\r\n  if (opts.type === 'ring') {\r\n    var innerPieWidth = radius * 0.6;\r\n    if (typeof pieOption.ringWidth === 'number' && pieOption.ringWidth > 0) {\r\n      innerPieWidth = Math.max(0, radius - pieOption.ringWidth * opts.pix);\r\n    }\r\n    context.beginPath();\r\n    context.setFillStyle(pieOption.centerColor);\r\n    context.moveTo(centerPosition.x, centerPosition.y);\r\n    context.arc(centerPosition.x, centerPosition.y, innerPieWidth, 0, 2 * Math.PI);\r\n    context.closePath();\r\n    context.fill();\r\n  }\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    drawPieText(series, opts, config, context, radius, centerPosition);\r\n  }\r\n  if (process === 1 && opts.type === 'ring') {\r\n    drawRingTitle(opts, config, context, centerPosition);\r\n  }\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    series: series\r\n  };\r\n}\r\n\r\nfunction drawRoseDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var roseOption = assign({}, {\r\n    type: 'area',\r\n    activeOpacity: 0.5,\r\n    activeRadius: 10,\r\n    offsetAngle: 0,\r\n    labelWidth: 15,\r\n    border: false,\r\n    borderWidth: 2,\r\n    borderColor: '#FFFFFF',\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.extra.rose);\r\n  if (config.pieChartLinePadding == 0) {\r\n    config.pieChartLinePadding = roseOption.activeRadius * opts.pix;\r\n  }\r\n  var centerPosition = {\r\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\r\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2\r\n  };\r\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\r\n  radius = radius < 10 ? 10 : radius;\r\n  var minRadius = roseOption.minRadius || radius * 0.5;\r\n  series = getRoseDataPoints(series, roseOption.type, minRadius, radius, process);\r\n  var activeRadius = roseOption.activeRadius * opts.pix;\r\n  roseOption.customColor = fillCustomColor(roseOption.linearType, roseOption.customColor, series, config);\r\n  series = series.map(function(eachSeries) {\r\n    eachSeries._start_ += (roseOption.offsetAngle || 0) * Math.PI / 180;\r\n    return eachSeries;\r\n  });\r\n  series.forEach(function(eachSeries, seriesIndex) {\r\n    if (opts.tooltip) {\r\n      if (opts.tooltip.index == seriesIndex) {\r\n        context.beginPath();\r\n        context.setFillStyle(hexToRgb(eachSeries.color, roseOption.activeOpacity || 0.5));\r\n        context.moveTo(centerPosition.x, centerPosition.y);\r\n        context.arc(centerPosition.x, centerPosition.y, activeRadius + eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._rose_proportion_ * Math.PI);\r\n        context.closePath();\r\n        context.fill();\r\n      }\r\n    }\r\n    context.beginPath();\r\n    context.setLineWidth(roseOption.borderWidth * opts.pix);\r\n    context.lineJoin = \"round\";\r\n    context.setStrokeStyle(roseOption.borderColor);\r\n    var fillcolor = eachSeries.color;\r\n    if (roseOption.linearType == 'custom') {\r\n      var grd;\r\n      if(context.createCircularGradient){\r\n        grd = context.createCircularGradient(centerPosition.x, centerPosition.y, eachSeries._radius_)\r\n      }else{\r\n        grd = context.createRadialGradient(centerPosition.x, centerPosition.y, 0,centerPosition.x, centerPosition.y, eachSeries._radius_)\r\n      }\r\n      grd.addColorStop(0, hexToRgb(roseOption.customColor[eachSeries.linearIndex], 1))\r\n      grd.addColorStop(1, hexToRgb(eachSeries.color, 1))\r\n      fillcolor = grd\r\n    }\r\n    context.setFillStyle(fillcolor);\r\n    context.moveTo(centerPosition.x, centerPosition.y);\r\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._rose_proportion_ * Math.PI);\r\n    context.closePath();\r\n    context.fill();\r\n    if (roseOption.border == true) {\r\n      context.stroke();\r\n    }\r\n  });\r\n\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    drawPieText(series, opts, config, context, radius, centerPosition);\r\n  }\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    series: series\r\n  };\r\n}\r\n\r\nfunction drawArcbarDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var arcbarOption = assign({}, {\r\n    startAngle: 0.75,\r\n    endAngle: 0.25,\r\n    type: 'default',\r\n    lineCap: 'round',\r\n    width: 12 ,\r\n    gap: 2 ,\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.extra.arcbar);\r\n  series = getArcbarDataPoints(series, arcbarOption, process);\r\n  var centerPosition;\r\n  if (arcbarOption.centerX || arcbarOption.centerY) {\r\n    centerPosition = {\r\n      x: arcbarOption.centerX ? arcbarOption.centerX : opts.width / 2,\r\n      y: arcbarOption.centerY ? arcbarOption.centerY : opts.height / 2\r\n    };\r\n  } else {\r\n    centerPosition = {\r\n      x: opts.width / 2,\r\n      y: opts.height / 2\r\n    };\r\n  }\r\n  var radius;\r\n  if (arcbarOption.radius) {\r\n    radius = arcbarOption.radius;\r\n  } else {\r\n    radius = Math.min(centerPosition.x, centerPosition.y);\r\n    radius -= 5 * opts.pix;\r\n    radius -= arcbarOption.width / 2;\r\n  }\r\n  radius = radius < 10 ? 10 : radius;\r\n  arcbarOption.customColor = fillCustomColor(arcbarOption.linearType, arcbarOption.customColor, series, config);\r\n  \r\n  for (let i = 0; i < series.length; i++) {\r\n    let eachSeries = series[i];\r\n    //背景颜色\r\n    context.setLineWidth(arcbarOption.width * opts.pix);\r\n    context.setStrokeStyle(arcbarOption.backgroundColor || '#E9E9E9');\r\n    context.setLineCap(arcbarOption.lineCap);\r\n    context.beginPath();\r\n    if (arcbarOption.type == 'default') {\r\n      context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width * opts.pix + arcbarOption.gap * opts.pix) * i, arcbarOption.startAngle * Math.PI, arcbarOption.endAngle * Math.PI, false);\r\n    } else {\r\n      context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width * opts.pix + arcbarOption.gap * opts.pix) * i, 0, 2 * Math.PI, false);\r\n    }\r\n    context.stroke();\r\n    //进度条\r\n    var fillColor = eachSeries.color\r\n    if(arcbarOption.linearType == 'custom'){\r\n      var grd = context.createLinearGradient(centerPosition.x - radius, centerPosition.y, centerPosition.x + radius, centerPosition.y);\r\n      grd.addColorStop(1, hexToRgb(arcbarOption.customColor[eachSeries.linearIndex], 1))\r\n      grd.addColorStop(0, hexToRgb(eachSeries.color, 1))\r\n      fillColor = grd;\r\n    }\r\n    context.setLineWidth(arcbarOption.width * opts.pix);\r\n    context.setStrokeStyle(fillColor);\r\n    context.setLineCap(arcbarOption.lineCap);\r\n    context.beginPath();\r\n    context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width * opts.pix + arcbarOption.gap * opts.pix) * i, arcbarOption.startAngle * Math.PI, eachSeries._proportion_ * Math.PI, false);\r\n    context.stroke();\r\n  }\r\n  drawRingTitle(opts, config, context, centerPosition);\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    series: series\r\n  };\r\n}\r\n\r\nfunction drawGaugeDataPoints(categories, series, opts, config, context) {\r\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\r\n  var gaugeOption = assign({}, {\r\n    type: 'default',\r\n    startAngle: 0.75,\r\n    endAngle: 0.25,\r\n    width: 15,\r\n    labelOffset:13,\r\n    splitLine: {\r\n      fixRadius: 0,\r\n      splitNumber: 10,\r\n      width: 15,\r\n      color: '#FFFFFF',\r\n      childNumber: 5,\r\n      childWidth: 5\r\n    },\r\n    pointer: {\r\n      width: 15,\r\n      color: 'auto'\r\n    }\r\n  }, opts.extra.gauge);\r\n  if (gaugeOption.oldAngle == undefined) {\r\n    gaugeOption.oldAngle = gaugeOption.startAngle;\r\n  }\r\n  if (gaugeOption.oldData == undefined) {\r\n    gaugeOption.oldData = 0;\r\n  }\r\n  categories = getGaugeAxisPoints(categories, gaugeOption.startAngle, gaugeOption.endAngle);\r\n  var centerPosition = {\r\n    x: opts.width / 2,\r\n    y: opts.height / 2\r\n  };\r\n  var radius = Math.min(centerPosition.x, centerPosition.y);\r\n  radius -= 5 * opts.pix;\r\n  radius -= gaugeOption.width / 2;\r\n  radius = radius < 10 ? 10 : radius;\r\n  var innerRadius = radius - gaugeOption.width;\r\n  var totalAngle = 0;\r\n  //判断仪表盘的样式：default百度样式，progress新样式\r\n  if (gaugeOption.type == 'progress') {\r\n    //## 第一步画中心圆形背景和进度条背景\r\n    //中心圆形背景\r\n    var pieRadius = radius - gaugeOption.width * 3;\r\n    context.beginPath();\r\n    let gradient = context.createLinearGradient(centerPosition.x, centerPosition.y - pieRadius, centerPosition.x, centerPosition.y + pieRadius);\r\n    //配置渐变填充（起点：中心点向上减半径；结束点中心点向下加半径）\r\n    gradient.addColorStop('0', hexToRgb(series[0].color, 0.3));\r\n    gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\r\n    context.setFillStyle(gradient);\r\n    context.arc(centerPosition.x, centerPosition.y, pieRadius, 0, 2 * Math.PI, false);\r\n    context.fill();\r\n    //画进度条背景\r\n    context.setLineWidth(gaugeOption.width);\r\n    context.setStrokeStyle(hexToRgb(series[0].color, 0.3));\r\n    context.setLineCap('round');\r\n    context.beginPath();\r\n    context.arc(centerPosition.x, centerPosition.y, innerRadius, gaugeOption.startAngle * Math.PI, gaugeOption.endAngle * Math.PI, false);\r\n    context.stroke();\r\n    //## 第二步画刻度线\r\n    totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\r\n    let splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\r\n    let childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\r\n    let startX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\r\n    let endX = -radius - gaugeOption.width - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\r\n    context.save();\r\n    context.translate(centerPosition.x, centerPosition.y);\r\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\r\n    let len = gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1;\r\n    let proc = series[0].data * process;\r\n    for (let i = 0; i < len; i++) {\r\n      context.beginPath();\r\n      //刻度线随进度变色\r\n      if (proc > (i / len)) {\r\n        context.setStrokeStyle(hexToRgb(series[0].color, 1));\r\n      } else {\r\n        context.setStrokeStyle(hexToRgb(series[0].color, 0.3));\r\n      }\r\n      context.setLineWidth(3 * opts.pix);\r\n      context.moveTo(startX, 0);\r\n      context.lineTo(endX, 0);\r\n      context.stroke();\r\n      context.rotate(childAngle * Math.PI);\r\n    }\r\n    context.restore();\r\n    //## 第三步画进度条\r\n    series = getGaugeArcbarDataPoints(series, gaugeOption, process);\r\n    context.setLineWidth(gaugeOption.width);\r\n    context.setStrokeStyle(series[0].color);\r\n    context.setLineCap('round');\r\n    context.beginPath();\r\n    context.arc(centerPosition.x, centerPosition.y, innerRadius, gaugeOption.startAngle * Math.PI, series[0]._proportion_ * Math.PI, false);\r\n    context.stroke();\r\n    //## 第四步画指针\r\n    let pointerRadius = radius - gaugeOption.width * 2.5;\r\n    context.save();\r\n    context.translate(centerPosition.x, centerPosition.y);\r\n    context.rotate((series[0]._proportion_ - 1) * Math.PI);\r\n    context.beginPath();\r\n    context.setLineWidth(gaugeOption.width / 3);\r\n    let gradient3 = context.createLinearGradient(0, -pointerRadius * 0.6, 0, pointerRadius * 0.6);\r\n    gradient3.addColorStop('0', hexToRgb('#FFFFFF', 0));\r\n    gradient3.addColorStop('0.5', hexToRgb(series[0].color, 1));\r\n    gradient3.addColorStop('1.0', hexToRgb('#FFFFFF', 0));\r\n    context.setStrokeStyle(gradient3);\r\n    context.arc(0, 0, pointerRadius, 0.85 * Math.PI, 1.15 * Math.PI, false);\r\n    context.stroke();\r\n    context.beginPath();\r\n    context.setLineWidth(1);\r\n    context.setStrokeStyle(series[0].color);\r\n    context.setFillStyle(series[0].color);\r\n    context.moveTo(-pointerRadius - gaugeOption.width / 3 / 2, -4);\r\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2 - 4, 0);\r\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2, 4);\r\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2, -4);\r\n    context.stroke();\r\n    context.fill();\r\n    context.restore();\r\n    //default百度样式\r\n  } else {\r\n    //画背景\r\n    context.setLineWidth(gaugeOption.width);\r\n    context.setLineCap('butt');\r\n    for (let i = 0; i < categories.length; i++) {\r\n      let eachCategories = categories[i];\r\n      context.beginPath();\r\n      context.setStrokeStyle(eachCategories.color);\r\n      context.arc(centerPosition.x, centerPosition.y, radius, eachCategories._startAngle_ * Math.PI, eachCategories._endAngle_ * Math.PI, false);\r\n      context.stroke();\r\n    }\r\n    context.save();\r\n    //画刻度线\r\n    totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\r\n    let splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\r\n    let childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\r\n    let startX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\r\n    let endX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\r\n    let childendX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.childWidth;\r\n    context.translate(centerPosition.x, centerPosition.y);\r\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\r\n    for (let i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\r\n      context.beginPath();\r\n      context.setStrokeStyle(gaugeOption.splitLine.color);\r\n      context.setLineWidth(2 * opts.pix);\r\n      context.moveTo(startX, 0);\r\n      context.lineTo(endX, 0);\r\n      context.stroke();\r\n      context.rotate(splitAngle * Math.PI);\r\n    }\r\n    context.restore();\r\n    context.save();\r\n    context.translate(centerPosition.x, centerPosition.y);\r\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\r\n    for (let i = 0; i < gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1; i++) {\r\n      context.beginPath();\r\n      context.setStrokeStyle(gaugeOption.splitLine.color);\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.moveTo(startX, 0);\r\n      context.lineTo(childendX, 0);\r\n      context.stroke();\r\n      context.rotate(childAngle * Math.PI);\r\n    }\r\n    context.restore();\r\n    //画指针\r\n    series = getGaugeDataPoints(series, categories, gaugeOption, process);\r\n    for (let i = 0; i < series.length; i++) {\r\n      let eachSeries = series[i];\r\n      context.save();\r\n      context.translate(centerPosition.x, centerPosition.y);\r\n      context.rotate((eachSeries._proportion_ - 1) * Math.PI);\r\n      context.beginPath();\r\n      context.setFillStyle(eachSeries.color);\r\n      context.moveTo(gaugeOption.pointer.width, 0);\r\n      context.lineTo(0, -gaugeOption.pointer.width / 2);\r\n      context.lineTo(-innerRadius, 0);\r\n      context.lineTo(0, gaugeOption.pointer.width / 2);\r\n      context.lineTo(gaugeOption.pointer.width, 0);\r\n      context.closePath();\r\n      context.fill();\r\n      context.beginPath();\r\n      context.setFillStyle('#FFFFFF');\r\n      context.arc(0, 0, gaugeOption.pointer.width / 6, 0, 2 * Math.PI, false);\r\n      context.fill();\r\n      context.restore();\r\n    }\r\n    if (opts.dataLabel !== false) {\r\n      drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context);\r\n    }\r\n  }\r\n  //画仪表盘标题，副标题\r\n  drawRingTitle(opts, config, context, centerPosition);\r\n  if (process === 1 && opts.type === 'gauge') {\r\n    opts.extra.gauge.oldAngle = series[0]._proportion_;\r\n    opts.extra.gauge.oldData = series[0].data;\r\n  }\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    innerRadius: innerRadius,\r\n    categories: categories,\r\n    totalAngle: totalAngle\r\n  };\r\n}\r\n\r\nfunction drawRadarDataPoints(series, opts, config, context) {\r\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  var radarOption = assign({}, {\r\n    gridColor: '#cccccc',\r\n    gridType: 'radar',\r\n    gridEval:1,\r\n    axisLabel:false,\r\n    axisLabelTofix:0,\r\n    labelColor:'#666666',\r\n    labelPointShow:false,\r\n    labelPointRadius:3,\r\n    labelPointColor:'#cccccc',\r\n    opacity: 0.2,\r\n    gridCount: 3,\r\n    border:false,\r\n    borderWidth:2,\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.extra.radar);\r\n  var coordinateAngle = getRadarCoordinateSeries(opts.categories.length);\r\n  var centerPosition = {\r\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\r\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2\r\n  };\r\n  var xr = (opts.width - opts.area[1] - opts.area[3]) / 2\r\n  var yr = (opts.height - opts.area[0] - opts.area[2]) / 2\r\n  var radius = Math.min(xr - (getMaxTextListLength(opts.categories, config.fontSize, context) + config.radarLabelTextMargin), yr - config.radarLabelTextMargin);\r\n  radius -= config.radarLabelTextMargin * opts.pix;\r\n  radius = radius < 10 ? 10 : radius;\r\n  // 画分割线\r\n  context.beginPath();\r\n  context.setLineWidth(1 * opts.pix);\r\n  context.setStrokeStyle(radarOption.gridColor);\r\n  coordinateAngle.forEach(function(angle,index) {\r\n    var pos = convertCoordinateOrigin(radius * Math.cos(angle), radius * Math.sin(angle), centerPosition);\r\n    context.moveTo(centerPosition.x, centerPosition.y);\r\n    if (index % radarOption.gridEval == 0) {\r\n      context.lineTo(pos.x, pos.y);\r\n    }\r\n  });\r\n  context.stroke();\r\n  context.closePath();\r\n  \r\n  // 画背景网格\r\n  var _loop = function _loop(i) {\r\n    var startPos = {};\r\n    context.beginPath();\r\n    context.setLineWidth(1 * opts.pix);\r\n    context.setStrokeStyle(radarOption.gridColor);\r\n    if (radarOption.gridType == 'radar') {\r\n      coordinateAngle.forEach(function(angle, index) {\r\n        var pos = convertCoordinateOrigin(radius / radarOption.gridCount * i * Math.cos(angle), radius /\r\n          radarOption.gridCount * i * Math.sin(angle), centerPosition);\r\n        if (index === 0) {\r\n          startPos = pos;\r\n          context.moveTo(pos.x, pos.y);\r\n        } else {\r\n          context.lineTo(pos.x, pos.y);\r\n        }\r\n      });\r\n      context.lineTo(startPos.x, startPos.y);\r\n    } else {\r\n      var pos = convertCoordinateOrigin(radius / radarOption.gridCount * i * Math.cos(1.5), radius / radarOption.gridCount * i * Math.sin(1.5), centerPosition);\r\n      context.arc(centerPosition.x, centerPosition.y, centerPosition.y - pos.y, 0, 2 * Math.PI, false);\r\n    }\r\n    context.stroke();\r\n    context.closePath();\r\n  };\r\n  for (var i = 1; i <= radarOption.gridCount; i++) {\r\n    _loop(i);\r\n  }\r\n  radarOption.customColor = fillCustomColor(radarOption.linearType, radarOption.customColor, series, config);\r\n  var radarDataPoints = getRadarDataPoints(coordinateAngle, centerPosition, radius, series, opts, process);\r\n  radarDataPoints.forEach(function(eachSeries, seriesIndex) {\r\n    // 绘制区域数据\r\n    context.beginPath();\r\n    context.setLineWidth(radarOption.borderWidth * opts.pix);\r\n    context.setStrokeStyle(eachSeries.color);\r\n    \r\n    var fillcolor = hexToRgb(eachSeries.color, radarOption.opacity);\r\n    if (radarOption.linearType == 'custom') {\r\n      var grd;\r\n      if(context.createCircularGradient){\r\n        grd = context.createCircularGradient(centerPosition.x, centerPosition.y, radius)\r\n      }else{\r\n        grd = context.createRadialGradient(centerPosition.x, centerPosition.y, 0,centerPosition.x, centerPosition.y, radius)\r\n      }\r\n      grd.addColorStop(0, hexToRgb(radarOption.customColor[series[seriesIndex].linearIndex], radarOption.opacity))\r\n      grd.addColorStop(1, hexToRgb(eachSeries.color, radarOption.opacity))\r\n      fillcolor = grd\r\n    }\r\n    \r\n    context.setFillStyle(fillcolor);\r\n    eachSeries.data.forEach(function(item, index) {\r\n      if (index === 0) {\r\n        context.moveTo(item.position.x, item.position.y);\r\n      } else {\r\n        context.lineTo(item.position.x, item.position.y);\r\n      }\r\n    });\r\n    context.closePath();\r\n    context.fill();\r\n    if(radarOption.border === true){\r\n      context.stroke();\r\n    }\r\n    context.closePath();\r\n    if (opts.dataPointShape !== false) {\r\n      var points = eachSeries.data.map(function(item) {\r\n        return item.position;\r\n      });\r\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\r\n    }\r\n  });\r\n  // 画刻度值\r\n  if(radarOption.axisLabel === true){\r\n    const maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\r\n    const stepLength = radius / radarOption.gridCount;\r\n    const fontSize = opts.fontSize * opts.pix;\r\n    context.setFontSize(fontSize);\r\n    context.setFillStyle(opts.fontColor);\r\n    context.setTextAlign('left');\r\n    for (var i = 0; i < radarOption.gridCount + 1; i++) {\r\n      let label = i * maxData / radarOption.gridCount;\r\n      label = label.toFixed(radarOption.axisLabelTofix);\r\n      context.fillText(String(label), centerPosition.x + 3 * opts.pix, centerPosition.y - i * stepLength + fontSize / 2);\r\n    }\r\n  }\r\n  \r\n  // draw label text\r\n  drawRadarLabel(coordinateAngle, radius, centerPosition, opts, config, context);\r\n  \r\n  // draw dataLabel\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    radarDataPoints.forEach(function(eachSeries, seriesIndex) {\r\n      context.beginPath();\r\n      var fontSize = eachSeries.textSize * opts.pix || config.fontSize;\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(eachSeries.textColor || opts.fontColor);\r\n      eachSeries.data.forEach(function(item, index) {\r\n        //如果是中心点垂直的上下点位\r\n        if(Math.abs(item.position.x - centerPosition.x)<2){\r\n          //如果在上面\r\n          if(item.position.y < centerPosition.y){\r\n            context.setTextAlign('center');\r\n            context.fillText(item.value, item.position.x, item.position.y - 4);\r\n          }else{\r\n            context.setTextAlign('center');\r\n            context.fillText(item.value, item.position.x, item.position.y + fontSize + 2);\r\n          }\r\n        }else{\r\n          //如果在左侧\r\n          if(item.position.x < centerPosition.x){\r\n            context.setTextAlign('right');\r\n            context.fillText(item.value, item.position.x - 4, item.position.y + fontSize / 2 - 2);\r\n          }else{\r\n            context.setTextAlign('left');\r\n            context.fillText(item.value, item.position.x + 4, item.position.y + fontSize / 2 - 2);\r\n          }\r\n        }\r\n      });\r\n      context.closePath();\r\n      context.stroke();\r\n    });\r\n    context.setTextAlign('left');\r\n  }\r\n  \r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    angleList: coordinateAngle\r\n  };\r\n}\r\n\r\n// 经纬度转墨卡托\r\nfunction lonlat2mercator(longitude, latitude) {\r\n  var mercator = Array(2);\r\n  var x = longitude * 20037508.34 / 180;\r\n  var y = Math.log(Math.tan((90 + latitude) * Math.PI / 360)) / (Math.PI / 180);\r\n  y = y * 20037508.34 / 180;\r\n  mercator[0] = x;\r\n  mercator[1] = y;\r\n  return mercator;\r\n}\r\n\r\n// 墨卡托转经纬度\r\nfunction mercator2lonlat(longitude, latitude) {\r\n  var lonlat = Array(2)\r\n  var x = longitude / 20037508.34 * 180;\r\n  var y = latitude / 20037508.34 * 180;\r\n  y = 180 / Math.PI * (2 * Math.atan(Math.exp(y * Math.PI / 180)) - Math.PI / 2);\r\n  lonlat[0] = x;\r\n  lonlat[1] = y;\r\n  return lonlat;\r\n}\r\n\r\nfunction getBoundingBox(data) {\r\n  var bounds = {},coords;\r\n  bounds.xMin = 180;\r\n  bounds.xMax = 0;\r\n  bounds.yMin = 90;\r\n  bounds.yMax = 0\r\n  for (var i = 0; i < data.length; i++) {\r\n    var coorda = data[i].geometry.coordinates\r\n    for (var k = 0; k < coorda.length; k++) {\r\n      coords = coorda[k];\r\n      if (coords.length == 1) {\r\n        coords = coords[0]\r\n      }\r\n      for (var j = 0; j < coords.length; j++) {\r\n        var longitude = coords[j][0];\r\n        var latitude = coords[j][1];\r\n        var point = {\r\n          x: longitude,\r\n          y: latitude\r\n        }\r\n        bounds.xMin = bounds.xMin < point.x ? bounds.xMin : point.x;\r\n        bounds.xMax = bounds.xMax > point.x ? bounds.xMax : point.x;\r\n        bounds.yMin = bounds.yMin < point.y ? bounds.yMin : point.y;\r\n        bounds.yMax = bounds.yMax > point.y ? bounds.yMax : point.y;\r\n      }\r\n    }\r\n  }\r\n  return bounds;\r\n}\r\n\r\nfunction coordinateToPoint(latitude, longitude, bounds, scale, xoffset, yoffset) {\r\n  return {\r\n    x: (longitude - bounds.xMin) * scale + xoffset,\r\n    y: (bounds.yMax - latitude) * scale + yoffset\r\n  };\r\n}\r\n\r\nfunction pointToCoordinate(pointY, pointX, bounds, scale, xoffset, yoffset) {\r\n  return {\r\n    x: (pointX - xoffset) / scale + bounds.xMin,\r\n    y: bounds.yMax - (pointY - yoffset) / scale\r\n  };\r\n}\r\n\r\nfunction isRayIntersectsSegment(poi, s_poi, e_poi) {\r\n  if (s_poi[1] == e_poi[1]) {\r\n    return false;\r\n  }\r\n  if (s_poi[1] > poi[1] && e_poi[1] > poi[1]) {\r\n    return false;\r\n  }\r\n  if (s_poi[1] < poi[1] && e_poi[1] < poi[1]) {\r\n    return false;\r\n  }\r\n  if (s_poi[1] == poi[1] && e_poi[1] > poi[1]) {\r\n    return false;\r\n  }\r\n  if (e_poi[1] == poi[1] && s_poi[1] > poi[1]) {\r\n    return false;\r\n  }\r\n  if (s_poi[0] < poi[0] && e_poi[1] < poi[1]) {\r\n    return false;\r\n  }\r\n  let xseg = e_poi[0] - (e_poi[0] - s_poi[0]) * (e_poi[1] - poi[1]) / (e_poi[1] - s_poi[1]);\r\n  if (xseg < poi[0]) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction isPoiWithinPoly(poi, poly, mercator) {\r\n  let sinsc = 0;\r\n  for (let i = 0; i < poly.length; i++) {\r\n    let epoly = poly[i][0];\r\n    if (poly.length == 1) {\r\n      epoly = poly[i][0]\r\n    }\r\n    for (let j = 0; j < epoly.length - 1; j++) {\r\n      let s_poi = epoly[j];\r\n      let e_poi = epoly[j + 1];\r\n      if (mercator) {\r\n        s_poi = lonlat2mercator(epoly[j][0], epoly[j][1]);\r\n        e_poi = lonlat2mercator(epoly[j + 1][0], epoly[j + 1][1]);\r\n      }\r\n      if (isRayIntersectsSegment(poi, s_poi, e_poi)) {\r\n        sinsc += 1;\r\n      }\r\n    }\r\n  }\r\n  if (sinsc % 2 == 1) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction drawMapDataPoints(series, opts, config, context) {\r\n  var mapOption = assign({}, {\r\n    border: true,\r\n    mercator: false,\r\n    borderWidth: 1,\r\n    borderColor: '#666666',\r\n    fillOpacity: 0.6,\r\n    activeBorderColor: '#f04864',\r\n    activeFillColor: '#facc14',\r\n    activeFillOpacity: 1\r\n  }, opts.extra.map);\r\n  var coords, point;\r\n  var data = series;\r\n  var bounds = getBoundingBox(data);\r\n  if (mapOption.mercator) {\r\n    var max = lonlat2mercator(bounds.xMax, bounds.yMax)\r\n    var min = lonlat2mercator(bounds.xMin, bounds.yMin)\r\n    bounds.xMax = max[0]\r\n    bounds.yMax = max[1]\r\n    bounds.xMin = min[0]\r\n    bounds.yMin = min[1]\r\n  }\r\n  var xScale = opts.width / Math.abs(bounds.xMax - bounds.xMin);\r\n  var yScale = opts.height / Math.abs(bounds.yMax - bounds.yMin);\r\n  var scale = xScale < yScale ? xScale : yScale;\r\n  var xoffset = opts.width / 2 - Math.abs(bounds.xMax - bounds.xMin) / 2 * scale;\r\n  var yoffset = opts.height / 2 - Math.abs(bounds.yMax - bounds.yMin) / 2 * scale;\r\n  for (var i = 0; i < data.length; i++) {\r\n    context.beginPath();\r\n    context.setLineWidth(mapOption.borderWidth * opts.pix);\r\n    context.setStrokeStyle(mapOption.borderColor);\r\n    context.setFillStyle(hexToRgb(series[i].color, mapOption.fillOpacity));\r\n    if (opts.tooltip) {\r\n      if (opts.tooltip.index == i) {\r\n        context.setStrokeStyle(mapOption.activeBorderColor);\r\n        context.setFillStyle(hexToRgb(mapOption.activeFillColor, mapOption.activeFillOpacity));\r\n      }\r\n    }\r\n    var coorda = data[i].geometry.coordinates\r\n    for (var k = 0; k < coorda.length; k++) {\r\n      coords = coorda[k];\r\n      if (coords.length == 1) {\r\n        coords = coords[0]\r\n      }\r\n      for (var j = 0; j < coords.length; j++) {\r\n        var gaosi = Array(2);\r\n        if (mapOption.mercator) {\r\n          gaosi = lonlat2mercator(coords[j][0], coords[j][1])\r\n        } else {\r\n          gaosi = coords[j]\r\n        }\r\n        point = coordinateToPoint(gaosi[1], gaosi[0], bounds, scale, xoffset, yoffset)\r\n        if (j === 0) {\r\n          context.beginPath();\r\n          context.moveTo(point.x, point.y);\r\n        } else {\r\n          context.lineTo(point.x, point.y);\r\n        }\r\n      }\r\n      context.fill();\r\n      if (mapOption.border == true) {\r\n        context.stroke();\r\n      }\r\n    }\r\n  }\r\n  if (opts.dataLabel == true) {\r\n    for (var i = 0; i < data.length; i++) {\r\n      var centerPoint = data[i].properties.centroid;\r\n      if (centerPoint) {\r\n        if (mapOption.mercator) {\r\n          centerPoint = lonlat2mercator(data[i].properties.centroid[0], data[i].properties.centroid[1])\r\n        }\r\n        point = coordinateToPoint(centerPoint[1], centerPoint[0], bounds, scale, xoffset, yoffset);\r\n        let fontSize = data[i].textSize * opts.pix || config.fontSize;\r\n        let text = data[i].properties.name;\r\n        context.beginPath();\r\n        context.setFontSize(fontSize)\r\n        context.setFillStyle(data[i].textColor || opts.fontColor)\r\n        context.fillText(text, point.x - measureText(text, fontSize, context) / 2, point.y + fontSize / 2);\r\n        context.closePath();\r\n        context.stroke();\r\n      }\r\n    }\r\n  }\r\n  opts.chartData.mapData = {\r\n    bounds: bounds,\r\n    scale: scale,\r\n    xoffset: xoffset,\r\n    yoffset: yoffset,\r\n    mercator: mapOption.mercator\r\n  }\r\n  drawToolTipBridge(opts, config, context, 1);\r\n  context.draw();\r\n}\r\n\r\nfunction normalInt(min, max, iter) {\r\n  iter = iter == 0 ? 1 : iter;\r\n  var arr = [];\r\n  for (var i = 0; i < iter; i++) {\r\n    arr[i] = Math.random();\r\n  };\r\n  return Math.floor(arr.reduce(function(i, j) {\r\n    return i + j\r\n  }) / iter * (max - min)) + min;\r\n};\r\n\r\nfunction collisionNew(area, points, width, height) {\r\n  var isIn = false;\r\n  for (let i = 0; i < points.length; i++) {\r\n    if (points[i].area) {\r\n      if (area[3] < points[i].area[1] || area[0] > points[i].area[2] || area[1] > points[i].area[3] || area[2] < points[i].area[0]) {\r\n        if (area[0] < 0 || area[1] < 0 || area[2] > width || area[3] > height) {\r\n          isIn = true;\r\n          break;\r\n        } else {\r\n          isIn = false;\r\n        }\r\n      } else {\r\n        isIn = true;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return isIn;\r\n};\r\n\r\nfunction getWordCloudPoint(opts, type, context) {\r\n  let points = opts.series;\r\n  switch (type) {\r\n    case 'normal':\r\n      for (let i = 0; i < points.length; i++) {\r\n        let text = points[i].name;\r\n        let tHeight = points[i].textSize * opts.pix;\r\n        let tWidth = measureText(text, tHeight, context);\r\n        let x, y;\r\n        let area;\r\n        let breaknum = 0;\r\n        while (true) {\r\n          breaknum++;\r\n          x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\r\n          y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\r\n          area = [x - 5 + opts.width / 2, y - 5 - tHeight + opts.height / 2, x + tWidth + 5 + opts.width / 2, y + 5 +\r\n            opts.height / 2\r\n          ];\r\n          let isCollision = collisionNew(area, points, opts.width, opts.height);\r\n          if (!isCollision) break;\r\n          if (breaknum == 1000) {\r\n            area = [-100, -100, -100, -100];\r\n            break;\r\n          }\r\n        };\r\n        points[i].area = area;\r\n      }\r\n      break;\r\n    case 'vertical':\r\n      function Spin() {\r\n        //获取均匀随机值，是否旋转，旋转的概率为（1-0.5）\r\n        if (Math.random() > 0.7) {\r\n          return true;\r\n        } else {\r\n          return false\r\n        };\r\n      };\r\n      for (let i = 0; i < points.length; i++) {\r\n        let text = points[i].name;\r\n        let tHeight = points[i].textSize * opts.pix;\r\n        let tWidth = measureText(text, tHeight, context);\r\n        let isSpin = Spin();\r\n        let x, y, area, areav;\r\n        let breaknum = 0;\r\n        while (true) {\r\n          breaknum++;\r\n          let isCollision;\r\n          if (isSpin) {\r\n            x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\r\n            y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\r\n            area = [y - 5 - tWidth + opts.width / 2, (-x - 5 + opts.height / 2), y + 5 + opts.width / 2, (-x + tHeight + 5 + opts.height / 2)];\r\n            areav = [opts.width - (opts.width / 2 - opts.height / 2) - (-x + tHeight + 5 + opts.height / 2) - 5, (opts.height / 2 - opts.width / 2) + (y - 5 - tWidth + opts.width / 2) - 5, opts.width - (opts.width / 2 - opts.height / 2) - (-x + tHeight + 5 + opts.height / 2) + tHeight, (opts.height / 2 - opts.width / 2) + (y - 5 - tWidth + opts.width / 2) + tWidth + 5];\r\n            isCollision = collisionNew(areav, points, opts.height, opts.width);\r\n          } else {\r\n            x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\r\n            y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\r\n            area = [x - 5 + opts.width / 2, y - 5 - tHeight + opts.height / 2, x + tWidth + 5 + opts.width / 2, y + 5 + opts.height / 2];\r\n            isCollision = collisionNew(area, points, opts.width, opts.height);\r\n          }\r\n          if (!isCollision) break;\r\n          if (breaknum == 1000) {\r\n            area = [-1000, -1000, -1000, -1000];\r\n            break;\r\n          }\r\n        };\r\n        if (isSpin) {\r\n          points[i].area = areav;\r\n          points[i].areav = area;\r\n        } else {\r\n          points[i].area = area;\r\n        }\r\n        points[i].rotate = isSpin;\r\n      };\r\n      break;\r\n  }\r\n  return points;\r\n}\r\n\r\nfunction drawWordCloudDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let wordOption = assign({}, {\r\n    type: 'normal',\r\n    autoColors: true\r\n  }, opts.extra.word);\r\n  if (!opts.chartData.wordCloudData) {\r\n    opts.chartData.wordCloudData = getWordCloudPoint(opts, wordOption.type, context);\r\n  }\r\n  context.beginPath();\r\n  context.setFillStyle(opts.background);\r\n  context.rect(0, 0, opts.width, opts.height);\r\n  context.fill();\r\n  context.save();\r\n  let points = opts.chartData.wordCloudData;\r\n  context.translate(opts.width / 2, opts.height / 2);\r\n  for (let i = 0; i < points.length; i++) {\r\n    context.save();\r\n    if (points[i].rotate) {\r\n      context.rotate(90 * Math.PI / 180);\r\n    }\r\n    let text = points[i].name;\r\n    let tHeight = points[i].textSize * opts.pix;\r\n    let tWidth = measureText(text, tHeight, context);\r\n    context.beginPath();\r\n    context.setStrokeStyle(points[i].color);\r\n    context.setFillStyle(points[i].color);\r\n    context.setFontSize(tHeight);\r\n    if (points[i].rotate) {\r\n      if (points[i].areav[0] > 0) {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.strokeText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\r\n          } else {\r\n            context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\r\n          }\r\n        } else {\r\n          context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\r\n        }\r\n      }\r\n    } else {\r\n      if (points[i].area[0] > 0) {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.strokeText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\r\n          } else {\r\n            context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\r\n          }\r\n        } else {\r\n          context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\r\n        }\r\n      }\r\n    }\r\n    context.stroke();\r\n    context.restore();\r\n  }\r\n  context.restore();\r\n}\r\n\r\nfunction drawFunnelDataPoints(series, opts, config, context) {\r\n  let process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\r\n  let funnelOption = assign({}, {\r\n    type:'funnel',\r\n    activeWidth: 10,\r\n    activeOpacity: 0.3,\r\n    border: false,\r\n    borderWidth: 2,\r\n    borderColor: '#FFFFFF',\r\n    fillOpacity: 1,\r\n    labelAlign: 'right',\r\n    linearType: 'none',\r\n    customColor: [],\r\n  }, opts.extra.funnel);\r\n  let eachSpacing = (opts.height - opts.area[0] - opts.area[2]) / series.length;\r\n  let centerPosition = {\r\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\r\n    y: opts.height - opts.area[2]\r\n  };\r\n  let activeWidth = funnelOption.activeWidth * opts.pix;\r\n  let radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - activeWidth, (opts.height - opts.area[0] - opts.area[2]) / 2 - activeWidth);\r\n  series = getFunnelDataPoints(series, radius, funnelOption.type, eachSpacing, process);\r\n  context.save();\r\n  context.translate(centerPosition.x, centerPosition.y);\r\n  funnelOption.customColor = fillCustomColor(funnelOption.linearType, funnelOption.customColor, series, config);\r\n  if(funnelOption.type == 'pyramid'){\r\n    for (let i = 0; i < series.length; i++) {\r\n      if (i == series.length -1) {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.beginPath();\r\n            context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\r\n            context.moveTo(-activeWidth, -eachSpacing);\r\n            context.lineTo(-series[i].radius - activeWidth, 0);\r\n            context.lineTo(series[i].radius + activeWidth, 0);\r\n            context.lineTo(activeWidth, -eachSpacing);\r\n            context.lineTo(-activeWidth, -eachSpacing);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        }\r\n        series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\r\n        context.beginPath();\r\n        context.setLineWidth(funnelOption.borderWidth * opts.pix);\r\n        context.setStrokeStyle(funnelOption.borderColor);\r\n        var fillColor = hexToRgb(series[i].color, funnelOption.fillOpacity);\r\n        if (funnelOption.linearType == 'custom') {\r\n          var grd = context.createLinearGradient(series[i].radius, -eachSpacing, -series[i].radius, -eachSpacing);\r\n          grd.addColorStop(0, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          grd.addColorStop(0.5, hexToRgb(funnelOption.customColor[series[i].linearIndex], funnelOption.fillOpacity));\r\n          grd.addColorStop(1, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          fillColor = grd\r\n        }\r\n        context.setFillStyle(fillColor);\r\n        context.moveTo(0, -eachSpacing);\r\n        context.lineTo(-series[i].radius, 0);\r\n        context.lineTo(series[i].radius, 0);\r\n        context.lineTo(0, -eachSpacing);\r\n        context.closePath();\r\n        context.fill();\r\n        if (funnelOption.border == true) {\r\n          context.stroke();\r\n        }\r\n      } else {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.beginPath();\r\n            context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\r\n            context.moveTo(0, 0);\r\n            context.lineTo(-series[i].radius - activeWidth, 0);\r\n            context.lineTo(-series[i + 1].radius - activeWidth, -eachSpacing);\r\n            context.lineTo(series[i + 1].radius + activeWidth, -eachSpacing);\r\n            context.lineTo(series[i].radius + activeWidth, 0);\r\n            context.lineTo(0, 0);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        }\r\n        series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\r\n        context.beginPath();\r\n        context.setLineWidth(funnelOption.borderWidth * opts.pix);\r\n        context.setStrokeStyle(funnelOption.borderColor);\r\n        var fillColor = hexToRgb(series[i].color, funnelOption.fillOpacity);\r\n        if (funnelOption.linearType == 'custom') {\r\n          var grd = context.createLinearGradient(series[i].radius, -eachSpacing, -series[i].radius, -eachSpacing);\r\n          grd.addColorStop(0, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          grd.addColorStop(0.5, hexToRgb(funnelOption.customColor[series[i].linearIndex], funnelOption.fillOpacity));\r\n          grd.addColorStop(1, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          fillColor = grd\r\n        }\r\n        context.setFillStyle(fillColor);\r\n        context.moveTo(0, 0);\r\n        context.lineTo(-series[i].radius, 0);\r\n        context.lineTo(-series[i + 1].radius, -eachSpacing);\r\n        context.lineTo(series[i + 1].radius, -eachSpacing);\r\n        context.lineTo(series[i].radius, 0);\r\n        context.lineTo(0, 0);\r\n        context.closePath();\r\n        context.fill();\r\n        if (funnelOption.border == true) {\r\n          context.stroke();\r\n        }\r\n      }\r\n      context.translate(0, -eachSpacing)\r\n    }\r\n  }else{\r\n    for (let i = 0; i < series.length; i++) {\r\n      if (i == 0) {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.beginPath();\r\n            context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\r\n            context.moveTo(-activeWidth, 0);\r\n            context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\r\n            context.lineTo(series[i].radius + activeWidth, -eachSpacing);\r\n            context.lineTo(activeWidth, 0);\r\n            context.lineTo(-activeWidth, 0);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        }\r\n        series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing, centerPosition.x + series[i].radius, centerPosition.y];\r\n        context.beginPath();\r\n        context.setLineWidth(funnelOption.borderWidth * opts.pix);\r\n        context.setStrokeStyle(funnelOption.borderColor);\r\n        var fillColor = hexToRgb(series[i].color, funnelOption.fillOpacity);\r\n        if (funnelOption.linearType == 'custom') {\r\n          var grd = context.createLinearGradient(series[i].radius, -eachSpacing, -series[i].radius, -eachSpacing);\r\n          grd.addColorStop(0, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          grd.addColorStop(0.5, hexToRgb(funnelOption.customColor[series[i].linearIndex], funnelOption.fillOpacity));\r\n          grd.addColorStop(1, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          fillColor = grd\r\n        }\r\n        context.setFillStyle(fillColor);\r\n        context.moveTo(0, 0);\r\n        context.lineTo(-series[i].radius, -eachSpacing);\r\n        context.lineTo(series[i].radius, -eachSpacing);\r\n        context.lineTo(0, 0);\r\n        context.closePath();\r\n        context.fill();\r\n        if (funnelOption.border == true) {\r\n          context.stroke();\r\n        }\r\n      } else {\r\n        if (opts.tooltip) {\r\n          if (opts.tooltip.index == i) {\r\n            context.beginPath();\r\n            context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\r\n            context.moveTo(0, 0);\r\n            context.lineTo(-series[i - 1].radius - activeWidth, 0);\r\n            context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\r\n            context.lineTo(series[i].radius + activeWidth, -eachSpacing);\r\n            context.lineTo(series[i - 1].radius + activeWidth, 0);\r\n            context.lineTo(0, 0);\r\n            context.closePath();\r\n            context.fill();\r\n          }\r\n        }\r\n        series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\r\n        context.beginPath();\r\n        context.setLineWidth(funnelOption.borderWidth * opts.pix);\r\n        context.setStrokeStyle(funnelOption.borderColor);\r\n        var fillColor = hexToRgb(series[i].color, funnelOption.fillOpacity);\r\n        if (funnelOption.linearType == 'custom') {\r\n          var grd = context.createLinearGradient(series[i].radius, -eachSpacing, -series[i].radius, -eachSpacing);\r\n          grd.addColorStop(0, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          grd.addColorStop(0.5, hexToRgb(funnelOption.customColor[series[i].linearIndex], funnelOption.fillOpacity));\r\n          grd.addColorStop(1, hexToRgb(series[i].color, funnelOption.fillOpacity));\r\n          fillColor = grd\r\n        }\r\n        context.setFillStyle(fillColor);\r\n        context.moveTo(0, 0);\r\n        context.lineTo(-series[i - 1].radius, 0);\r\n        context.lineTo(-series[i].radius, -eachSpacing);\r\n        context.lineTo(series[i].radius, -eachSpacing);\r\n        context.lineTo(series[i - 1].radius, 0);\r\n        context.lineTo(0, 0);\r\n        context.closePath();\r\n        context.fill();\r\n        if (funnelOption.border == true) {\r\n          context.stroke();\r\n        }\r\n      }\r\n      context.translate(0, -eachSpacing)\r\n    }\r\n  }\r\n  \r\n  context.restore();\r\n  if (opts.dataLabel !== false && process === 1) {\r\n    drawFunnelText(series, opts, context, eachSpacing, funnelOption.labelAlign, activeWidth, centerPosition);\r\n  }\r\n  return {\r\n    center: centerPosition,\r\n    radius: radius,\r\n    series: series\r\n  };\r\n}\r\n\r\nfunction drawFunnelText(series, opts, context, eachSpacing, labelAlign, activeWidth, centerPosition) {\r\n  for (let i = 0; i < series.length; i++) {\r\n    let item = series[i];\r\n    if(item.labelShow === false){\r\n      continue;\r\n    }\r\n    let startX, endX, startY, fontSize;\r\n    let text = item.formatter ? item.formatter(item,i,series,opts) : util.toFixed(item._proportion_ * 100) + '%';\r\n    text = item.labelText ? item.labelText : text;\r\n    if (labelAlign == 'right') {\r\n      if(opts.extra.funnel.type === 'pyramid'){\r\n        if (i == series.length -1) {\r\n          startX = (item.funnelArea[2] + centerPosition.x) / 2;\r\n        } else {\r\n          startX = (item.funnelArea[2] + series[i + 1].funnelArea[2]) / 2;\r\n        }\r\n      }else{\r\n        if (i == 0) {\r\n          startX = (item.funnelArea[2] + centerPosition.x) / 2;\r\n        } else {\r\n          startX = (item.funnelArea[2] + series[i - 1].funnelArea[2]) / 2;\r\n        }\r\n      }\r\n      endX = startX + activeWidth * 2;\r\n      startY = item.funnelArea[1] + eachSpacing / 2;\r\n      fontSize = item.textSize * opts.pix || opts.fontSize * opts.pix;\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.setStrokeStyle(item.color);\r\n      context.setFillStyle(item.color);\r\n      context.beginPath();\r\n      context.moveTo(startX, startY);\r\n      context.lineTo(endX, startY);\r\n      context.stroke();\r\n      context.closePath();\r\n      context.beginPath();\r\n      context.moveTo(endX, startY);\r\n      context.arc(endX, startY, 2 * opts.pix, 0, 2 * Math.PI);\r\n      context.closePath();\r\n      context.fill();\r\n      context.beginPath();\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(item.textColor || opts.fontColor);\r\n      context.fillText(text, endX + 5, startY + fontSize / 2 - 2);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.closePath();\r\n    } else {\r\n      if(opts.extra.funnel.type === 'pyramid'){\r\n        if (i == series.length -1) {\r\n          startX = (item.funnelArea[0] + centerPosition.x) / 2;\r\n        } else {\r\n          startX = (item.funnelArea[0] + series[i + 1].funnelArea[0]) / 2;\r\n        }\r\n      }else{\r\n        if (i == 0) {\r\n          startX = (item.funnelArea[0] + centerPosition.x) / 2;\r\n        } else {\r\n          startX = (item.funnelArea[0] + series[i - 1].funnelArea[0]) / 2;\r\n        }\r\n      }\r\n      endX = startX - activeWidth * 2;\r\n      startY = item.funnelArea[1] + eachSpacing / 2;\r\n      fontSize = item.textSize * opts.pix || opts.fontSize * opts.pix;\r\n      context.setLineWidth(1 * opts.pix);\r\n      context.setStrokeStyle(item.color);\r\n      context.setFillStyle(item.color);\r\n      context.beginPath();\r\n      context.moveTo(startX, startY);\r\n      context.lineTo(endX, startY);\r\n      context.stroke();\r\n      context.closePath();\r\n      context.beginPath();\r\n      context.moveTo(endX, startY);\r\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\r\n      context.closePath();\r\n      context.fill();\r\n      context.beginPath();\r\n      context.setFontSize(fontSize);\r\n      context.setFillStyle(item.textColor || opts.fontColor);\r\n      context.fillText(text, endX - 5 - measureText(text, fontSize, context), startY + fontSize / 2 - 2);\r\n      context.closePath();\r\n      context.stroke();\r\n      context.closePath();\r\n    }\r\n\r\n  }\r\n}\r\n\r\n\r\nfunction drawCanvas(opts, context) {\r\n  context.draw();\r\n}\r\n\r\nvar Timing = {\r\n  easeIn: function easeIn(pos) {\r\n    return Math.pow(pos, 3);\r\n  },\r\n  easeOut: function easeOut(pos) {\r\n    return Math.pow(pos - 1, 3) + 1;\r\n  },\r\n  easeInOut: function easeInOut(pos) {\r\n    if ((pos /= 0.5) < 1) {\r\n      return 0.5 * Math.pow(pos, 3);\r\n    } else {\r\n      return 0.5 * (Math.pow(pos - 2, 3) + 2);\r\n    }\r\n  },\r\n  linear: function linear(pos) {\r\n    return pos;\r\n  }\r\n};\r\n\r\nfunction Animation(opts) {\r\n  this.isStop = false;\r\n  opts.duration = typeof opts.duration === 'undefined' ? 1000 : opts.duration;\r\n  opts.timing = opts.timing || 'easeInOut';\r\n  var delay = 17;\r\n  function createAnimationFrame() {\r\n    if (typeof setTimeout !== 'undefined') {\r\n      return function(step, delay) {\r\n        setTimeout(function() {\r\n          var timeStamp = +new Date();\r\n          step(timeStamp);\r\n        }, delay);\r\n      };\r\n    } else if (typeof requestAnimationFrame !== 'undefined') {\r\n      return requestAnimationFrame;\r\n    } else {\r\n      return function(step) {\r\n        step(null);\r\n      };\r\n    }\r\n  };\r\n  var animationFrame = createAnimationFrame();\r\n  var startTimeStamp = null;\r\n  var _step = function step(timestamp) {\r\n    if (timestamp === null || this.isStop === true) {\r\n      opts.onProcess && opts.onProcess(1);\r\n      opts.onAnimationFinish && opts.onAnimationFinish();\r\n      return;\r\n    }\r\n    if (startTimeStamp === null) {\r\n      startTimeStamp = timestamp;\r\n    }\r\n    if (timestamp - startTimeStamp < opts.duration) {\r\n      var process = (timestamp - startTimeStamp) / opts.duration;\r\n      var timingFunction = Timing[opts.timing];\r\n      process = timingFunction(process);\r\n      opts.onProcess && opts.onProcess(process);\r\n      animationFrame(_step, delay);\r\n    } else {\r\n      opts.onProcess && opts.onProcess(1);\r\n      opts.onAnimationFinish && opts.onAnimationFinish();\r\n    }\r\n  };\r\n  _step = _step.bind(this);\r\n  animationFrame(_step, delay);\r\n}\r\n\r\nAnimation.prototype.stop = function() {\r\n  this.isStop = true;\r\n};\r\n\r\nfunction drawCharts(type, opts, config, context) {\r\n  var _this = this;\r\n  var series = opts.series;\r\n  //兼容ECharts饼图类数据格式\r\n  if (type === 'pie' || type === 'ring' || type === 'mount' || type === 'rose' || type === 'funnel') {\r\n    series = fixPieSeries(series, opts, config);\r\n  }\r\n  var categories = opts.categories;\r\n  if (type === 'mount') {\r\n    categories = [];\r\n    for (let j = 0; j < series.length; j++) {\r\n      if(series[j].show !== false) categories.push(series[j].name)\r\n    }\r\n    opts.categories = categories;\r\n  }\r\n  series = fillSeries(series, opts, config);\r\n  var duration = opts.animation ? opts.duration : 0;\r\n  _this.animationInstance && _this.animationInstance.stop();\r\n  var seriesMA = null;\r\n  if (type == 'candle') {\r\n    let average = assign({}, opts.extra.candle.average);\r\n    if (average.show) {\r\n      seriesMA = calCandleMA(average.day, average.name, average.color, series[0].data);\r\n      seriesMA = fillSeries(seriesMA, opts, config);\r\n      opts.seriesMA = seriesMA;\r\n    } else if (opts.seriesMA) {\r\n      seriesMA = opts.seriesMA = fillSeries(opts.seriesMA, opts, config);\r\n    } else {\r\n      seriesMA = series;\r\n    }\r\n  } else {\r\n    seriesMA = series;\r\n  }\r\n  /* 过滤掉show=false的series */\r\n  opts._series_ = series = filterSeries(series);\r\n  //重新计算图表区域\r\n  opts.area = new Array(4);\r\n  //复位绘图区域\r\n  for (let j = 0; j < 4; j++) {\r\n    opts.area[j] = opts.padding[j] * opts.pix;\r\n  }\r\n  //通过计算三大区域：图例、X轴、Y轴的大小，确定绘图区域\r\n  var _calLegendData = calLegendData(seriesMA, opts, config, opts.chartData, context),\r\n    legendHeight = _calLegendData.area.wholeHeight,\r\n    legendWidth = _calLegendData.area.wholeWidth;\r\n\r\n  switch (opts.legend.position) {\r\n    case 'top':\r\n      opts.area[0] += legendHeight;\r\n      break;\r\n    case 'bottom':\r\n      opts.area[2] += legendHeight;\r\n      break;\r\n    case 'left':\r\n      opts.area[3] += legendWidth;\r\n      break;\r\n    case 'right':\r\n      opts.area[1] += legendWidth;\r\n      break;\r\n  }\r\n\r\n  let _calYAxisData = {},\r\n    yAxisWidth = 0;\r\n  if (opts.type === 'line' || opts.type === 'column'|| opts.type === 'mount' || opts.type === 'area' || opts.type === 'mix' || opts.type === 'candle' || opts.type === 'scatter'  || opts.type === 'bubble' || opts.type === 'bar') {\r\n      _calYAxisData = calYAxisData(series, opts, config, context);\r\n      yAxisWidth = _calYAxisData.yAxisWidth;\r\n    //如果显示Y轴标题\r\n    if (opts.yAxis.showTitle) {\r\n      let maxTitleHeight = 0;\r\n      for (let i = 0; i < opts.yAxis.data.length; i++) {\r\n        maxTitleHeight = Math.max(maxTitleHeight, opts.yAxis.data[i].titleFontSize ? opts.yAxis.data[i].titleFontSize * opts.pix : config.fontSize)\r\n      }\r\n      opts.area[0] += maxTitleHeight;\r\n    }\r\n    let rightIndex = 0,\r\n      leftIndex = 0;\r\n    //计算主绘图区域左右位置\r\n    for (let i = 0; i < yAxisWidth.length; i++) {\r\n      if (yAxisWidth[i].position == 'left') {\r\n        if (leftIndex > 0) {\r\n          opts.area[3] += yAxisWidth[i].width + opts.yAxis.padding * opts.pix;\r\n        } else {\r\n          opts.area[3] += yAxisWidth[i].width;\r\n        }\r\n        leftIndex += 1;\r\n      } else if (yAxisWidth[i].position == 'right') {\r\n        if (rightIndex > 0) {\r\n          opts.area[1] += yAxisWidth[i].width + opts.yAxis.padding * opts.pix;\r\n        } else {\r\n          opts.area[1] += yAxisWidth[i].width;\r\n        }\r\n        rightIndex += 1;\r\n      }\r\n    }\r\n  } else {\r\n    config.yAxisWidth = yAxisWidth;\r\n  }\r\n  opts.chartData.yAxisData = _calYAxisData;\r\n\r\n  if (opts.categories && opts.categories.length && opts.type !== 'radar' && opts.type !== 'gauge' && opts.type !== 'bar') {\r\n    opts.chartData.xAxisData = getXAxisPoints(opts.categories, opts, config);\r\n    let _calCategoriesData = calCategoriesData(opts.categories, opts, config, opts.chartData.xAxisData.eachSpacing, context),\r\n      xAxisHeight = _calCategoriesData.xAxisHeight,\r\n      angle = _calCategoriesData.angle;\r\n    config.xAxisHeight = xAxisHeight;\r\n    config._xAxisTextAngle_ = angle;\r\n    opts.area[2] += xAxisHeight;\r\n    opts.chartData.categoriesData = _calCategoriesData;\r\n  } else {\r\n    if (opts.type === 'line' || opts.type === 'area' || opts.type === 'scatter' || opts.type === 'bubble' || opts.type === 'bar') {\r\n      opts.chartData.xAxisData = calXAxisData(series, opts, config, context);\r\n      categories = opts.chartData.xAxisData.rangesFormat;\r\n      let _calCategoriesData = calCategoriesData(categories, opts, config, opts.chartData.xAxisData.eachSpacing, context),\r\n        xAxisHeight = _calCategoriesData.xAxisHeight,\r\n        angle = _calCategoriesData.angle;\r\n      config.xAxisHeight = xAxisHeight;\r\n      config._xAxisTextAngle_ = angle;\r\n      opts.area[2] += xAxisHeight;\r\n      opts.chartData.categoriesData = _calCategoriesData;\r\n    } else {\r\n      opts.chartData.xAxisData = {\r\n        xAxisPoints: []\r\n      };\r\n    }\r\n  }\r\n\r\n  //计算右对齐偏移距离\r\n  if (opts.enableScroll && opts.xAxis.scrollAlign == 'right' && opts._scrollDistance_ === undefined) {\r\n    let offsetLeft = 0,\r\n      xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\r\n      startX = opts.chartData.xAxisData.startX,\r\n      endX = opts.chartData.xAxisData.endX,\r\n      eachSpacing = opts.chartData.xAxisData.eachSpacing;\r\n    let totalWidth = eachSpacing * (xAxisPoints.length - 1);\r\n    let screenWidth = endX - startX;\r\n    offsetLeft = screenWidth - totalWidth;\r\n    _this.scrollOption.currentOffset = offsetLeft;\r\n    _this.scrollOption.startTouchX = offsetLeft;\r\n    _this.scrollOption.distance = 0;\r\n    _this.scrollOption.lastMoveTime = 0;\r\n    opts._scrollDistance_ = offsetLeft;\r\n  }\r\n\r\n  if (type === 'pie' || type === 'ring' || type === 'rose') {\r\n    config._pieTextMaxLength_ = opts.dataLabel === false ? 0 : getPieTextMaxLength(seriesMA, config, context, opts);\r\n  }\r\n  \r\n  switch (type) {\r\n    case 'word':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawWordCloudDataPoints(series, opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'map':\r\n      context.clearRect(0, 0, opts.width, opts.height);\r\n      drawMapDataPoints(series, opts, config, context);\r\n      break;\r\n    case 'funnel':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.funnelData = drawFunnelDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'line':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawLineDataPoints = drawLineDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawLineDataPoints.xAxisPoints,\r\n            calPoints = _drawLineDataPoints.calPoints,\r\n            eachSpacing = _drawLineDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'scatter':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawScatterDataPoints = drawScatterDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawScatterDataPoints.xAxisPoints,\r\n            calPoints = _drawScatterDataPoints.calPoints,\r\n            eachSpacing = _drawScatterDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'bubble':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawBubbleDataPoints = drawBubbleDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawBubbleDataPoints.xAxisPoints,\r\n            calPoints = _drawBubbleDataPoints.calPoints,\r\n            eachSpacing = _drawBubbleDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'mix':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawMixDataPoints = drawMixDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawMixDataPoints.xAxisPoints,\r\n            calPoints = _drawMixDataPoints.calPoints,\r\n            eachSpacing = _drawMixDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'column':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawColumnDataPoints = drawColumnDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawColumnDataPoints.xAxisPoints,\r\n            calPoints = _drawColumnDataPoints.calPoints,\r\n            eachSpacing = _drawColumnDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'mount':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawMountDataPoints = drawMountDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawMountDataPoints.xAxisPoints,\r\n            calPoints = _drawMountDataPoints.calPoints,\r\n            eachSpacing = _drawMountDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'bar':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawBarDataPoints = drawBarDataPoints(series, opts, config, context, process),\r\n            yAxisPoints = _drawBarDataPoints.yAxisPoints,\r\n            calPoints = _drawBarDataPoints.calPoints,\r\n            eachSpacing = _drawBarDataPoints.eachSpacing;\r\n          opts.chartData.yAxisPoints = yAxisPoints;\r\n          opts.chartData.xAxisPoints = opts.chartData.xAxisData.xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, yAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'area':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawAreaDataPoints = drawAreaDataPoints(series, opts, config, context, process),\r\n            xAxisPoints = _drawAreaDataPoints.xAxisPoints,\r\n            calPoints = _drawAreaDataPoints.calPoints,\r\n            eachSpacing = _drawAreaDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'ring':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'pie':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'rose':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.pieData = drawRoseDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'radar':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.radarData = drawRadarDataPoints(series, opts, config, context, process);\r\n          drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          drawToolTipBridge(opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'arcbar':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.arcbarData = drawArcbarDataPoints(series, opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'gauge':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          opts.chartData.gaugeData = drawGaugeDataPoints(categories, series, opts, config, context, process);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n    case 'candle':\r\n      this.animationInstance = new Animation({\r\n        timing: opts.timing,\r\n        duration: duration,\r\n        onProcess: function onProcess(process) {\r\n          context.clearRect(0, 0, opts.width, opts.height);\r\n          if (opts.rotate) {\r\n            contextRotate(context, opts);\r\n          }\r\n          drawYAxisGrid(categories, opts, config, context);\r\n          drawXAxis(categories, opts, config, context);\r\n          var _drawCandleDataPoints = drawCandleDataPoints(series, seriesMA, opts, config, context, process),\r\n            xAxisPoints = _drawCandleDataPoints.xAxisPoints,\r\n            calPoints = _drawCandleDataPoints.calPoints,\r\n            eachSpacing = _drawCandleDataPoints.eachSpacing;\r\n          opts.chartData.xAxisPoints = xAxisPoints;\r\n          opts.chartData.calPoints = calPoints;\r\n          opts.chartData.eachSpacing = eachSpacing;\r\n          drawYAxis(series, opts, config, context);\r\n          if (opts.enableMarkLine !== false && process === 1) {\r\n            drawMarkLine(opts, config, context);\r\n          }\r\n          if (seriesMA) {\r\n            drawLegend(seriesMA, opts, config, context, opts.chartData);\r\n          } else {\r\n            drawLegend(opts.series, opts, config, context, opts.chartData);\r\n          }\r\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\r\n          drawCanvas(opts, context);\r\n        },\r\n        onAnimationFinish: function onAnimationFinish() {\r\n          _this.uevent.trigger('renderComplete');\r\n        }\r\n      });\r\n      break;\r\n  }\r\n}\r\n\r\nfunction uChartsEvent() {\r\n  this.events = {};\r\n}\r\n\r\nuChartsEvent.prototype.addEventListener = function(type, listener) {\r\n  this.events[type] = this.events[type] || [];\r\n  this.events[type].push(listener);\r\n};\r\n\r\nuChartsEvent.prototype.delEventListener = function(type) {\r\n  this.events[type] = [];\r\n};\r\n\r\nuChartsEvent.prototype.trigger = function() {\r\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\r\n    args[_key] = arguments[_key];\r\n  }\r\n  var type = args[0];\r\n  var params = args.slice(1);\r\n  if (!!this.events[type]) {\r\n    this.events[type].forEach(function(listener) {\r\n      try {\r\n        listener.apply(null, params);\r\n      } catch (e) {\r\n          //console.log('[uCharts] '+e);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nvar uCharts = function uCharts(opts) {\r\n  opts.pix = opts.pixelRatio ? opts.pixelRatio : 1;\r\n  opts.fontSize = opts.fontSize ? opts.fontSize : 13;\r\n  opts.fontColor = opts.fontColor ? opts.fontColor : config.fontColor;\r\n  if (opts.background == \"\" || opts.background == \"none\") {\r\n    opts.background = \"#FFFFFF\"\r\n  }\r\n  opts.title = assign({}, opts.title);\r\n  opts.subtitle = assign({}, opts.subtitle);\r\n  opts.duration = opts.duration ? opts.duration : 1000;\r\n  opts.yAxis = assign({}, {\r\n    data: [],\r\n    showTitle: false,\r\n    disabled: false,\r\n    disableGrid: false,\r\n    splitNumber: 5,\r\n    gridType: 'solid',\r\n    dashLength: 4 * opts.pix,\r\n    gridColor: '#cccccc',\r\n    padding: 10,\r\n    fontColor: '#666666'\r\n  }, opts.yAxis);\r\n  opts.xAxis = assign({}, {\r\n    rotateLabel: false,\r\n    rotateAngle:45,\r\n    disabled: false,\r\n    disableGrid: false,\r\n    splitNumber: 5,\r\n    calibration:false,\r\n    gridType: 'solid',\r\n    dashLength: 4,\r\n    scrollAlign: 'left',\r\n    boundaryGap: 'center',\r\n    axisLine: true,\r\n    axisLineColor: '#cccccc'\r\n  }, opts.xAxis);\r\n  opts.xAxis.scrollPosition = opts.xAxis.scrollAlign;\r\n  opts.legend = assign({}, {\r\n    show: true,\r\n    position: 'bottom',\r\n    float: 'center',\r\n    backgroundColor: 'rgba(0,0,0,0)',\r\n    borderColor: 'rgba(0,0,0,0)',\r\n    borderWidth: 0,\r\n    padding: 5,\r\n    margin: 5,\r\n    itemGap: 10,\r\n    fontSize: opts.fontSize,\r\n    lineHeight: opts.fontSize,\r\n    fontColor: opts.fontColor,\r\n    formatter: {},\r\n    hiddenColor: '#CECECE'\r\n  }, opts.legend);\r\n  opts.extra = assign({}, opts.extra);\r\n  opts.rotate = opts.rotate ? true : false;\r\n  opts.animation = opts.animation ? true : false;\r\n  opts.rotate = opts.rotate ? true : false;\r\n  opts.canvas2d = opts.canvas2d ? true : false;\r\n  \r\n  let config$$1 = assign({}, config);\r\n  config$$1.color = opts.color ? opts.color : config$$1.color;\r\n  if (opts.type == 'pie') {\r\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.pie.labelWidth * opts.pix || config$$1.pieChartLinePadding * opts.pix;\r\n  }\r\n  if (opts.type == 'ring') {\r\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.ring.labelWidth * opts.pix || config$$1.pieChartLinePadding * opts.pix;\r\n  }\r\n  if (opts.type == 'rose') {\r\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.rose.labelWidth * opts.pix || config$$1.pieChartLinePadding * opts.pix;\r\n  }\r\n  config$$1.pieChartTextPadding = opts.dataLabel === false ? 0 : config$$1.pieChartTextPadding * opts.pix;\r\n\r\n  //屏幕旋转\r\n  config$$1.rotate = opts.rotate;\r\n  if (opts.rotate) {\r\n    let tempWidth = opts.width;\r\n    let tempHeight = opts.height;\r\n    opts.width = tempHeight;\r\n    opts.height = tempWidth;\r\n  }\r\n\r\n  //适配高分屏\r\n  opts.padding = opts.padding ? opts.padding : config$$1.padding;\r\n  config$$1.yAxisWidth = config.yAxisWidth * opts.pix;\r\n  config$$1.xAxisHeight = config.xAxisHeight * opts.pix;\r\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\r\n    config$$1.xAxisHeight += 6 * opts.pix;\r\n  }\r\n  config$$1.fontSize = opts.fontSize * opts.pix;\r\n  config$$1.titleFontSize = config.titleFontSize * opts.pix;\r\n  config$$1.subtitleFontSize = config.subtitleFontSize * opts.pix;\r\n  config$$1.toolTipPadding = config.toolTipPadding * opts.pix;\r\n  config$$1.toolTipLineHeight = config.toolTipLineHeight * opts.pix;\r\n  if(!opts.context){\r\n    throw new Error('[uCharts] 未获取到context！注意：v2.0版本后，需要自行获取canvas的绘图上下文并传入opts.context！');\r\n  }\r\n  this.context = opts.context;\r\n  if (!this.context.setTextAlign) {\r\n    this.context.setStrokeStyle = function(e) {\r\n      return this.strokeStyle = e;\r\n    }\r\n    this.context.setLineWidth = function(e) {\r\n      return this.lineWidth = e;\r\n    }\r\n    this.context.setLineCap = function(e) {\r\n      return this.lineCap = e;\r\n    }\r\n    this.context.setFontSize = function(e) {\r\n      return this.font = e + \"px sans-serif\";\r\n    }\r\n    this.context.setFillStyle = function(e) {\r\n      return this.fillStyle = e;\r\n    }\r\n    this.context.setTextAlign = function(e) {\r\n      return this.textAlign = e;\r\n    }\r\n    this.context.draw = function() {}\r\n  }\r\n  //兼容NVUEsetLineDash\r\n  if(!this.context.setLineDash){\r\n    this.context.setLineDash = function(e) {}\r\n  }\r\n  opts.chartData = {};\r\n  this.uevent = new uChartsEvent();\r\n  this.scrollOption = {\r\n    currentOffset: 0,\r\n    startTouchX: 0,\r\n    distance: 0,\r\n    lastMoveTime: 0\r\n  };\r\n  this.opts = opts;\r\n  this.config = config$$1;\r\n  drawCharts.call(this, opts.type, opts, config$$1, this.context);\r\n};\r\n\r\nuCharts.prototype.updateData = function() {\r\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n  this.opts = assign({}, this.opts, data);\r\n  this.opts.updateData = true;\r\n  let scrollPosition = data.scrollPosition || 'current';\r\n  switch (scrollPosition) {\r\n    case 'current':\r\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\r\n      break;\r\n    case 'left':\r\n      this.opts._scrollDistance_ = 0;\r\n      this.scrollOption = {\r\n        currentOffset: 0,\r\n        startTouchX: 0,\r\n        distance: 0,\r\n        lastMoveTime: 0\r\n      };\r\n      break;\r\n    case 'right':\r\n      let _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config, this.context), yAxisWidth = _calYAxisData.yAxisWidth;\r\n      this.config.yAxisWidth = yAxisWidth;\r\n      let offsetLeft = 0;\r\n      let _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config), xAxisPoints = _getXAxisPoints0.xAxisPoints,\r\n        startX = _getXAxisPoints0.startX,\r\n        endX = _getXAxisPoints0.endX,\r\n        eachSpacing = _getXAxisPoints0.eachSpacing;\r\n      let totalWidth = eachSpacing * (xAxisPoints.length - 1);\r\n      let screenWidth = endX - startX;\r\n      offsetLeft = screenWidth - totalWidth;\r\n      this.scrollOption = {\r\n        currentOffset: offsetLeft,\r\n        startTouchX: offsetLeft,\r\n        distance: 0,\r\n        lastMoveTime: 0\r\n      };\r\n      this.opts._scrollDistance_ = offsetLeft;\r\n      break;\r\n  }\r\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\r\n};\r\n\r\nuCharts.prototype.zoom = function() {\r\n  var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.opts.xAxis.itemCount;\r\n  if (this.opts.enableScroll !== true) {\r\n    console.log('[uCharts] 请启用滚动条后使用')\r\n    return;\r\n  }\r\n  //当前屏幕中间点\r\n  let centerPoint = Math.round(Math.abs(this.scrollOption.currentOffset) / this.opts.chartData.eachSpacing) + Math.round(this.opts.xAxis.itemCount / 2);\r\n  this.opts.animation = false;\r\n  this.opts.xAxis.itemCount = val.itemCount;\r\n  //重新计算x轴偏移距离\r\n  let _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config, this.context),\r\n    yAxisWidth = _calYAxisData.yAxisWidth;\r\n  this.config.yAxisWidth = yAxisWidth;\r\n  let offsetLeft = 0;\r\n  let _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\r\n    xAxisPoints = _getXAxisPoints0.xAxisPoints,\r\n    startX = _getXAxisPoints0.startX,\r\n    endX = _getXAxisPoints0.endX,\r\n    eachSpacing = _getXAxisPoints0.eachSpacing;\r\n  let centerLeft = eachSpacing * centerPoint;\r\n  let screenWidth = endX - startX;\r\n  let MaxLeft = screenWidth - eachSpacing * (xAxisPoints.length - 1);\r\n  offsetLeft = screenWidth / 2 - centerLeft;\r\n  if (offsetLeft > 0) {\r\n    offsetLeft = 0;\r\n  }\r\n  if (offsetLeft < MaxLeft) {\r\n    offsetLeft = MaxLeft;\r\n  }\r\n  this.scrollOption = {\r\n    currentOffset: offsetLeft,\r\n    startTouchX: 0,\r\n    distance: 0,\r\n    lastMoveTime: 0\r\n  };\r\n  calValidDistance(this, offsetLeft, this.opts.chartData, this.config, this.opts);\r\n  this.opts._scrollDistance_ = offsetLeft;\r\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\r\n};\r\n\r\nuCharts.prototype.dobuleZoom = function(e) {\n  if (this.opts.enableScroll !== true) {\n    console.log('[uCharts] 请启用滚动条后使用')\n    return;\n  }\r\n  const tcs = e.changedTouches;\n  if (tcs.length < 2) {\n    return;\n  }\n  for (var i = 0; i < tcs.length; i++) {\n    tcs[i].x = tcs[i].x ? tcs[i].x : tcs[i].clientX;\n    tcs[i].y = tcs[i].y ? tcs[i].y : tcs[i].clientY;\n  }\r\n  const ntcs = [getTouches(tcs[0], this.opts, e),getTouches(tcs[1], this.opts, e)]; \r\n  const xlength = Math.abs(ntcs[0].x - ntcs[1].x);\r\n  // 记录初始的两指之间的数据\r\n  if(!this.scrollOption.moveCount){\r\n    let cts0 = {changedTouches:[{x:tcs[0].x,y:this.opts.area[0] / this.opts.pix + 2}]};\r\n    let cts1 = {changedTouches:[{x:tcs[1].x,y:this.opts.area[0] / this.opts.pix + 2}]};\r\n    if(this.opts.rotate){\r\n      cts0 = {changedTouches:[{x:this.opts.height / this.opts.pix - this.opts.area[0] / this.opts.pix - 2,y:tcs[0].y}]};\r\n      cts1 = {changedTouches:[{x:this.opts.height / this.opts.pix - this.opts.area[0] / this.opts.pix - 2,y:tcs[1].y}]};\r\n    }\r\n    const moveCurrent1 = this.getCurrentDataIndex(cts0).index;\r\n    const moveCurrent2 = this.getCurrentDataIndex(cts1).index;\r\n    const moveCount = Math.abs(moveCurrent1 - moveCurrent2);\r\n    this.scrollOption.moveCount = moveCount;\r\n    this.scrollOption.moveCurrent1 = Math.min(moveCurrent1, moveCurrent2);\r\n    this.scrollOption.moveCurrent2 = Math.max(moveCurrent1, moveCurrent2);\r\n    return;\r\n  }\r\n  \r\n  let currentEachSpacing = xlength / this.scrollOption.moveCount;\r\n  let itemCount = (this.opts.width - this.opts.area[1] - this.opts.area[3]) / currentEachSpacing;\r\n  itemCount = itemCount <= 2 ? 2 : itemCount;\r\n  itemCount = itemCount >= this.opts.categories.length ? this.opts.categories.length : itemCount;\n  this.opts.animation = false;\n  this.opts.xAxis.itemCount = itemCount;\n  // 重新计算滚动条偏移距离\n  let offsetLeft = 0;\r\n  let _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\r\n    xAxisPoints = _getXAxisPoints0.xAxisPoints,\r\n    startX = _getXAxisPoints0.startX,\r\n    endX = _getXAxisPoints0.endX,\r\n    eachSpacing = _getXAxisPoints0.eachSpacing;\r\n  let currentLeft = eachSpacing * this.scrollOption.moveCurrent1;\r\n  let screenWidth = endX - startX;\r\n  let MaxLeft = screenWidth - eachSpacing * (xAxisPoints.length - 1);\r\n  offsetLeft = -currentLeft+Math.min(ntcs[0].x,ntcs[1].x)-this.opts.area[3]-eachSpacing;\n  if (offsetLeft > 0) {\n    offsetLeft = 0;\n  }\n  if (offsetLeft < MaxLeft) {\n    offsetLeft = MaxLeft;\n  }\n  this.scrollOption.currentOffset= offsetLeft;\n  this.scrollOption.startTouchX= 0;\n  this.scrollOption.distance=0;\n  calValidDistance(this, offsetLeft, this.opts.chartData, this.config, this.opts);\n  this.opts._scrollDistance_ = offsetLeft;\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n}\r\n\r\nuCharts.prototype.stopAnimation = function() {\r\n  this.animationInstance && this.animationInstance.stop();\r\n};\r\n\r\nuCharts.prototype.addEventListener = function(type, listener) {\r\n  this.uevent.addEventListener(type, listener);\r\n};\r\n\r\nuCharts.prototype.delEventListener = function(type) {\r\n  this.uevent.delEventListener(type);\r\n};\r\n\r\nuCharts.prototype.getCurrentDataIndex = function(e) {\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (touches) {\r\n    let _touches$ = getTouches(touches, this.opts, e);\r\n    if (this.opts.type === 'pie' || this.opts.type === 'ring') {\r\n      return findPieChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.pieData, this.opts);\r\n    } else if (this.opts.type === 'rose') {\r\n      return findRoseChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.pieData, this.opts);\r\n    } else if (this.opts.type === 'radar') {\r\n      return findRadarChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.radarData, this.opts.categories.length);\r\n    } else if (this.opts.type === 'funnel') {\r\n      return findFunnelChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.funnelData);\r\n    } else if (this.opts.type === 'map') {\r\n      return findMapChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts);\r\n    } else if (this.opts.type === 'word') {\r\n      return findWordChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.wordCloudData);\r\n    } else if (this.opts.type === 'bar') {\r\n      return findBarChartCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.calPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\r\n    } else {\r\n      return findCurrentIndex({\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      }, this.opts.chartData.calPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nuCharts.prototype.getLegendDataIndex = function(e) {\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (touches) {\r\n    let _touches$ = getTouches(touches, this.opts, e);\r\n    return findLegendIndex({\r\n      x: _touches$.x,\r\n      y: _touches$.y\r\n    }, this.opts.chartData.legendData);\r\n  }\r\n  return -1;\r\n};\r\n\r\nuCharts.prototype.touchLegend = function(e) {\r\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (touches) {\r\n    var _touches$ = getTouches(touches, this.opts, e);\r\n    var index = this.getLegendDataIndex(e);\r\n    if (index >= 0) {\r\n      if (this.opts.type == 'candle') {\r\n        this.opts.seriesMA[index].show = !this.opts.seriesMA[index].show;\r\n      } else {\r\n        this.opts.series[index].show = !this.opts.series[index].show;\r\n      }\r\n      this.opts.animation = option.animation ? true : false;\r\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\r\n      drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\r\n    }\r\n  }\r\n\r\n};\r\n\r\nuCharts.prototype.showToolTip = function(e) {\r\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (!touches) {\r\n    console.log(\"[uCharts] 未获取到event坐标信息\");\r\n  }\r\n  var _touches$ = getTouches(touches, this.opts, e);\r\n  var currentOffset = this.scrollOption.currentOffset;\r\n  var opts = assign({}, this.opts, {\r\n    _scrollDistance_: currentOffset,\r\n    animation: false\r\n  });\r\n  if (this.opts.type === 'line' || this.opts.type === 'area' || this.opts.type === 'column' || this.opts.type === 'scatter' || this.opts.type === 'bubble') {\r\n    var current = this.getCurrentDataIndex(e);\r\n    var index = option.index == undefined ? current.index : option.index;\r\n    if (index > -1 || index.length>0) {\r\n      var seriesData = getSeriesDataItem(this.opts.series, index, current.group);\r\n      if (seriesData.length !== 0) {\r\n        var _getToolTipData = getToolTipData(seriesData, this.opts, index, current.group, this.opts.categories, option),\r\n          textList = _getToolTipData.textList,\r\n          offset = _getToolTipData.offset;\r\n        offset.y = _touches$.y;\r\n        opts.tooltip = {\r\n          textList: option.textList !== undefined ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'mount') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e).index : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = assign({}, opts._series_[index]);\r\n      var textList = [{\r\n        text: option.formatter ? option.formatter(seriesData, undefined, index, opts) : seriesData.name + ': ' + seriesData.data,\r\n        color: seriesData.color\r\n      }];\r\n      var offset = {\r\n        x: opts.chartData.calPoints[index].x,\r\n        y: _touches$.y\r\n      };\r\n      opts.tooltip = {\r\n        textList: option.textList ? option.textList : textList,\r\n        offset: option.offset !== undefined ? option.offset : offset,\r\n        option: option,\r\n        index: index\r\n      };\r\n    }\r\n    \r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'bar') {\r\n    var current = this.getCurrentDataIndex(e);\r\n    var index = option.index == undefined ? current.index : option.index;\r\n    if (index > -1 || index.length>0) {\r\n      var seriesData = getSeriesDataItem(this.opts.series, index, current.group);\r\n      if (seriesData.length !== 0) {\r\n        var _getToolTipData = getToolTipData(seriesData, this.opts, index, current.group, this.opts.categories, option),\r\n          textList = _getToolTipData.textList,\r\n          offset = _getToolTipData.offset;\r\n        offset.x = _touches$.x;\r\n        opts.tooltip = {\r\n          textList: option.textList !== undefined ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'mix') {\r\n    var current = this.getCurrentDataIndex(e);\r\n    var index = option.index == undefined ? current.index : option.index;\r\n    if (index > -1) {\r\n      var currentOffset = this.scrollOption.currentOffset;\r\n      var opts = assign({}, this.opts, {\r\n        _scrollDistance_: currentOffset,\r\n        animation: false\r\n      });\r\n      var seriesData = getSeriesDataItem(this.opts.series, index);\r\n      if (seriesData.length !== 0) {\r\n        var _getMixToolTipData = getMixToolTipData(seriesData, this.opts, index, this.opts.categories, option),\r\n          textList = _getMixToolTipData.textList,\r\n          offset = _getMixToolTipData.offset;\r\n        offset.y = _touches$.y;\r\n        opts.tooltip = {\r\n          textList: option.textList ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'candle') {\r\n    var current = this.getCurrentDataIndex(e);\r\n    var index = option.index == undefined ? current.index : option.index;\r\n    if (index > -1) {\r\n      var currentOffset = this.scrollOption.currentOffset;\r\n      var opts = assign({}, this.opts, {\r\n        _scrollDistance_: currentOffset,\r\n        animation: false\r\n      });\r\n      var seriesData = getSeriesDataItem(this.opts.series, index);\r\n      if (seriesData.length !== 0) {\r\n        var _getToolTipData = getCandleToolTipData(this.opts.series[0].data, seriesData, this.opts, index, this.opts.categories, this.opts.extra.candle, option),\r\n          textList = _getToolTipData.textList,\r\n          offset = _getToolTipData.offset;\r\n        offset.y = _touches$.y;\r\n        opts.tooltip = {\r\n          textList: option.textList ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose' || this.opts.type === 'funnel') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = assign({}, opts._series_[index]);\r\n      var textList = [{\r\n        text: option.formatter ? option.formatter(seriesData, undefined, index, opts) : seriesData.name + ': ' + seriesData.data,\r\n        color: seriesData.color\r\n      }];\r\n      var offset = {\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      };\r\n      opts.tooltip = {\r\n        textList: option.textList ? option.textList : textList,\r\n        offset: option.offset !== undefined ? option.offset : offset,\r\n        option: option,\r\n        index: index\r\n      };\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'map') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = assign({}, this.opts.series[index]);\r\n      seriesData.name = seriesData.properties.name\r\n      var textList = [{\r\n        text: option.formatter ? option.formatter(seriesData, undefined, index, this.opts) : seriesData.name,\r\n        color: seriesData.color\r\n      }];\r\n      var offset = {\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      };\r\n      opts.tooltip = {\r\n        textList: option.textList ? option.textList : textList,\r\n        offset: option.offset !== undefined ? option.offset : offset,\r\n        option: option,\r\n        index: index\r\n      };\r\n    }\r\n    opts.updateData = false;\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'word') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = assign({}, this.opts.series[index]);\r\n      var textList = [{\r\n        text: option.formatter ? option.formatter(seriesData, undefined, index, this.opts) : seriesData.name,\r\n        color: seriesData.color\r\n      }];\r\n      var offset = {\r\n        x: _touches$.x,\r\n        y: _touches$.y\r\n      };\r\n      opts.tooltip = {\r\n        textList: option.textList ? option.textList : textList,\r\n        offset: option.offset !== undefined ? option.offset : offset,\r\n        option: option,\r\n        index: index\r\n      };\r\n    }\r\n    opts.updateData = false;\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n  if (this.opts.type === 'radar') {\r\n    var index = option.index == undefined ? this.getCurrentDataIndex(e) : option.index;\r\n    if (index > -1) {\r\n      var opts = assign({}, this.opts, {animation: false});\r\n      var seriesData = getSeriesDataItem(this.opts.series, index);\r\n      if (seriesData.length !== 0) {\r\n        var textList = seriesData.map((item) => {\r\n          return {\r\n            text: option.formatter ? option.formatter(item, this.opts.categories[index], index, this.opts) : item.name + ': ' + item.data,\r\n            color: item.color\r\n          };\r\n        });\r\n        var offset = {\r\n          x: _touches$.x,\r\n          y: _touches$.y\r\n        };\r\n        opts.tooltip = {\r\n          textList: option.textList ? option.textList : textList,\r\n          offset: option.offset !== undefined ? option.offset : offset,\r\n          option: option,\r\n          index: index\r\n        };\r\n      }\r\n    }\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n  }\r\n};\r\n\r\nuCharts.prototype.translate = function(distance) {\r\n  this.scrollOption = {\r\n    currentOffset: distance,\r\n    startTouchX: distance,\r\n    distance: 0,\r\n    lastMoveTime: 0\r\n  };\r\n  let opts = assign({}, this.opts, {\r\n    _scrollDistance_: distance,\r\n    animation: false\r\n  });\r\n  drawCharts.call(this, this.opts.type, opts, this.config, this.context);\r\n};\r\n\r\nuCharts.prototype.scrollStart = function(e) {\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  var _touches$ = getTouches(touches, this.opts, e);\r\n  if (touches && this.opts.enableScroll === true) {\r\n    this.scrollOption.startTouchX = _touches$.x;\r\n  }\r\n};\r\n\r\nuCharts.prototype.scroll = function(e) {\r\n  if (this.scrollOption.lastMoveTime === 0) {\r\n    this.scrollOption.lastMoveTime = Date.now();\r\n  }\r\n  let Limit = this.opts.touchMoveLimit || 60;\r\n  let currMoveTime = Date.now();\r\n  let duration = currMoveTime - this.scrollOption.lastMoveTime;\r\n  if (duration < Math.floor(1000 / Limit)) return;\r\n  if (this.scrollOption.startTouchX == 0) return;\r\n  this.scrollOption.lastMoveTime = currMoveTime;\r\n  var touches = null;\r\n  if (e.changedTouches) {\r\n    touches = e.changedTouches[0];\r\n  } else {\r\n    touches = e.mp.changedTouches[0];\r\n  }\r\n  if (touches && this.opts.enableScroll === true) {\r\n    var _touches$ = getTouches(touches, this.opts, e);\r\n    var _distance;\r\n    _distance = _touches$.x - this.scrollOption.startTouchX;\r\n    var currentOffset = this.scrollOption.currentOffset;\r\n    var validDistance = calValidDistance(this, currentOffset + _distance, this.opts.chartData, this.config, this.opts);\r\n    this.scrollOption.distance = _distance = validDistance - currentOffset;\r\n    var opts = assign({}, this.opts, {\r\n      _scrollDistance_: currentOffset + _distance,\r\n      animation: false\r\n    });\r\n\t\tthis.opts = opts;\r\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\r\n    return currentOffset + _distance;\r\n  }\r\n};\r\n\r\nuCharts.prototype.scrollEnd = function(e) {\r\n  if (this.opts.enableScroll === true) {\r\n    var _scrollOption = this.scrollOption,\r\n      currentOffset = _scrollOption.currentOffset,\r\n      distance = _scrollOption.distance;\r\n    this.scrollOption.currentOffset = currentOffset + distance;\r\n    this.scrollOption.distance = 0;\r\n    this.scrollOption.moveCount = 0;\r\n  }\r\n};\r\n\r\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = uCharts;"]}